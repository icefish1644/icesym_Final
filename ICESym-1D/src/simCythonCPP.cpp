/* Generated by Cython 0.25.2 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__simCythonCPP
#define __PYX_HAVE_API__simCythonCPP
#include "cylinder.h"
#include "junction.h"
#include "tube.h"
#include "tank.h"
#include "atmosphere.h"
#include "simulator.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "Cylinder.pyx",
  "Simulator.pyx",
  "Junction.pyx",
  "Tube.pyx",
  "Tank.pyx",
  "Atmosphere.pyx",
  "simCythonCPP.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_12simCythonCPP_Cylinder;
struct __pyx_obj_12simCythonCPP_Junction;
struct __pyx_obj_12simCythonCPP_Tube;
struct __pyx_obj_12simCythonCPP_Tank;
struct __pyx_obj_12simCythonCPP_Atmosphere;
struct __pyx_obj_12simCythonCPP_Simulator;

/* "Cylinder.pyx":138
 * 
 * #defino la clase
 * cdef class Cylinder:             # <<<<<<<<<<<<<<
 * 	cdef c_Cylinder *thisptr
 * 
 */
struct __pyx_obj_12simCythonCPP_Cylinder {
  PyObject_HEAD
  Cylinder *thisptr;
};


/* "Junction.pyx":44
 * 
 * #defino la clase
 * cdef class Junction:             # <<<<<<<<<<<<<<
 * 	cdef c_Junction *thisptr
 * 
 */
struct __pyx_obj_12simCythonCPP_Junction {
  PyObject_HEAD
  Junction *thisptr;
};


/* "Tube.pyx":54
 * 
 * #defino la clase
 * cdef class Tube:             # <<<<<<<<<<<<<<
 * 	cdef c_Tube *thisptr
 * 
 */
struct __pyx_obj_12simCythonCPP_Tube {
  PyObject_HEAD
  Tube *thisptr;
};


/* "Tank.pyx":51
 * 
 * #defino la clase
 * cdef class Tank:             # <<<<<<<<<<<<<<
 * 	cdef c_Tank *thisptr
 * 
 */
struct __pyx_obj_12simCythonCPP_Tank {
  PyObject_HEAD
  Tank *thisptr;
};


/* "Atmosphere.pyx":33
 * 
 * #defino la clase
 * cdef class Atmosphere:             # <<<<<<<<<<<<<<
 * 	cdef c_Atmosphere *thisptr
 * 
 */
struct __pyx_obj_12simCythonCPP_Atmosphere {
  PyObject_HEAD
  Atmosphere *thisptr;
};


/* "Simulator.pyx":128
 * 
 * #defino la clase
 * cdef class Simulator:             # <<<<<<<<<<<<<<
 * 	cdef c_Simulator *thisptr
 * 
 */
struct __pyx_obj_12simCythonCPP_Simulator {
  PyObject_HEAD
  Simulator *thisptr;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    ((likely((cfunc)->func)) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
             ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
              (PY_VERSION_HEX >= 0x030600B1 && (cfunc)->flag == METH_FASTCALL ?  (*(__Pyx_PyCFunctionFast)(cfunc)->func)(self, &PyTuple_GET_ITEM(__pyx_empty_tuple, 0), 0, NULL) :\
                __Pyx__CallUnboundCMethod0(cfunc, self))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace);
#else
#define __Pyx_PyFloat_DivideObjC(op1, op2, floatval, inplace)\
    ((inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2)))
    #endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddObjC(PyObject *op1, PyObject *op2, double floatval, int inplace);
#else
#define __Pyx_PyFloat_AddObjC(op1, op2, floatval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CStringEquals.proto */
static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'simCythonCPP' */
static PyTypeObject *__pyx_ptype_12simCythonCPP_Cylinder = 0;
static PyTypeObject *__pyx_ptype_12simCythonCPP_Junction = 0;
static PyTypeObject *__pyx_ptype_12simCythonCPP_Tube = 0;
static PyTypeObject *__pyx_ptype_12simCythonCPP_Tank = 0;
static PyTypeObject *__pyx_ptype_12simCythonCPP_Atmosphere = 0;
static PyTypeObject *__pyx_ptype_12simCythonCPP_Simulator = 0;
#define __Pyx_MODULE_NAME "simCythonCPP"
int __pyx_module_is_main_simCythonCPP = 0;

/* Implementation of 'simCythonCPP' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static const char __pyx_k_[] = "";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_Cd[] = "Cd";
static const char __pyx_k_Dv[] = "Dv";
static const char __pyx_k_Lv[] = "Lv";
static const char __pyx_k_Mw[] = "Mw";
static const char __pyx_k__2[] = "*";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_ga[] = "ga";
static const char __pyx_k_pi[] = "pi";
static const char __pyx_k_tf[] = "tf";
static const char __pyx_k_SRv[] = "SRv";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_mod[] = "mod";
static const char __pyx_k_phi[] = "phi";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_Area[] = "Area";
static const char __pyx_k_Bore[] = "Bore";
static const char __pyx_k_Nval[] = "Nval";
static const char __pyx_k_Tank[] = "Tank";
static const char __pyx_k_Tube[] = "Tube";
static const char __pyx_k_beta[] = "beta";
static const char __pyx_k_exit[] = "exit";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_fuel[] = "fuel";
static const char __pyx_k_icyl[] = "icyl";
static const char __pyx_k_indx[] = "indx";
static const char __pyx_k_irpm[] = "irpm";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mass[] = "mass";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndof[] = "ndof";
static const char __pyx_k_nnod[] = "nnod";
static const char __pyx_k_none[] = "none";
static const char __pyx_k_prop[] = "prop";
static const char __pyx_k_rpms[] = "rpms";
static const char __pyx_k_sign[] = "sign";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_tube[] = "tube";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_xnod[] = "xnod";
static const char __pyx_k_Lvmax[] = "Lvmax";
static const char __pyx_k_R_gas[] = "R_gas";
static const char __pyx_k_Tanks[] = "Tanks";
static const char __pyx_k_Tubes[] = "Tubes";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_delta[] = "delta";
static const char __pyx_k_equal[] = "equal";
static const char __pyx_k_gamma[] = "gamma";
static const char __pyx_k_histo[] = "histo";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_m_inj[] = "m_inj";
static const char __pyx_k_nleft[] = "nleft";
static const char __pyx_k_nsave[] = "nsave";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_pulse[] = "pulse";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_tleft[] = "tleft";
static const char __pyx_k_twall[] = "twall";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_Q_fuel[] = "Q_fuel";
static const char __pyx_k_T_fuel[] = "T_fuel";
static const char __pyx_k_T_wall[] = "T_wall";
static const char __pyx_k_Volume[] = "Volume";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_arange[] = "arange";
static const char __pyx_k_dAreax[] = "dAreax";
static const char __pyx_k_extras[] = "extras";
static const char __pyx_k_h_film[] = "h_film";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_inicia[] = "inicia";
static const char __pyx_k_intake[] = "intake";
static const char __pyx_k_mass_C[] = "mass_C";
static const char __pyx_k_nright[] = "nright";
static const char __pyx_k_nvanes[] = "nvanes";
static const char __pyx_k_phi_ig[] = "phi_ig";
static const char __pyx_k_tright[] = "tright";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_Courant[] = "Courant";
static const char __pyx_k_a_wiebe[] = "a_wiebe";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_boolean[] = "boolean";
static const char __pyx_k_coef_cp[] = "coef_cp";
static const char __pyx_k_exhaust[] = "exhaust";
static const char __pyx_k_m_wiebe[] = "m_wiebe";
static const char __pyx_k_nappend[] = "nappend";
static const char __pyx_k_ncycles[] = "ncycles";
static const char __pyx_k_nstroke[] = "nstroke";
static const char __pyx_k_theta_0[] = "theta_0";
static const char __pyx_k_type_ig[] = "type_ig";
static const char __pyx_k_Cd_ports[] = "Cd_ports";
static const char __pyx_k_Cylinder[] = "Cylinder";
static const char __pyx_k_Junction[] = "Junction";
static const char __pyx_k_angle_V0[] = "angle_V0";
static const char __pyx_k_angle_VC[] = "angle_VC";
static const char __pyx_k_delta_ca[] = "delta_ca";
static const char __pyx_k_diameter[] = "diameter";
static const char __pyx_k_exh2tube[] = "exh2tube";
static const char __pyx_k_fuel_lib[] = "fuel_lib";
static const char __pyx_k_ig_order[] = "ig_order";
static const char __pyx_k_implicit[] = "implicit";
static const char __pyx_k_int2tube[] = "int2tube";
static const char __pyx_k_integral[] = "integral";
static const char __pyx_k_longitud[] = "longitud";
static const char __pyx_k_mass_vec[] = "mass_vec";
static const char __pyx_k_model_ht[] = "model_ht";
static const char __pyx_k_scavenge[] = "scavenge";
static const char __pyx_k_theta_id[] = "theta_id";
static const char __pyx_k_type_dat[] = "type_dat";
static const char __pyx_k_type_end[] = "type_end";
static const char __pyx_k_Area_wall[] = "Area_wall";
static const char __pyx_k_Cylinders[] = "Cylinders";
static const char __pyx_k_Junctions[] = "Junctions";
static const char __pyx_k_Simulator[] = "Simulator";
static const char __pyx_k_U_crevice[] = "U_crevice";
static const char __pyx_k_curvature[] = "curvature";
static const char __pyx_k_data_fuel[] = "data_fuel";
static const char __pyx_k_factor_ht[] = "factor_ht";
static const char __pyx_k_ga_intake[] = "ga_intake";
static const char __pyx_k_get_state[] = "get_state";
static const char __pyx_k_heat_flow[] = "heat_flow";
static const char __pyx_k_hvap_fuel[] = "hvap_fuel";
static const char __pyx_k_injection[] = "injection";
static const char __pyx_k_node2tube[] = "node2tube";
static const char __pyx_k_state_ini[] = "state_ini";
static const char __pyx_k_validator[] = "validator";
static const char __pyx_k_Atmosphere[] = "Atmosphere";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_combustion[] = "combustion";
static const char __pyx_k_dtheta_inj[] = "dtheta_inj";
static const char __pyx_k_dtheta_rpm[] = "dtheta_rpm";
static const char __pyx_k_ga_exhaust[] = "ga_exhaust";
static const char __pyx_k_iter_sim1d[] = "iter_sim1d";
static const char __pyx_k_modelo_jun[] = "modelo_jun";
static const char __pyx_k_myfunction[] = "myfunction";
static const char __pyx_k_nnod_input[] = "nnod_input";
static const char __pyx_k_onlyAssert[] = "onlyAssert";
static const char __pyx_k_rod_length[] = "rod_length";
static const char __pyx_k_start_comb[] = "start_comb";
static const char __pyx_k_theta_ig_0[] = "theta_ig_0";
static const char __pyx_k_Atmospheres[] = "Atmospheres";
static const char __pyx_k_atm_default[] = "atm_default";
static const char __pyx_k_cyl_default[] = "cyl_default";
static const char __pyx_k_dtheta_comb[] = "dtheta_comb";
static const char __pyx_k_engine_type[] = "engine_type";
static const char __pyx_k_filesin_spd[] = "filesin_spd";
static const char __pyx_k_folder_name[] = "folder_name";
static const char __pyx_k_mfdot_array[] = "mfdot_array";
static const char __pyx_k_piston_area[] = "piston_area";
static const char __pyx_k_testDefault[] = "testDefault";
static const char __pyx_k_valve_model[] = "valve_model";
static const char __pyx_k_xbdot_array[] = "xbdot_array";
static const char __pyx_k_crank_radius[] = "crank_radius";
static const char __pyx_k_data_crevice[] = "data_crevice";
static const char __pyx_k_filein_state[] = "filein_state";
static const char __pyx_k_filesave_spd[] = "filesave_spd";
static const char __pyx_k_junc_default[] = "junc_default";
static const char __pyx_k_major_radius[] = "major_radius";
static const char __pyx_k_minor_radius[] = "minor_radius";
static const char __pyx_k_tank_default[] = "tank_default";
static const char __pyx_k_tube_default[] = "tube_default";
static const char __pyx_k_validateSize[] = "validateSize";
static const char __pyx_k_viscous_flow[] = "viscous_flow";
static const char __pyx_k_Fuel_Cylinder[] = "Fuel-Cylinder";
static const char __pyx_k_Vol_clearance[] = "Vol_clearance";
static const char __pyx_k_chamber_heigh[] = "chamber_heigh";
static const char __pyx_k_full_implicit[] = "full_implicit";
static const char __pyx_k_intake_valves[] = "intake_valves";
static const char __pyx_k_scavenge_type[] = "scavenge_type";
static const char __pyx_k_species_model[] = "species_model";
static const char __pyx_k_theta_inj_ini[] = "theta_inj_ini";
static const char __pyx_k_Valve_Cylinder[] = "Valve-Cylinder";
static const char __pyx_k_assignOptional[] = "assignOptional";
static const char __pyx_k_exhaust_valves[] = "exhaust_valves";
static const char __pyx_k_filesave_state[] = "filesave_state";
static const char __pyx_k_tengo_scavenge[] = "tengo scavenge";
static const char __pyx_k_validateInList[] = "validateInList";
static const char __pyx_k_calc_engine_data[] = "calc_engine_data";
static const char __pyx_k_combustion_model[] = "combustion_model";
static const char __pyx_k_validatePositive[] = "validatePositive";
static const char __pyx_k_head_chamber_area[] = "head_chamber_area";
static const char __pyx_k_Injection_Cylinder[] = "Injection-Cylinder";
static const char __pyx_k_Combustion_Cylinder[] = "Combustion-Cylinder";
static const char __pyx_k_Entered_d_Must_be_d[] = "Entered %d - Must be %d";
static const char __pyx_k_ignition_delay_model[] = "ignition_delay_model";
static const char __pyx_k_use_global_gas_properties[] = "use_global_gas_properties";
static const char __pyx_k_Options_are_intake_or_exhaust[] = "Options are: intake or exhaust";
static const char __pyx_k_Fail_inicialitation_in_Cylinder[] = "Fail inicialitation in [Cylinder], some node to histo not exists";
static const char __pyx_k_Fail_inicialitation_in_Junction[] = "Fail inicialitation in [Junction], some node to histo not exists";
static const char __pyx_k_It_is_not_indicated_the_type_of[] = "It is not indicated the type of junction";
static const char __pyx_k_Chamber_numbering_must_be_consec[] = "Chamber numbering must be consecutive for the MRCVC engine";
static const char __pyx_k_Fail_inicialitation_in_Tank_some[] = "Fail inicialitation in [Tank], some node to histo not exists";
static const char __pyx_k_Fail_inicialitation_in_Tube_area[] = "Fail inicialitation in Tube, area and diameter not exists";
static const char __pyx_k_Fail_inicialitation_in_Tube_some[] = "Fail inicialitation in [Tube], some node to histo not exists";
static const char __pyx_k_Incorrect_number_of_chambers_for[] = "Incorrect number of chambers for the MRCVC engine";
static const char __pyx_k_It_is_not_indicated_the_type_of_2[] = "It is not indicated the type of tube";
static const char __pyx_k_It_is_not_indicated_the_type_of_3[] = "It is not indicated the type of tank";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_Area;
static PyObject *__pyx_n_s_Area_wall;
static PyObject *__pyx_n_s_Atmosphere;
static PyObject *__pyx_n_s_Atmospheres;
static PyObject *__pyx_n_s_Bore;
static PyObject *__pyx_n_s_Cd;
static PyObject *__pyx_n_s_Cd_ports;
static PyObject *__pyx_kp_s_Chamber_numbering_must_be_consec;
static PyObject *__pyx_kp_s_Combustion_Cylinder;
static PyObject *__pyx_n_s_Courant;
static PyObject *__pyx_n_s_Cylinder;
static PyObject *__pyx_n_s_Cylinders;
static PyObject *__pyx_n_s_Dv;
static PyObject *__pyx_kp_s_Entered_d_Must_be_d;
static PyObject *__pyx_kp_s_Fail_inicialitation_in_Cylinder;
static PyObject *__pyx_kp_s_Fail_inicialitation_in_Junction;
static PyObject *__pyx_kp_s_Fail_inicialitation_in_Tank_some;
static PyObject *__pyx_kp_s_Fail_inicialitation_in_Tube_area;
static PyObject *__pyx_kp_s_Fail_inicialitation_in_Tube_some;
static PyObject *__pyx_kp_s_Fuel_Cylinder;
static PyObject *__pyx_kp_s_Incorrect_number_of_chambers_for;
static PyObject *__pyx_kp_s_Injection_Cylinder;
static PyObject *__pyx_kp_s_It_is_not_indicated_the_type_of;
static PyObject *__pyx_kp_s_It_is_not_indicated_the_type_of_2;
static PyObject *__pyx_kp_s_It_is_not_indicated_the_type_of_3;
static PyObject *__pyx_n_s_Junction;
static PyObject *__pyx_n_s_Junctions;
static PyObject *__pyx_n_s_Lv;
static PyObject *__pyx_n_s_Lvmax;
static PyObject *__pyx_n_s_Mw;
static PyObject *__pyx_n_s_Nval;
static PyObject *__pyx_kp_s_Options_are_intake_or_exhaust;
static PyObject *__pyx_n_s_Q_fuel;
static PyObject *__pyx_n_s_R_gas;
static PyObject *__pyx_n_s_SRv;
static PyObject *__pyx_n_s_Simulator;
static PyObject *__pyx_n_s_T_fuel;
static PyObject *__pyx_n_s_T_wall;
static PyObject *__pyx_n_s_Tank;
static PyObject *__pyx_n_s_Tanks;
static PyObject *__pyx_n_s_Tube;
static PyObject *__pyx_n_s_Tubes;
static PyObject *__pyx_n_s_U_crevice;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s_Valve_Cylinder;
static PyObject *__pyx_n_s_Vol_clearance;
static PyObject *__pyx_n_s_Volume;
static PyObject *__pyx_n_s__2;
static PyObject *__pyx_n_s_a_wiebe;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_angle_V0;
static PyObject *__pyx_n_s_angle_VC;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_arange;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_assignOptional;
static PyObject *__pyx_n_s_atm_default;
static PyObject *__pyx_n_s_beta;
static PyObject *__pyx_n_s_boolean;
static PyObject *__pyx_n_s_calc_engine_data;
static PyObject *__pyx_n_s_chamber_heigh;
static PyObject *__pyx_n_s_coef_cp;
static PyObject *__pyx_n_s_combustion;
static PyObject *__pyx_n_s_combustion_model;
static PyObject *__pyx_n_s_crank_radius;
static PyObject *__pyx_n_s_curvature;
static PyObject *__pyx_n_s_cyl_default;
static PyObject *__pyx_n_s_dAreax;
static PyObject *__pyx_n_s_data_crevice;
static PyObject *__pyx_n_s_data_fuel;
static PyObject *__pyx_n_s_delta;
static PyObject *__pyx_n_s_delta_ca;
static PyObject *__pyx_n_s_diameter;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_dtheta_comb;
static PyObject *__pyx_n_s_dtheta_inj;
static PyObject *__pyx_n_s_dtheta_rpm;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_engine_type;
static PyObject *__pyx_n_s_equal;
static PyObject *__pyx_n_s_exh2tube;
static PyObject *__pyx_n_s_exhaust;
static PyObject *__pyx_n_s_exhaust_valves;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_extras;
static PyObject *__pyx_n_s_factor_ht;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_filein_state;
static PyObject *__pyx_n_s_filesave_spd;
static PyObject *__pyx_n_s_filesave_state;
static PyObject *__pyx_n_s_filesin_spd;
static PyObject *__pyx_n_s_folder_name;
static PyObject *__pyx_n_s_fuel;
static PyObject *__pyx_n_s_fuel_lib;
static PyObject *__pyx_n_s_full_implicit;
static PyObject *__pyx_n_s_ga;
static PyObject *__pyx_n_s_ga_exhaust;
static PyObject *__pyx_n_s_ga_intake;
static PyObject *__pyx_n_s_gamma;
static PyObject *__pyx_n_s_get_state;
static PyObject *__pyx_n_s_h_film;
static PyObject *__pyx_n_s_head_chamber_area;
static PyObject *__pyx_n_s_heat_flow;
static PyObject *__pyx_n_s_histo;
static PyObject *__pyx_n_s_hvap_fuel;
static PyObject *__pyx_n_s_icyl;
static PyObject *__pyx_n_s_ig_order;
static PyObject *__pyx_n_s_ignition_delay_model;
static PyObject *__pyx_n_s_implicit;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_indx;
static PyObject *__pyx_n_s_inicia;
static PyObject *__pyx_n_s_injection;
static PyObject *__pyx_n_s_int2tube;
static PyObject *__pyx_n_s_intake;
static PyObject *__pyx_n_s_intake_valves;
static PyObject *__pyx_n_s_integral;
static PyObject *__pyx_n_s_irpm;
static PyObject *__pyx_n_s_iter_sim1d;
static PyObject *__pyx_n_s_junc_default;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_longitud;
static PyObject *__pyx_n_s_m_inj;
static PyObject *__pyx_n_s_m_wiebe;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_major_radius;
static PyObject *__pyx_n_s_mass;
static PyObject *__pyx_n_s_mass_C;
static PyObject *__pyx_n_s_mass_vec;
static PyObject *__pyx_n_s_mfdot_array;
static PyObject *__pyx_n_s_minor_radius;
static PyObject *__pyx_n_s_mod;
static PyObject *__pyx_n_s_model_ht;
static PyObject *__pyx_n_s_modelo_jun;
static PyObject *__pyx_n_s_myfunction;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_nappend;
static PyObject *__pyx_n_s_ncycles;
static PyObject *__pyx_n_s_ndof;
static PyObject *__pyx_n_s_nleft;
static PyObject *__pyx_n_s_nnod;
static PyObject *__pyx_n_s_nnod_input;
static PyObject *__pyx_n_s_node2tube;
static PyObject *__pyx_n_s_none;
static PyObject *__pyx_n_s_nright;
static PyObject *__pyx_n_s_nsave;
static PyObject *__pyx_n_s_nstroke;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_nvanes;
static PyObject *__pyx_n_s_onlyAssert;
static PyObject *__pyx_n_s_phi;
static PyObject *__pyx_n_s_phi_ig;
static PyObject *__pyx_n_s_pi;
static PyObject *__pyx_n_s_piston_area;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_prop;
static PyObject *__pyx_n_s_pulse;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rod_length;
static PyObject *__pyx_n_s_rpms;
static PyObject *__pyx_n_s_scavenge;
static PyObject *__pyx_n_s_scavenge_type;
static PyObject *__pyx_n_s_sign;
static PyObject *__pyx_n_s_species_model;
static PyObject *__pyx_n_s_start_comb;
static PyObject *__pyx_n_s_state_ini;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_tank_default;
static PyObject *__pyx_kp_s_tengo_scavenge;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_testDefault;
static PyObject *__pyx_n_s_tf;
static PyObject *__pyx_n_s_theta_0;
static PyObject *__pyx_n_s_theta_id;
static PyObject *__pyx_n_s_theta_ig_0;
static PyObject *__pyx_n_s_theta_inj_ini;
static PyObject *__pyx_n_s_tleft;
static PyObject *__pyx_n_s_tright;
static PyObject *__pyx_n_s_tube;
static PyObject *__pyx_n_s_tube_default;
static PyObject *__pyx_n_s_twall;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_type_dat;
static PyObject *__pyx_n_s_type_end;
static PyObject *__pyx_n_s_type_ig;
static PyObject *__pyx_n_s_use_global_gas_properties;
static PyObject *__pyx_n_s_validateInList;
static PyObject *__pyx_n_s_validatePositive;
static PyObject *__pyx_n_s_validateSize;
static PyObject *__pyx_n_s_validator;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_valve_model;
static PyObject *__pyx_n_s_viscous_flow;
static PyObject *__pyx_n_s_xbdot_array;
static PyObject *__pyx_n_s_xnod;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_zeros;
static int __pyx_pf_12simCythonCPP_8Cylinder___cinit__(struct __pyx_obj_12simCythonCPP_Cylinder *__pyx_v_self, PyObject *__pyx_v_kargs); /* proto */
static void __pyx_pf_12simCythonCPP_8Cylinder_2__dealloc__(struct __pyx_obj_12simCythonCPP_Cylinder *__pyx_v_self); /* proto */
static int __pyx_pf_12simCythonCPP_8Junction___cinit__(struct __pyx_obj_12simCythonCPP_Junction *__pyx_v_self, PyObject *__pyx_v_kargs); /* proto */
static void __pyx_pf_12simCythonCPP_8Junction_2__dealloc__(struct __pyx_obj_12simCythonCPP_Junction *__pyx_v_self); /* proto */
static int __pyx_pf_12simCythonCPP_4Tube___cinit__(struct __pyx_obj_12simCythonCPP_Tube *__pyx_v_self, PyObject *__pyx_v_kargs); /* proto */
static void __pyx_pf_12simCythonCPP_4Tube_2__dealloc__(struct __pyx_obj_12simCythonCPP_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_12simCythonCPP_4Tank___cinit__(struct __pyx_obj_12simCythonCPP_Tank *__pyx_v_self, PyObject *__pyx_v_kargs); /* proto */
static void __pyx_pf_12simCythonCPP_4Tank_2__dealloc__(struct __pyx_obj_12simCythonCPP_Tank *__pyx_v_self); /* proto */
static int __pyx_pf_12simCythonCPP_10Atmosphere___cinit__(struct __pyx_obj_12simCythonCPP_Atmosphere *__pyx_v_self, PyObject *__pyx_v_kargs); /* proto */
static void __pyx_pf_12simCythonCPP_10Atmosphere_2__dealloc__(struct __pyx_obj_12simCythonCPP_Atmosphere *__pyx_v_self); /* proto */
static int __pyx_pf_12simCythonCPP_9Simulator___cinit__(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self, PyObject *__pyx_v_kargs); /* proto */
static PyObject *__pyx_pf_12simCythonCPP_9Simulator_2solver(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12simCythonCPP_9Simulator_4solve_step(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12simCythonCPP_9Simulator_6printData(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12simCythonCPP_9Simulator_8ActualizeGlobalState(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12simCythonCPP_9Simulator_10actualizeDt(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12simCythonCPP_9Simulator_12GetTimeStep(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12simCythonCPP_9Simulator_14SetTimeStep(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self, PyObject *__pyx_v_dT); /* proto */
static PyObject *__pyx_pf_12simCythonCPP_9Simulator_16SetTime(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self, PyObject *__pyx_v_t, PyObject *__pyx_v_irpm); /* proto */
static PyObject *__pyx_pf_12simCythonCPP_9Simulator_18GetNewState(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12simCythonCPP_9Simulator_20GetOldState(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12simCythonCPP_9Simulator_22SetState(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self, PyObject *__pyx_v_indx, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_12simCythonCPP_9Simulator_24GetCylinderMass(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self, PyObject *__pyx_v_icyl); /* proto */
static PyObject *__pyx_pf_12simCythonCPP_9Simulator_26SetCylinderMass(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self, PyObject *__pyx_v_icyl, PyObject *__pyx_v_mass_vec); /* proto */
static void __pyx_pf_12simCythonCPP_9Simulator_28__dealloc__(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_12simCythonCPP_Cylinder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12simCythonCPP_Junction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12simCythonCPP_Tube(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12simCythonCPP_Tank(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12simCythonCPP_Atmosphere(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12simCythonCPP_Simulator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, &__pyx_n_s_keys, 0, 0, 0};
static PyObject *__pyx_float_0_;
static PyObject *__pyx_float_2_;
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_2_0;
static PyObject *__pyx_float_8_0;
static PyObject *__pyx_float_1_36;
static PyObject *__pyx_float_1_64;
static PyObject *__pyx_float_16_0;
static PyObject *__pyx_float_18_0;
static PyObject *__pyx_float_2_25;
static PyObject *__pyx_float_6_02;
static PyObject *__pyx_float_0_001;
static PyObject *__pyx_float_1_008;
static PyObject *__pyx_float_12_01;
static PyObject *__pyx_float_14_01;
static PyObject *__pyx_float_286_9;
static PyObject *__pyx_float_114_23;
static PyObject *__pyx_float_44_3e6;
static PyObject *__pyx_float_3_14159;
static PyObject *__pyx_float_308000_0;
static PyObject *__pyx_float_1_0267eneg_08;
static PyObject *__pyx_float_9_1396eneg_02;
static PyObject *__pyx_float_neg_1_5575e_04;
static PyObject *__pyx_float_neg_2_7835eneg_01;
static PyObject *__pyx_float_neg_4_9209eneg_05;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;

/* "Cylinder.pyx":141
 * 	cdef c_Cylinder *thisptr
 * 
 * 	def __cinit__(self, **kargs):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nnod = validatePositive(kargs,'nnod','Cylinder')
 */

/* Python wrapper */
static int __pyx_pw_12simCythonCPP_8Cylinder_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_12simCythonCPP_8Cylinder_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kargs);
  __pyx_r = __pyx_pf_12simCythonCPP_8Cylinder___cinit__(((struct __pyx_obj_12simCythonCPP_Cylinder *)__pyx_v_self), __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_12simCythonCPP_8Cylinder___cinit__(struct __pyx_obj_12simCythonCPP_Cylinder *__pyx_v_self, PyObject *__pyx_v_kargs) {
  unsigned int __pyx_v_nnod;
  unsigned int __pyx_v_ndof;
  int __pyx_v_implicit;
  std::vector<double> __pyx_v_state_ini;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  std::vector<int> __pyx_v_histo;
  PyObject *__pyx_v_s = NULL;
  char *__pyx_v_label;
  PyObject *__pyx_v_vargs = NULL;
  Py_ssize_t __pyx_v_nintake;
  int __pyx_v_nvanes;
  double __pyx_v_major_radius;
  double __pyx_v_minor_radius;
  double __pyx_v_chamber_heigh;
  double __pyx_v_Bore;
  double __pyx_v_crank_radius;
  double __pyx_v_rod_length;
  double __pyx_v_Vol_clearance;
  double __pyx_v_head_chamber_area;
  double __pyx_v_piston_area;
  double __pyx_v_theta_0;
  double __pyx_v_delta_ca;
  std::vector<double> __pyx_v_twall;
  int __pyx_v_type_ig;
  int __pyx_v_full_implicit;
  std::vector<double> __pyx_v_prop;
  std::vector<double> __pyx_v_U_crevice;
  std::vector<double> __pyx_v_data_crevice;
  std::vector<double> __pyx_v_mass_C;
  int __pyx_v_model_ht;
  double __pyx_v_factor_ht;
  int __pyx_v_scavenge;
  int __pyx_v_scavenge_type;
  int __pyx_v_extras;
  int __pyx_v_species_model;
  Scavenge __pyx_v_scavenge_data;
  PyObject *__pyx_v_fargs = NULL;
  fuel __pyx_v_fuel_data;
  PyObject *__pyx_v_alpha = NULL;
  PyObject *__pyx_v_beta = NULL;
  PyObject *__pyx_v_gamma = NULL;
  PyObject *__pyx_v_delta = NULL;
  PyObject *__pyx_v_Afuel = NULL;
  PyObject *__pyx_v_Q_LHV = NULL;
  PyObject *__pyx_v_h_vap = NULL;
  PyObject *__pyx_v_c = NULL;
  std::vector<valve> __pyx_v_intake_valves;
  std::vector<valve> __pyx_v_exhaust_valves;
  valve __pyx_v_auxValve;
  PyObject *__pyx_v_ninput = NULL;
  unsigned int __pyx_v_nnod_input;
  injection __pyx_v_injection_data;
  PyObject *__pyx_v_iargs = NULL;
  PyObject *__pyx_v_mfdot = NULL;
  combustion __pyx_v_combustion_data;
  PyObject *__pyx_v_cargs = NULL;
  PyObject *__pyx_v_xbdot = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  unsigned int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  double __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  char *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *(*__pyx_t_20)(PyObject *);
  PyObject *(*__pyx_t_21)(PyObject *);
  std::vector<double> __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "Cylinder.pyx":143
 * 	def __cinit__(self, **kargs):
 * 
 * 		cdef unsigned int nnod = validatePositive(kargs,'nnod','Cylinder')             # <<<<<<<<<<<<<<
 * 		cdef unsigned int ndof = validatePositive(kargs,'ndof','Cylinder')
 * 		kargs['implicit']      = assignOptional(kargs,'implicit',1)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_nnod, __pyx_n_s_Cylinder};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_nnod, __pyx_n_s_Cylinder};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_nnod);
    __Pyx_GIVEREF(__pyx_n_s_nnod);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_nnod);
    __Pyx_INCREF(__pyx_n_s_Cylinder);
    __Pyx_GIVEREF(__pyx_n_s_Cylinder);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Cylinder);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nnod = __pyx_t_6;

  /* "Cylinder.pyx":144
 * 
 * 		cdef unsigned int nnod = validatePositive(kargs,'nnod','Cylinder')
 * 		cdef unsigned int ndof = validatePositive(kargs,'ndof','Cylinder')             # <<<<<<<<<<<<<<
 * 		kargs['implicit']      = assignOptional(kargs,'implicit',1)
 * 		cdef int implicit      = boolean(kargs,'implicit','Cylinder')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_ndof, __pyx_n_s_Cylinder};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_ndof, __pyx_n_s_Cylinder};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_ndof);
    __Pyx_GIVEREF(__pyx_n_s_ndof);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_ndof);
    __Pyx_INCREF(__pyx_n_s_Cylinder);
    __Pyx_GIVEREF(__pyx_n_s_Cylinder);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Cylinder);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ndof = __pyx_t_6;

  /* "Cylinder.pyx":145
 * 		cdef unsigned int nnod = validatePositive(kargs,'nnod','Cylinder')
 * 		cdef unsigned int ndof = validatePositive(kargs,'ndof','Cylinder')
 * 		kargs['implicit']      = assignOptional(kargs,'implicit',1)             # <<<<<<<<<<<<<<
 * 		cdef int implicit      = boolean(kargs,'implicit','Cylinder')
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_implicit);
    __Pyx_GIVEREF(__pyx_n_s_implicit);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_implicit);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_int_1);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_kargs, __pyx_n_s_implicit, __pyx_t_1) < 0)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cylinder.pyx":146
 * 		cdef unsigned int ndof = validatePositive(kargs,'ndof','Cylinder')
 * 		kargs['implicit']      = assignOptional(kargs,'implicit',1)
 * 		cdef int implicit      = boolean(kargs,'implicit','Cylinder')             # <<<<<<<<<<<<<<
 * 
 * 		# By the time, we use a 1-zone model for the cylinder, so the
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_boolean); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_n_s_Cylinder};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_n_s_Cylinder};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_implicit);
    __Pyx_GIVEREF(__pyx_n_s_implicit);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_implicit);
    __Pyx_INCREF(__pyx_n_s_Cylinder);
    __Pyx_GIVEREF(__pyx_n_s_Cylinder);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Cylinder);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_implicit = __pyx_t_4;

  /* "Cylinder.pyx":161
 * 		# 3+len(kargs['intake_valves'])+len(kargs['exhaust_valves']))
 * 
 * 		onlyAssert(kargs,'state_ini','Cylinder')             # <<<<<<<<<<<<<<
 * 		cdef doublevec state_ini = doublevec_factory(0)
 * 		for i in range(nnod):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_state_ini, __pyx_n_s_Cylinder};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_state_ini, __pyx_n_s_Cylinder};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_state_ini);
    __Pyx_GIVEREF(__pyx_n_s_state_ini);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_state_ini);
    __Pyx_INCREF(__pyx_n_s_Cylinder);
    __Pyx_GIVEREF(__pyx_n_s_Cylinder);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Cylinder);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cylinder.pyx":162
 * 
 * 		onlyAssert(kargs,'state_ini','Cylinder')
 * 		cdef doublevec state_ini = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(nnod):
 * 			for j in range(ndof):
 */
  __pyx_v_state_ini = std::vector<double>(0);

  /* "Cylinder.pyx":163
 * 		onlyAssert(kargs,'state_ini','Cylinder')
 * 		cdef doublevec state_ini = doublevec_factory(0)
 * 		for i in range(nnod):             # <<<<<<<<<<<<<<
 * 			for j in range(ndof):
 * 				state_ini.push_back(kargs['state_ini'][i][j])
 */
  __pyx_t_6 = __pyx_v_nnod;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "Cylinder.pyx":164
 * 		cdef doublevec state_ini = doublevec_factory(0)
 * 		for i in range(nnod):
 * 			for j in range(ndof):             # <<<<<<<<<<<<<<
 * 				state_ini.push_back(kargs['state_ini'][i][j])
 * 
 */
    __pyx_t_8 = __pyx_v_ndof;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_j = __pyx_t_9;

      /* "Cylinder.pyx":165
 * 		for i in range(nnod):
 * 			for j in range(ndof):
 * 				state_ini.push_back(kargs['state_ini'][i][j])             # <<<<<<<<<<<<<<
 * 
 * 		onlyAssert(kargs,'histo','Cylinder')
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_state_ini); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_state_ini.push_back(__pyx_t_10);
    }
  }

  /* "Cylinder.pyx":167
 * 				state_ini.push_back(kargs['state_ini'][i][j])
 * 
 * 		onlyAssert(kargs,'histo','Cylinder')             # <<<<<<<<<<<<<<
 * 		cdef intvec histo = intvec_factory(0)
 * 		print kargs['histo'], range(nnod)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_histo, __pyx_n_s_Cylinder};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_histo, __pyx_n_s_Cylinder};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_histo);
    __Pyx_GIVEREF(__pyx_n_s_histo);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_histo);
    __Pyx_INCREF(__pyx_n_s_Cylinder);
    __Pyx_GIVEREF(__pyx_n_s_Cylinder);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Cylinder);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cylinder.pyx":168
 * 
 * 		onlyAssert(kargs,'histo','Cylinder')
 * 		cdef intvec histo = intvec_factory(0)             # <<<<<<<<<<<<<<
 * 		print kargs['histo'], range(nnod)
 * 		for i in range(len(kargs['histo'])):
 */
  __pyx_v_histo = std::vector<int>(0);

  /* "Cylinder.pyx":169
 * 		onlyAssert(kargs,'histo','Cylinder')
 * 		cdef intvec histo = intvec_factory(0)
 * 		print kargs['histo'], range(nnod)             # <<<<<<<<<<<<<<
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_histo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nnod); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "Cylinder.pyx":170
 * 		cdef intvec histo = intvec_factory(0)
 * 		print kargs['histo'], range(nnod)
 * 		for i in range(len(kargs['histo'])):             # <<<<<<<<<<<<<<
 * 			if(kargs['histo'][i] in range(nnod)):
 * 				histo.push_back(kargs['histo'][i])
 */
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_histo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_7; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "Cylinder.pyx":171
 * 		print kargs['histo'], range(nnod)
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):             # <<<<<<<<<<<<<<
 * 				histo.push_back(kargs['histo'][i])
 * 			else:
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_histo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nnod); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_12 = (__pyx_t_11 != 0);
    if (__pyx_t_12) {

      /* "Cylinder.pyx":172
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):
 * 				histo.push_back(kargs['histo'][i])             # <<<<<<<<<<<<<<
 * 			else:
 * 				print 'Fail inicialitation in [Cylinder], some node to histo not exists'
 */
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_histo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_histo.push_back(__pyx_t_4);

      /* "Cylinder.pyx":171
 * 		print kargs['histo'], range(nnod)
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):             # <<<<<<<<<<<<<<
 * 				histo.push_back(kargs['histo'][i])
 * 			else:
 */
      goto __pyx_L9;
    }

    /* "Cylinder.pyx":174
 * 				histo.push_back(kargs['histo'][i])
 * 			else:
 * 				print 'Fail inicialitation in [Cylinder], some node to histo not exists'             # <<<<<<<<<<<<<<
 * 				sys.exit()
 * 		s = assignOptional(kargs,'label','cyl_default')
 */
    /*else*/ {
      if (__Pyx_PrintOne(0, __pyx_kp_s_Fail_inicialitation_in_Cylinder) < 0) __PYX_ERR(0, 174, __pyx_L1_error)

      /* "Cylinder.pyx":175
 * 			else:
 * 				print 'Fail inicialitation in [Cylinder], some node to histo not exists'
 * 				sys.exit()             # <<<<<<<<<<<<<<
 * 		s = assignOptional(kargs,'label','cyl_default')
 * 		cdef char* label = s
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L9:;
  }

  /* "Cylinder.pyx":176
 * 				print 'Fail inicialitation in [Cylinder], some node to histo not exists'
 * 				sys.exit()
 * 		s = assignOptional(kargs,'label','cyl_default')             # <<<<<<<<<<<<<<
 * 		cdef char* label = s
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_label, __pyx_n_s_cyl_default};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_label, __pyx_n_s_cyl_default};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_label);
    __Pyx_GIVEREF(__pyx_n_s_label);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_label);
    __Pyx_INCREF(__pyx_n_s_cyl_default);
    __Pyx_GIVEREF(__pyx_n_s_cyl_default);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_cyl_default);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_s = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "Cylinder.pyx":177
 * 				sys.exit()
 * 		s = assignOptional(kargs,'label','cyl_default')
 * 		cdef char* label = s             # <<<<<<<<<<<<<<
 * 
 * 		vargs = kargs['intake_valves']
 */
  __pyx_t_13 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 177, __pyx_L1_error)
  __pyx_v_label = __pyx_t_13;

  /* "Cylinder.pyx":179
 * 		cdef char* label = s
 * 
 * 		vargs = kargs['intake_valves']             # <<<<<<<<<<<<<<
 * 		nintake = len(vargs)
 * 		vargs = vargs + kargs['exhaust_valves']
 */
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_intake_valves); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_vargs = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "Cylinder.pyx":180
 * 
 * 		vargs = kargs['intake_valves']
 * 		nintake = len(vargs)             # <<<<<<<<<<<<<<
 * 		vargs = vargs + kargs['exhaust_valves']
 * 
 */
  __pyx_t_7 = PyObject_Length(__pyx_v_vargs); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __pyx_v_nintake = __pyx_t_7;

  /* "Cylinder.pyx":181
 * 		vargs = kargs['intake_valves']
 * 		nintake = len(vargs)
 * 		vargs = vargs + kargs['exhaust_valves']             # <<<<<<<<<<<<<<
 * 
 * 		cdef int nvanes=0
 */
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_exhaust_valves); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Add(__pyx_v_vargs, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_vargs, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "Cylinder.pyx":183
 * 		vargs = vargs + kargs['exhaust_valves']
 * 
 * 		cdef int nvanes=0             # <<<<<<<<<<<<<<
 * 		cdef double major_radius=0.,minor_radius=0.,chamber_heigh=0.
 * 		cdef double Bore=0.,crank_radius=0.,rod_length=0.,
 */
  __pyx_v_nvanes = 0;

  /* "Cylinder.pyx":184
 * 
 * 		cdef int nvanes=0
 * 		cdef double major_radius=0.,minor_radius=0.,chamber_heigh=0.             # <<<<<<<<<<<<<<
 * 		cdef double Bore=0.,crank_radius=0.,rod_length=0.,
 * 		cdef double Vol_clearance=0.,head_chamber_area=0.,piston_area=0.
 */
  __pyx_v_major_radius = 0.;
  __pyx_v_minor_radius = 0.;
  __pyx_v_chamber_heigh = 0.;

  /* "Cylinder.pyx":185
 * 		cdef int nvanes=0
 * 		cdef double major_radius=0.,minor_radius=0.,chamber_heigh=0.
 * 		cdef double Bore=0.,crank_radius=0.,rod_length=0.,             # <<<<<<<<<<<<<<
 * 		cdef double Vol_clearance=0.,head_chamber_area=0.,piston_area=0.
 * 		if(kargs['engine_type']==2):
 */
  __pyx_v_Bore = 0.;
  __pyx_v_crank_radius = 0.;
  __pyx_v_rod_length = 0.;

  /* "Cylinder.pyx":186
 * 		cdef double major_radius=0.,minor_radius=0.,chamber_heigh=0.
 * 		cdef double Bore=0.,crank_radius=0.,rod_length=0.,
 * 		cdef double Vol_clearance=0.,head_chamber_area=0.,piston_area=0.             # <<<<<<<<<<<<<<
 * 		if(kargs['engine_type']==2):
 * 			nvanes        = validatePositive(kargs,'nvanes','Cylinder')
 */
  __pyx_v_Vol_clearance = 0.;
  __pyx_v_head_chamber_area = 0.;
  __pyx_v_piston_area = 0.;

  /* "Cylinder.pyx":187
 * 		cdef double Bore=0.,crank_radius=0.,rod_length=0.,
 * 		cdef double Vol_clearance=0.,head_chamber_area=0.,piston_area=0.
 * 		if(kargs['engine_type']==2):             # <<<<<<<<<<<<<<
 * 			nvanes        = validatePositive(kargs,'nvanes','Cylinder')
 * 			major_radius  = validatePositive(kargs,'major_radius','Cylinder')
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_engine_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_12) {

    /* "Cylinder.pyx":188
 * 		cdef double Vol_clearance=0.,head_chamber_area=0.,piston_area=0.
 * 		if(kargs['engine_type']==2):
 * 			nvanes        = validatePositive(kargs,'nvanes','Cylinder')             # <<<<<<<<<<<<<<
 * 			major_radius  = validatePositive(kargs,'major_radius','Cylinder')
 * 			minor_radius  = validatePositive(kargs,'minor_radius','Cylinder')
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_nvanes, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_nvanes, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_nvanes);
      __Pyx_GIVEREF(__pyx_n_s_nvanes);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_nvanes);
      __Pyx_INCREF(__pyx_n_s_Cylinder);
      __Pyx_GIVEREF(__pyx_n_s_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Cylinder);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_nvanes = __pyx_t_4;

    /* "Cylinder.pyx":189
 * 		if(kargs['engine_type']==2):
 * 			nvanes        = validatePositive(kargs,'nvanes','Cylinder')
 * 			major_radius  = validatePositive(kargs,'major_radius','Cylinder')             # <<<<<<<<<<<<<<
 * 			minor_radius  = validatePositive(kargs,'minor_radius','Cylinder')
 * 			chamber_heigh = validatePositive(kargs,'chamber_heigh','Cylinder')
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_major_radius, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_major_radius, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_major_radius);
      __Pyx_GIVEREF(__pyx_n_s_major_radius);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_major_radius);
      __Pyx_INCREF(__pyx_n_s_Cylinder);
      __Pyx_GIVEREF(__pyx_n_s_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Cylinder);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_major_radius = __pyx_t_10;

    /* "Cylinder.pyx":190
 * 			nvanes        = validatePositive(kargs,'nvanes','Cylinder')
 * 			major_radius  = validatePositive(kargs,'major_radius','Cylinder')
 * 			minor_radius  = validatePositive(kargs,'minor_radius','Cylinder')             # <<<<<<<<<<<<<<
 * 			chamber_heigh = validatePositive(kargs,'chamber_heigh','Cylinder')
 * 		else:
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_minor_radius, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_minor_radius, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 190, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_minor_radius);
      __Pyx_GIVEREF(__pyx_n_s_minor_radius);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_minor_radius);
      __Pyx_INCREF(__pyx_n_s_Cylinder);
      __Pyx_GIVEREF(__pyx_n_s_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Cylinder);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_minor_radius = __pyx_t_10;

    /* "Cylinder.pyx":191
 * 			major_radius  = validatePositive(kargs,'major_radius','Cylinder')
 * 			minor_radius  = validatePositive(kargs,'minor_radius','Cylinder')
 * 			chamber_heigh = validatePositive(kargs,'chamber_heigh','Cylinder')             # <<<<<<<<<<<<<<
 * 		else:
 * 			Bore              = validatePositive(kargs,'Bore','Cylinder')
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_chamber_heigh, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_chamber_heigh, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_chamber_heigh);
      __Pyx_GIVEREF(__pyx_n_s_chamber_heigh);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_chamber_heigh);
      __Pyx_INCREF(__pyx_n_s_Cylinder);
      __Pyx_GIVEREF(__pyx_n_s_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Cylinder);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_chamber_heigh = __pyx_t_10;

    /* "Cylinder.pyx":187
 * 		cdef double Bore=0.,crank_radius=0.,rod_length=0.,
 * 		cdef double Vol_clearance=0.,head_chamber_area=0.,piston_area=0.
 * 		if(kargs['engine_type']==2):             # <<<<<<<<<<<<<<
 * 			nvanes        = validatePositive(kargs,'nvanes','Cylinder')
 * 			major_radius  = validatePositive(kargs,'major_radius','Cylinder')
 */
    goto __pyx_L10;
  }

  /* "Cylinder.pyx":193
 * 			chamber_heigh = validatePositive(kargs,'chamber_heigh','Cylinder')
 * 		else:
 * 			Bore              = validatePositive(kargs,'Bore','Cylinder')             # <<<<<<<<<<<<<<
 * 			crank_radius      = validatePositive(kargs,'crank_radius','Cylinder')
 * 			Vol_clearance     = validatePositive(kargs,'Vol_clearance','Cylinder')
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_Bore, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_Bore, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_Bore);
      __Pyx_GIVEREF(__pyx_n_s_Bore);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_Bore);
      __Pyx_INCREF(__pyx_n_s_Cylinder);
      __Pyx_GIVEREF(__pyx_n_s_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Cylinder);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_Bore = __pyx_t_10;

    /* "Cylinder.pyx":194
 * 		else:
 * 			Bore              = validatePositive(kargs,'Bore','Cylinder')
 * 			crank_radius      = validatePositive(kargs,'crank_radius','Cylinder')             # <<<<<<<<<<<<<<
 * 			Vol_clearance     = validatePositive(kargs,'Vol_clearance','Cylinder')
 * 			rod_length        = validatePositive(kargs,'rod_length','Cylinder')
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_crank_radius, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_crank_radius, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_crank_radius);
      __Pyx_GIVEREF(__pyx_n_s_crank_radius);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_crank_radius);
      __Pyx_INCREF(__pyx_n_s_Cylinder);
      __Pyx_GIVEREF(__pyx_n_s_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Cylinder);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_crank_radius = __pyx_t_10;

    /* "Cylinder.pyx":195
 * 			Bore              = validatePositive(kargs,'Bore','Cylinder')
 * 			crank_radius      = validatePositive(kargs,'crank_radius','Cylinder')
 * 			Vol_clearance     = validatePositive(kargs,'Vol_clearance','Cylinder')             # <<<<<<<<<<<<<<
 * 			rod_length        = validatePositive(kargs,'rod_length','Cylinder')
 * 			head_chamber_area = validatePositive(kargs,'head_chamber_area','Cylinder')
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_Vol_clearance, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_Vol_clearance, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_Vol_clearance);
      __Pyx_GIVEREF(__pyx_n_s_Vol_clearance);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_Vol_clearance);
      __Pyx_INCREF(__pyx_n_s_Cylinder);
      __Pyx_GIVEREF(__pyx_n_s_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Cylinder);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_Vol_clearance = __pyx_t_10;

    /* "Cylinder.pyx":196
 * 			crank_radius      = validatePositive(kargs,'crank_radius','Cylinder')
 * 			Vol_clearance     = validatePositive(kargs,'Vol_clearance','Cylinder')
 * 			rod_length        = validatePositive(kargs,'rod_length','Cylinder')             # <<<<<<<<<<<<<<
 * 			head_chamber_area = validatePositive(kargs,'head_chamber_area','Cylinder')
 * 			piston_area       = validatePositive(kargs,'piston_area','Cylinder',(3.1416*Bore**2)/4)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_rod_length, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_rod_length, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 196, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_rod_length);
      __Pyx_GIVEREF(__pyx_n_s_rod_length);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_rod_length);
      __Pyx_INCREF(__pyx_n_s_Cylinder);
      __Pyx_GIVEREF(__pyx_n_s_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Cylinder);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_rod_length = __pyx_t_10;

    /* "Cylinder.pyx":197
 * 			Vol_clearance     = validatePositive(kargs,'Vol_clearance','Cylinder')
 * 			rod_length        = validatePositive(kargs,'rod_length','Cylinder')
 * 			head_chamber_area = validatePositive(kargs,'head_chamber_area','Cylinder')             # <<<<<<<<<<<<<<
 * 			piston_area       = validatePositive(kargs,'piston_area','Cylinder',(3.1416*Bore**2)/4)
 * 		# ver calculo de theta_0 !!!!!!!!!!!!
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_head_chamber_area, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_head_chamber_area, __pyx_n_s_Cylinder};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_head_chamber_area);
      __Pyx_GIVEREF(__pyx_n_s_head_chamber_area);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_head_chamber_area);
      __Pyx_INCREF(__pyx_n_s_Cylinder);
      __Pyx_GIVEREF(__pyx_n_s_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Cylinder);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_head_chamber_area = __pyx_t_10;

    /* "Cylinder.pyx":198
 * 			rod_length        = validatePositive(kargs,'rod_length','Cylinder')
 * 			head_chamber_area = validatePositive(kargs,'head_chamber_area','Cylinder')
 * 			piston_area       = validatePositive(kargs,'piston_area','Cylinder',(3.1416*Bore**2)/4)             # <<<<<<<<<<<<<<
 * 		# ver calculo de theta_0 !!!!!!!!!!!!
 * 		cdef double theta_0 	      = kargs['theta_0']
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyFloat_FromDouble(((3.1416 * pow(__pyx_v_Bore, 2.0)) / 4.0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_piston_area, __pyx_n_s_Cylinder, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_piston_area, __pyx_n_s_Cylinder, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_14 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_piston_area);
      __Pyx_GIVEREF(__pyx_n_s_piston_area);
      PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_4, __pyx_n_s_piston_area);
      __Pyx_INCREF(__pyx_n_s_Cylinder);
      __Pyx_GIVEREF(__pyx_n_s_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_4, __pyx_n_s_Cylinder);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_14, 3+__pyx_t_4, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_piston_area = __pyx_t_10;
  }
  __pyx_L10:;

  /* "Cylinder.pyx":200
 * 			piston_area       = validatePositive(kargs,'piston_area','Cylinder',(3.1416*Bore**2)/4)
 * 		# ver calculo de theta_0 !!!!!!!!!!!!
 * 		cdef double theta_0 	      = kargs['theta_0']             # <<<<<<<<<<<<<<
 * 		cdef double delta_ca	      = assignOptional(kargs,'delta_ca',0)
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_theta_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_theta_0 = __pyx_t_10;

  /* "Cylinder.pyx":201
 * 		# ver calculo de theta_0 !!!!!!!!!!!!
 * 		cdef double theta_0 	      = kargs['theta_0']
 * 		cdef double delta_ca	      = assignOptional(kargs,'delta_ca',0)             # <<<<<<<<<<<<<<
 * 
 * 		onlyAssert(kargs,'twall','Cylinder')
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_14 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_v_kargs, __pyx_n_s_delta_ca, __pyx_int_0};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_v_kargs, __pyx_n_s_delta_ca, __pyx_int_0};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_14) {
      __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_14); __pyx_t_14 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_delta_ca);
    __Pyx_GIVEREF(__pyx_n_s_delta_ca);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_delta_ca);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_int_0);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_delta_ca = __pyx_t_10;

  /* "Cylinder.pyx":203
 * 		cdef double delta_ca	      = assignOptional(kargs,'delta_ca',0)
 * 
 * 		onlyAssert(kargs,'twall','Cylinder')             # <<<<<<<<<<<<<<
 * 		cdef doublevec twall = doublevec_factory(0)
 * 		for i in range(len(kargs['twall'])):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_twall, __pyx_n_s_Cylinder};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_twall, __pyx_n_s_Cylinder};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_twall);
    __Pyx_GIVEREF(__pyx_n_s_twall);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_4, __pyx_n_s_twall);
    __Pyx_INCREF(__pyx_n_s_Cylinder);
    __Pyx_GIVEREF(__pyx_n_s_Cylinder);
    PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_4, __pyx_n_s_Cylinder);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Cylinder.pyx":204
 * 
 * 		onlyAssert(kargs,'twall','Cylinder')
 * 		cdef doublevec twall = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(len(kargs['twall'])):
 * 			twall.push_back(kargs['twall'][i])
 */
  __pyx_v_twall = std::vector<double>(0);

  /* "Cylinder.pyx":205
 * 		onlyAssert(kargs,'twall','Cylinder')
 * 		cdef doublevec twall = doublevec_factory(0)
 * 		for i in range(len(kargs['twall'])):             # <<<<<<<<<<<<<<
 * 			twall.push_back(kargs['twall'][i])
 * 		#cdef double twall = validatePositive(kargs,'twall','Cylinder')
 */
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_twall); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_7; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "Cylinder.pyx":206
 * 		cdef doublevec twall = doublevec_factory(0)
 * 		for i in range(len(kargs['twall'])):
 * 			twall.push_back(kargs['twall'][i])             # <<<<<<<<<<<<<<
 * 		#cdef double twall = validatePositive(kargs,'twall','Cylinder')
 * 
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_twall); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_twall.push_back(__pyx_t_10);
  }

  /* "Cylinder.pyx":209
 * 		#cdef double twall = validatePositive(kargs,'twall','Cylinder')
 * 
 * 		cdef int type_ig       = assignOptional(kargs,'type_ig',0)             # <<<<<<<<<<<<<<
 * 		cdef int full_implicit = boolean(kargs,'full_implicit','Cylinder',1)
 * 		cdef doublevec prop    = doublevec_factory(0)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_v_kargs, __pyx_n_s_type_ig, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_v_kargs, __pyx_n_s_type_ig, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_14) {
      __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_14); __pyx_t_14 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_type_ig);
    __Pyx_GIVEREF(__pyx_n_s_type_ig);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_type_ig);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_int_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_type_ig = __pyx_t_4;

  /* "Cylinder.pyx":210
 * 
 * 		cdef int type_ig       = assignOptional(kargs,'type_ig',0)
 * 		cdef int full_implicit = boolean(kargs,'full_implicit','Cylinder',1)             # <<<<<<<<<<<<<<
 * 		cdef doublevec prop    = doublevec_factory(0)
 * 		#onlyAssert(kargs,'prop','Cylinder')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_boolean); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_full_implicit, __pyx_n_s_Cylinder, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_full_implicit, __pyx_n_s_Cylinder, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_full_implicit);
    __Pyx_GIVEREF(__pyx_n_s_full_implicit);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_4, __pyx_n_s_full_implicit);
    __Pyx_INCREF(__pyx_n_s_Cylinder);
    __Pyx_GIVEREF(__pyx_n_s_Cylinder);
    PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_4, __pyx_n_s_Cylinder);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_14, 3+__pyx_t_4, __pyx_int_1);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_full_implicit = __pyx_t_4;

  /* "Cylinder.pyx":211
 * 		cdef int type_ig       = assignOptional(kargs,'type_ig',0)
 * 		cdef int full_implicit = boolean(kargs,'full_implicit','Cylinder',1)
 * 		cdef doublevec prop    = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		#onlyAssert(kargs,'prop','Cylinder')
 * 		kargs['prop'] = assignOptional(kargs,'prop',[1])
 */
  __pyx_v_prop = std::vector<double>(0);

  /* "Cylinder.pyx":213
 * 		cdef doublevec prop    = doublevec_factory(0)
 * 		#onlyAssert(kargs,'prop','Cylinder')
 * 		kargs['prop'] = assignOptional(kargs,'prop',[1])             # <<<<<<<<<<<<<<
 * 		for i in range(len(kargs['prop'])):
 * 			prop.push_back(kargs['prop'][i])
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = PyList_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_14, 0, __pyx_int_1);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_prop, __pyx_t_14};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_prop, __pyx_t_14};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_prop);
    __Pyx_GIVEREF(__pyx_n_s_prop);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_prop);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_t_14);
    __pyx_t_14 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_kargs, __pyx_n_s_prop, __pyx_t_1) < 0)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cylinder.pyx":214
 * 		#onlyAssert(kargs,'prop','Cylinder')
 * 		kargs['prop'] = assignOptional(kargs,'prop',[1])
 * 		for i in range(len(kargs['prop'])):             # <<<<<<<<<<<<<<
 * 			prop.push_back(kargs['prop'][i])
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_prop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_7; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "Cylinder.pyx":215
 * 		kargs['prop'] = assignOptional(kargs,'prop',[1])
 * 		for i in range(len(kargs['prop'])):
 * 			prop.push_back(kargs['prop'][i])             # <<<<<<<<<<<<<<
 * 
 * 		cdef doublevec U_crevice = doublevec_factory(0)
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_prop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_prop.push_back(__pyx_t_10);
  }

  /* "Cylinder.pyx":217
 * 			prop.push_back(kargs['prop'][i])
 * 
 * 		cdef doublevec U_crevice = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		#onlyAssert(kargs,'U_crevice','Cylinder')
 * 		kargs['U_crevice'] = assignOptional(kargs,'U_crevice',[1])
 */
  __pyx_v_U_crevice = std::vector<double>(0);

  /* "Cylinder.pyx":219
 * 		cdef doublevec U_crevice = doublevec_factory(0)
 * 		#onlyAssert(kargs,'U_crevice','Cylinder')
 * 		kargs['U_crevice'] = assignOptional(kargs,'U_crevice',[1])             # <<<<<<<<<<<<<<
 * 		for i in range(len(kargs['U_crevice'])):
 * 			U_crevice.push_back(kargs['U_crevice'][i])
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_int_1);
  __pyx_t_14 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_v_kargs, __pyx_n_s_U_crevice, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_v_kargs, __pyx_n_s_U_crevice, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_14) {
      __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_14); __pyx_t_14 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_U_crevice);
    __Pyx_GIVEREF(__pyx_n_s_U_crevice);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_U_crevice);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_kargs, __pyx_n_s_U_crevice, __pyx_t_2) < 0)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Cylinder.pyx":220
 * 		#onlyAssert(kargs,'U_crevice','Cylinder')
 * 		kargs['U_crevice'] = assignOptional(kargs,'U_crevice',[1])
 * 		for i in range(len(kargs['U_crevice'])):             # <<<<<<<<<<<<<<
 * 			U_crevice.push_back(kargs['U_crevice'][i])
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_U_crevice); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_7; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "Cylinder.pyx":221
 * 		kargs['U_crevice'] = assignOptional(kargs,'U_crevice',[1])
 * 		for i in range(len(kargs['U_crevice'])):
 * 			U_crevice.push_back(kargs['U_crevice'][i])             # <<<<<<<<<<<<<<
 * 
 * 		cdef doublevec data_crevice = doublevec_factory(0)
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_U_crevice); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_U_crevice.push_back(__pyx_t_10);
  }

  /* "Cylinder.pyx":223
 * 			U_crevice.push_back(kargs['U_crevice'][i])
 * 
 * 		cdef doublevec data_crevice = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		#onlyAssert(kargs,'data_crevice','Cylinder')
 * 		kargs['data_crevice'] = assignOptional(kargs,'data_crevice',[1])
 */
  __pyx_v_data_crevice = std::vector<double>(0);

  /* "Cylinder.pyx":225
 * 		cdef doublevec data_crevice = doublevec_factory(0)
 * 		#onlyAssert(kargs,'data_crevice','Cylinder')
 * 		kargs['data_crevice'] = assignOptional(kargs,'data_crevice',[1])             # <<<<<<<<<<<<<<
 * 		for i in range(len(kargs['data_crevice'])):
 * 			data_crevice.push_back(kargs['data_crevice'][i])
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_int_1);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_data_crevice, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_data_crevice, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_data_crevice);
    __Pyx_GIVEREF(__pyx_n_s_data_crevice);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_4, __pyx_n_s_data_crevice);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_4, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_kargs, __pyx_n_s_data_crevice, __pyx_t_1) < 0)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cylinder.pyx":226
 * 		#onlyAssert(kargs,'data_crevice','Cylinder')
 * 		kargs['data_crevice'] = assignOptional(kargs,'data_crevice',[1])
 * 		for i in range(len(kargs['data_crevice'])):             # <<<<<<<<<<<<<<
 * 			data_crevice.push_back(kargs['data_crevice'][i])
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_data_crevice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_7; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "Cylinder.pyx":227
 * 		kargs['data_crevice'] = assignOptional(kargs,'data_crevice',[1])
 * 		for i in range(len(kargs['data_crevice'])):
 * 			data_crevice.push_back(kargs['data_crevice'][i])             # <<<<<<<<<<<<<<
 * 
 * 		cdef doublevec mass_C = doublevec_factory(0)
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_data_crevice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_data_crevice.push_back(__pyx_t_10);
  }

  /* "Cylinder.pyx":229
 * 			data_crevice.push_back(kargs['data_crevice'][i])
 * 
 * 		cdef doublevec mass_C = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		validateSize(kargs,'mass_C','Cylinder',6*(nnod-len(vargs)))
 * 		onlyAssert(kargs,'mass_C','Cylinder')
 */
  __pyx_v_mass_C = std::vector<double>(0);

  /* "Cylinder.pyx":230
 * 
 * 		cdef doublevec mass_C = doublevec_factory(0)
 * 		validateSize(kargs,'mass_C','Cylinder',6*(nnod-len(vargs)))             # <<<<<<<<<<<<<<
 * 		onlyAssert(kargs,'mass_C','Cylinder')
 * 		for i in range(len(kargs['mass_C'])):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyObject_Length(__pyx_v_vargs); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __pyx_t_14 = PyInt_FromSsize_t((6 * (__pyx_v_nnod - __pyx_t_7))); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_mass_C, __pyx_n_s_Cylinder, __pyx_t_14};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_mass_C, __pyx_n_s_Cylinder, __pyx_t_14};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_mass_C);
    __Pyx_GIVEREF(__pyx_n_s_mass_C);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_mass_C);
    __Pyx_INCREF(__pyx_n_s_Cylinder);
    __Pyx_GIVEREF(__pyx_n_s_Cylinder);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Cylinder);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_t_14);
    __pyx_t_14 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Cylinder.pyx":231
 * 		cdef doublevec mass_C = doublevec_factory(0)
 * 		validateSize(kargs,'mass_C','Cylinder',6*(nnod-len(vargs)))
 * 		onlyAssert(kargs,'mass_C','Cylinder')             # <<<<<<<<<<<<<<
 * 		for i in range(len(kargs['mass_C'])):
 * 			mass_C.push_back(kargs['mass_C'][i])
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_mass_C, __pyx_n_s_Cylinder};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_mass_C, __pyx_n_s_Cylinder};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_mass_C);
    __Pyx_GIVEREF(__pyx_n_s_mass_C);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_4, __pyx_n_s_mass_C);
    __Pyx_INCREF(__pyx_n_s_Cylinder);
    __Pyx_GIVEREF(__pyx_n_s_Cylinder);
    PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_4, __pyx_n_s_Cylinder);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Cylinder.pyx":232
 * 		validateSize(kargs,'mass_C','Cylinder',6*(nnod-len(vargs)))
 * 		onlyAssert(kargs,'mass_C','Cylinder')
 * 		for i in range(len(kargs['mass_C'])):             # <<<<<<<<<<<<<<
 * 			mass_C.push_back(kargs['mass_C'][i])
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_mass_C); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_7; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "Cylinder.pyx":233
 * 		onlyAssert(kargs,'mass_C','Cylinder')
 * 		for i in range(len(kargs['mass_C'])):
 * 			mass_C.push_back(kargs['mass_C'][i])             # <<<<<<<<<<<<<<
 * 
 * 		cdef int model_ht      = assignOptional(kargs,'model_ht',0)
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_mass_C); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_mass_C.push_back(__pyx_t_10);
  }

  /* "Cylinder.pyx":235
 * 			mass_C.push_back(kargs['mass_C'][i])
 * 
 * 		cdef int model_ht      = assignOptional(kargs,'model_ht',0)             # <<<<<<<<<<<<<<
 * 		cdef double factor_ht  = assignOptional(kargs,'factor_ht',1.0)
 * 		cdef int scavenge      = assignOptional(kargs,'scavenge',0)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_v_kargs, __pyx_n_s_model_ht, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_v_kargs, __pyx_n_s_model_ht, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_14) {
      __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14); __pyx_t_14 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_model_ht);
    __Pyx_GIVEREF(__pyx_n_s_model_ht);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_model_ht);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_int_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_model_ht = __pyx_t_4;

  /* "Cylinder.pyx":236
 * 
 * 		cdef int model_ht      = assignOptional(kargs,'model_ht',0)
 * 		cdef double factor_ht  = assignOptional(kargs,'factor_ht',1.0)             # <<<<<<<<<<<<<<
 * 		cdef int scavenge      = assignOptional(kargs,'scavenge',0)
 * 		cdef int scavenge_type = assignOptional(kargs,'scavenge_type',0) # uniflow
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_factor_ht, __pyx_float_1_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_factor_ht, __pyx_float_1_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_factor_ht);
    __Pyx_GIVEREF(__pyx_n_s_factor_ht);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_4, __pyx_n_s_factor_ht);
    __Pyx_INCREF(__pyx_float_1_0);
    __Pyx_GIVEREF(__pyx_float_1_0);
    PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_4, __pyx_float_1_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_factor_ht = __pyx_t_10;

  /* "Cylinder.pyx":237
 * 		cdef int model_ht      = assignOptional(kargs,'model_ht',0)
 * 		cdef double factor_ht  = assignOptional(kargs,'factor_ht',1.0)
 * 		cdef int scavenge      = assignOptional(kargs,'scavenge',0)             # <<<<<<<<<<<<<<
 * 		cdef int scavenge_type = assignOptional(kargs,'scavenge_type',0) # uniflow
 * 		cdef int extras	       = boolean(kargs,'extras','Cylinder',0)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_v_kargs, __pyx_n_s_scavenge, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_v_kargs, __pyx_n_s_scavenge, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_14) {
      __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14); __pyx_t_14 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_scavenge);
    __Pyx_GIVEREF(__pyx_n_s_scavenge);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_scavenge);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_int_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_scavenge = __pyx_t_4;

  /* "Cylinder.pyx":238
 * 		cdef double factor_ht  = assignOptional(kargs,'factor_ht',1.0)
 * 		cdef int scavenge      = assignOptional(kargs,'scavenge',0)
 * 		cdef int scavenge_type = assignOptional(kargs,'scavenge_type',0) # uniflow             # <<<<<<<<<<<<<<
 * 		cdef int extras	       = boolean(kargs,'extras','Cylinder',0)
 * 		cdef int species_model = assignOptional(kargs,'species_model',0)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_scavenge_type, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_scavenge_type, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_scavenge_type);
    __Pyx_GIVEREF(__pyx_n_s_scavenge_type);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_4, __pyx_n_s_scavenge_type);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_4, __pyx_int_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_scavenge_type = __pyx_t_4;

  /* "Cylinder.pyx":239
 * 		cdef int scavenge      = assignOptional(kargs,'scavenge',0)
 * 		cdef int scavenge_type = assignOptional(kargs,'scavenge_type',0) # uniflow
 * 		cdef int extras	       = boolean(kargs,'extras','Cylinder',0)             # <<<<<<<<<<<<<<
 * 		cdef int species_model = assignOptional(kargs,'species_model',0)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_boolean); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_14, __pyx_v_kargs, __pyx_n_s_extras, __pyx_n_s_Cylinder, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_14, __pyx_v_kargs, __pyx_n_s_extras, __pyx_n_s_Cylinder, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_14) {
      __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14); __pyx_t_14 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_extras);
    __Pyx_GIVEREF(__pyx_n_s_extras);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_extras);
    __Pyx_INCREF(__pyx_n_s_Cylinder);
    __Pyx_GIVEREF(__pyx_n_s_Cylinder);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Cylinder);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_int_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_extras = __pyx_t_4;

  /* "Cylinder.pyx":240
 * 		cdef int scavenge_type = assignOptional(kargs,'scavenge_type',0) # uniflow
 * 		cdef int extras	       = boolean(kargs,'extras','Cylinder',0)
 * 		cdef int species_model = assignOptional(kargs,'species_model',0)             # <<<<<<<<<<<<<<
 * 
 *     	#condiciones para scavenge
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_species_model, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_species_model, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_species_model);
    __Pyx_GIVEREF(__pyx_n_s_species_model);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_4, __pyx_n_s_species_model);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_4, __pyx_int_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_species_model = __pyx_t_4;

  /* "Cylinder.pyx":244
 *     	#condiciones para scavenge
 * 		cdef Scavenge scavenge_data
 * 		if not(kargs['scavenge']==0):             # <<<<<<<<<<<<<<
 * 			print "tengo scavenge"
 * 			if(kargs['scavenge_type']==1): # scre
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_scavenge); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = ((!__pyx_t_12) != 0);
  if (__pyx_t_11) {

    /* "Cylinder.pyx":245
 * 		cdef Scavenge scavenge_data
 * 		if not(kargs['scavenge']==0):
 * 			print "tengo scavenge"             # <<<<<<<<<<<<<<
 * 			if(kargs['scavenge_type']==1): # scre
 * 				scavenge_data.val_1 = -1.6709
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_tengo_scavenge) < 0) __PYX_ERR(0, 245, __pyx_L1_error)

    /* "Cylinder.pyx":246
 * 		if not(kargs['scavenge']==0):
 * 			print "tengo scavenge"
 * 			if(kargs['scavenge_type']==1): # scre             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_1 = -1.6709
 * 				scavenge_data.val_2 = 0.1899
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_scavenge_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_11) {

      /* "Cylinder.pyx":247
 * 			print "tengo scavenge"
 * 			if(kargs['scavenge_type']==1): # scre
 * 				scavenge_data.val_1 = -1.6709             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_2 = 0.1899
 * 			elif kargs['scavenge_type']==2: # yam1
 */
      __pyx_v_scavenge_data.val_1 = -1.6709;

      /* "Cylinder.pyx":248
 * 			if(kargs['scavenge_type']==1): # scre
 * 				scavenge_data.val_1 = -1.6709
 * 				scavenge_data.val_2 = 0.1899             # <<<<<<<<<<<<<<
 * 			elif kargs['scavenge_type']==2: # yam1
 * 				scavenge_data.val_1 = -1.6993
 */
      __pyx_v_scavenge_data.val_2 = 0.1899;

      /* "Cylinder.pyx":246
 * 		if not(kargs['scavenge']==0):
 * 			print "tengo scavenge"
 * 			if(kargs['scavenge_type']==1): # scre             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_1 = -1.6709
 * 				scavenge_data.val_2 = 0.1899
 */
      goto __pyx_L22;
    }

    /* "Cylinder.pyx":249
 * 				scavenge_data.val_1 = -1.6709
 * 				scavenge_data.val_2 = 0.1899
 * 			elif kargs['scavenge_type']==2: # yam1             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_1 = -1.6993
 * 				scavenge_data.val_2 = 0.3053
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_scavenge_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_11) {

      /* "Cylinder.pyx":250
 * 				scavenge_data.val_2 = 0.1899
 * 			elif kargs['scavenge_type']==2: # yam1
 * 				scavenge_data.val_1 = -1.6993             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_2 = 0.3053
 * 			elif kargs['scavenge_type']==3: # yam6
 */
      __pyx_v_scavenge_data.val_1 = -1.6993;

      /* "Cylinder.pyx":251
 * 			elif kargs['scavenge_type']==2: # yam1
 * 				scavenge_data.val_1 = -1.6993
 * 				scavenge_data.val_2 = 0.3053             # <<<<<<<<<<<<<<
 * 			elif kargs['scavenge_type']==3: # yam6
 * 				scavenge_data.val_1 = -1.3516
 */
      __pyx_v_scavenge_data.val_2 = 0.3053;

      /* "Cylinder.pyx":249
 * 				scavenge_data.val_1 = -1.6709
 * 				scavenge_data.val_2 = 0.1899
 * 			elif kargs['scavenge_type']==2: # yam1             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_1 = -1.6993
 * 				scavenge_data.val_2 = 0.3053
 */
      goto __pyx_L22;
    }

    /* "Cylinder.pyx":252
 * 				scavenge_data.val_1 = -1.6993
 * 				scavenge_data.val_2 = 0.3053
 * 			elif kargs['scavenge_type']==3: # yam6             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_1 = -1.3516
 * 				scavenge_data.val_2 = 0.1435
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_scavenge_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_11) {

      /* "Cylinder.pyx":253
 * 				scavenge_data.val_2 = 0.3053
 * 			elif kargs['scavenge_type']==3: # yam6
 * 				scavenge_data.val_1 = -1.3516             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_2 = 0.1435
 * 			elif kargs['scavenge_type']==4: # cd
 */
      __pyx_v_scavenge_data.val_1 = -1.3516;

      /* "Cylinder.pyx":254
 * 			elif kargs['scavenge_type']==3: # yam6
 * 				scavenge_data.val_1 = -1.3516
 * 				scavenge_data.val_2 = 0.1435             # <<<<<<<<<<<<<<
 * 			elif kargs['scavenge_type']==4: # cd
 * 				scavenge_data.val_1 = -1.0104
 */
      __pyx_v_scavenge_data.val_2 = 0.1435;

      /* "Cylinder.pyx":252
 * 				scavenge_data.val_1 = -1.6993
 * 				scavenge_data.val_2 = 0.3053
 * 			elif kargs['scavenge_type']==3: # yam6             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_1 = -1.3516
 * 				scavenge_data.val_2 = 0.1435
 */
      goto __pyx_L22;
    }

    /* "Cylinder.pyx":255
 * 				scavenge_data.val_1 = -1.3516
 * 				scavenge_data.val_2 = 0.1435
 * 			elif kargs['scavenge_type']==4: # cd             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_1 = -1.0104
 * 				scavenge_data.val_2 = -0.117
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_scavenge_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_11) {

      /* "Cylinder.pyx":256
 * 				scavenge_data.val_2 = 0.1435
 * 			elif kargs['scavenge_type']==4: # cd
 * 				scavenge_data.val_1 = -1.0104             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_2 = -0.117
 * 			elif kargs['scavenge_type']==5: # qubcr
 */
      __pyx_v_scavenge_data.val_1 = -1.0104;

      /* "Cylinder.pyx":257
 * 			elif kargs['scavenge_type']==4: # cd
 * 				scavenge_data.val_1 = -1.0104
 * 				scavenge_data.val_2 = -0.117             # <<<<<<<<<<<<<<
 * 			elif kargs['scavenge_type']==5: # qubcr
 * 				scavenge_data.val_1 = -1.6325
 */
      __pyx_v_scavenge_data.val_2 = -0.117;

      /* "Cylinder.pyx":255
 * 				scavenge_data.val_1 = -1.3516
 * 				scavenge_data.val_2 = 0.1435
 * 			elif kargs['scavenge_type']==4: # cd             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_1 = -1.0104
 * 				scavenge_data.val_2 = -0.117
 */
      goto __pyx_L22;
    }

    /* "Cylinder.pyx":258
 * 				scavenge_data.val_1 = -1.0104
 * 				scavenge_data.val_2 = -0.117
 * 			elif kargs['scavenge_type']==5: # qubcr             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_1 = -1.6325
 * 				scavenge_data.val_2 = 0.1397
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_scavenge_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_5, 5, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_11) {

      /* "Cylinder.pyx":259
 * 				scavenge_data.val_2 = -0.117
 * 			elif kargs['scavenge_type']==5: # qubcr
 * 				scavenge_data.val_1 = -1.6325             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_2 = 0.1397
 * 			else :	# uniflow
 */
      __pyx_v_scavenge_data.val_1 = -1.6325;

      /* "Cylinder.pyx":260
 * 			elif kargs['scavenge_type']==5: # qubcr
 * 				scavenge_data.val_1 = -1.6325
 * 				scavenge_data.val_2 = 0.1397             # <<<<<<<<<<<<<<
 * 			else :	# uniflow
 * 				scavenge_data.val_1 = -1.7827
 */
      __pyx_v_scavenge_data.val_2 = 0.1397;

      /* "Cylinder.pyx":258
 * 				scavenge_data.val_1 = -1.0104
 * 				scavenge_data.val_2 = -0.117
 * 			elif kargs['scavenge_type']==5: # qubcr             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_1 = -1.6325
 * 				scavenge_data.val_2 = 0.1397
 */
      goto __pyx_L22;
    }

    /* "Cylinder.pyx":262
 * 				scavenge_data.val_2 = 0.1397
 * 			else :	# uniflow
 * 				scavenge_data.val_1 = -1.7827             # <<<<<<<<<<<<<<
 * 				scavenge_data.val_2 = 0.2094
 * 		else:
 */
    /*else*/ {
      __pyx_v_scavenge_data.val_1 = -1.7827;

      /* "Cylinder.pyx":263
 * 			else :	# uniflow
 * 				scavenge_data.val_1 = -1.7827
 * 				scavenge_data.val_2 = 0.2094             # <<<<<<<<<<<<<<
 * 		else:
 * 			scavenge_data.val_1 = 0
 */
      __pyx_v_scavenge_data.val_2 = 0.2094;
    }
    __pyx_L22:;

    /* "Cylinder.pyx":244
 *     	#condiciones para scavenge
 * 		cdef Scavenge scavenge_data
 * 		if not(kargs['scavenge']==0):             # <<<<<<<<<<<<<<
 * 			print "tengo scavenge"
 * 			if(kargs['scavenge_type']==1): # scre
 */
    goto __pyx_L21;
  }

  /* "Cylinder.pyx":265
 * 				scavenge_data.val_2 = 0.2094
 * 		else:
 * 			scavenge_data.val_1 = 0             # <<<<<<<<<<<<<<
 * 			scavenge_data.val_2 = 0
 * 		scavenge_data.SRv = validatePositive(kargs,'SRv','Cylinder',0)
 */
  /*else*/ {
    __pyx_v_scavenge_data.val_1 = 0.0;

    /* "Cylinder.pyx":266
 * 		else:
 * 			scavenge_data.val_1 = 0
 * 			scavenge_data.val_2 = 0             # <<<<<<<<<<<<<<
 * 		scavenge_data.SRv = validatePositive(kargs,'SRv','Cylinder',0)
 * 		scavenge_data.close_cyl = 0
 */
    __pyx_v_scavenge_data.val_2 = 0.0;
  }
  __pyx_L21:;

  /* "Cylinder.pyx":267
 * 			scavenge_data.val_1 = 0
 * 			scavenge_data.val_2 = 0
 * 		scavenge_data.SRv = validatePositive(kargs,'SRv','Cylinder',0)             # <<<<<<<<<<<<<<
 * 		scavenge_data.close_cyl = 0
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_14, __pyx_v_kargs, __pyx_n_s_SRv, __pyx_n_s_Cylinder, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_14, __pyx_v_kargs, __pyx_n_s_SRv, __pyx_n_s_Cylinder, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_14) {
      __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14); __pyx_t_14 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_SRv);
    __Pyx_GIVEREF(__pyx_n_s_SRv);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_SRv);
    __Pyx_INCREF(__pyx_n_s_Cylinder);
    __Pyx_GIVEREF(__pyx_n_s_Cylinder);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Cylinder);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_int_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_scavenge_data.SRv = __pyx_t_10;

  /* "Cylinder.pyx":268
 * 			scavenge_data.val_2 = 0
 * 		scavenge_data.SRv = validatePositive(kargs,'SRv','Cylinder',0)
 * 		scavenge_data.close_cyl = 0             # <<<<<<<<<<<<<<
 * 
 * 		#condiciones para fuel
 */
  __pyx_v_scavenge_data.close_cyl = 0;

  /* "Cylinder.pyx":271
 * 
 * 		#condiciones para fuel
 * 		fargs = kargs['fuel']             # <<<<<<<<<<<<<<
 * 		cdef fuel fuel_data
 * 		fuel_data.coef_cp = doublevec_factory(0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_fuel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fargs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "Cylinder.pyx":273
 * 		fargs = kargs['fuel']
 * 		cdef fuel fuel_data
 * 		fuel_data.coef_cp = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		if not('name' in fargs.keys()):
 * 			# if the name of fuel is not specified, the user can
 */
  __pyx_v_fuel_data.coef_cp = std::vector<double>(0);

  /* "Cylinder.pyx":274
 * 		cdef fuel fuel_data
 * 		fuel_data.coef_cp = doublevec_factory(0)
 * 		if not('name' in fargs.keys()):             # <<<<<<<<<<<<<<
 * 			# if the name of fuel is not specified, the user can
 * 			# define the fuel properties.
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fargs, __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_name, __pyx_t_1, Py_NE)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = (__pyx_t_11 != 0);
  if (__pyx_t_12) {

    /* "Cylinder.pyx":278
 * 			# define the fuel properties.
 * 			# The default fuel is iso-octane
 * 			fuel_data.Q_fuel = validatePositive(fargs,'Q_fuel','Fuel-Cylinder',44.3e6)             # <<<<<<<<<<<<<<
 * 			fuel_data.alpha	 = validatePositive(fargs,'alpha','Fuel-Cylinder',8.0)
 * 			fuel_data.beta	 = validatePositive(fargs,'beta','Fuel-Cylinder',18.0)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_fargs, __pyx_n_s_Q_fuel, __pyx_kp_s_Fuel_Cylinder, __pyx_float_44_3e6};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_fargs, __pyx_n_s_Q_fuel, __pyx_kp_s_Fuel_Cylinder, __pyx_float_44_3e6};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_14 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_fargs);
      __Pyx_GIVEREF(__pyx_v_fargs);
      PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_4, __pyx_v_fargs);
      __Pyx_INCREF(__pyx_n_s_Q_fuel);
      __Pyx_GIVEREF(__pyx_n_s_Q_fuel);
      PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_4, __pyx_n_s_Q_fuel);
      __Pyx_INCREF(__pyx_kp_s_Fuel_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Fuel_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_4, __pyx_kp_s_Fuel_Cylinder);
      __Pyx_INCREF(__pyx_float_44_3e6);
      __Pyx_GIVEREF(__pyx_float_44_3e6);
      PyTuple_SET_ITEM(__pyx_t_14, 3+__pyx_t_4, __pyx_float_44_3e6);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_fuel_data.Q_fuel = __pyx_t_10;

    /* "Cylinder.pyx":279
 * 			# The default fuel is iso-octane
 * 			fuel_data.Q_fuel = validatePositive(fargs,'Q_fuel','Fuel-Cylinder',44.3e6)
 * 			fuel_data.alpha	 = validatePositive(fargs,'alpha','Fuel-Cylinder',8.0)             # <<<<<<<<<<<<<<
 * 			fuel_data.beta	 = validatePositive(fargs,'beta','Fuel-Cylinder',18.0)
 * 			fuel_data.gamma	 = validatePositive(fargs,'gamma','Fuel-Cylinder',0.0)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[5] = {__pyx_t_14, __pyx_v_fargs, __pyx_n_s_alpha, __pyx_kp_s_Fuel_Cylinder, __pyx_float_8_0};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[5] = {__pyx_t_14, __pyx_v_fargs, __pyx_n_s_alpha, __pyx_kp_s_Fuel_Cylinder, __pyx_float_8_0};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 279, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_14) {
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14); __pyx_t_14 = NULL;
      }
      __Pyx_INCREF(__pyx_v_fargs);
      __Pyx_GIVEREF(__pyx_v_fargs);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_fargs);
      __Pyx_INCREF(__pyx_n_s_alpha);
      __Pyx_GIVEREF(__pyx_n_s_alpha);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_alpha);
      __Pyx_INCREF(__pyx_kp_s_Fuel_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Fuel_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_kp_s_Fuel_Cylinder);
      __Pyx_INCREF(__pyx_float_8_0);
      __Pyx_GIVEREF(__pyx_float_8_0);
      PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_float_8_0);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_fuel_data.alpha = __pyx_t_10;

    /* "Cylinder.pyx":280
 * 			fuel_data.Q_fuel = validatePositive(fargs,'Q_fuel','Fuel-Cylinder',44.3e6)
 * 			fuel_data.alpha	 = validatePositive(fargs,'alpha','Fuel-Cylinder',8.0)
 * 			fuel_data.beta	 = validatePositive(fargs,'beta','Fuel-Cylinder',18.0)             # <<<<<<<<<<<<<<
 * 			fuel_data.gamma	 = validatePositive(fargs,'gamma','Fuel-Cylinder',0.0)
 * 			fuel_data.delta	 = validatePositive(fargs,'delta','Fuel-Cylinder',0.0)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_fargs, __pyx_n_s_beta, __pyx_kp_s_Fuel_Cylinder, __pyx_float_18_0};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_fargs, __pyx_n_s_beta, __pyx_kp_s_Fuel_Cylinder, __pyx_float_18_0};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_14 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_fargs);
      __Pyx_GIVEREF(__pyx_v_fargs);
      PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_4, __pyx_v_fargs);
      __Pyx_INCREF(__pyx_n_s_beta);
      __Pyx_GIVEREF(__pyx_n_s_beta);
      PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_4, __pyx_n_s_beta);
      __Pyx_INCREF(__pyx_kp_s_Fuel_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Fuel_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_4, __pyx_kp_s_Fuel_Cylinder);
      __Pyx_INCREF(__pyx_float_18_0);
      __Pyx_GIVEREF(__pyx_float_18_0);
      PyTuple_SET_ITEM(__pyx_t_14, 3+__pyx_t_4, __pyx_float_18_0);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_fuel_data.beta = __pyx_t_10;

    /* "Cylinder.pyx":281
 * 			fuel_data.alpha	 = validatePositive(fargs,'alpha','Fuel-Cylinder',8.0)
 * 			fuel_data.beta	 = validatePositive(fargs,'beta','Fuel-Cylinder',18.0)
 * 			fuel_data.gamma	 = validatePositive(fargs,'gamma','Fuel-Cylinder',0.0)             # <<<<<<<<<<<<<<
 * 			fuel_data.delta	 = validatePositive(fargs,'delta','Fuel-Cylinder',0.0)
 * 			if not('alpha' in fargs.keys() or 'beta' in fargs.keys()):
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[5] = {__pyx_t_14, __pyx_v_fargs, __pyx_n_s_gamma, __pyx_kp_s_Fuel_Cylinder, __pyx_float_0_0};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[5] = {__pyx_t_14, __pyx_v_fargs, __pyx_n_s_gamma, __pyx_kp_s_Fuel_Cylinder, __pyx_float_0_0};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 281, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_14) {
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14); __pyx_t_14 = NULL;
      }
      __Pyx_INCREF(__pyx_v_fargs);
      __Pyx_GIVEREF(__pyx_v_fargs);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_fargs);
      __Pyx_INCREF(__pyx_n_s_gamma);
      __Pyx_GIVEREF(__pyx_n_s_gamma);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_gamma);
      __Pyx_INCREF(__pyx_kp_s_Fuel_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Fuel_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_kp_s_Fuel_Cylinder);
      __Pyx_INCREF(__pyx_float_0_0);
      __Pyx_GIVEREF(__pyx_float_0_0);
      PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_float_0_0);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_fuel_data.gamma = __pyx_t_10;

    /* "Cylinder.pyx":282
 * 			fuel_data.beta	 = validatePositive(fargs,'beta','Fuel-Cylinder',18.0)
 * 			fuel_data.gamma	 = validatePositive(fargs,'gamma','Fuel-Cylinder',0.0)
 * 			fuel_data.delta	 = validatePositive(fargs,'delta','Fuel-Cylinder',0.0)             # <<<<<<<<<<<<<<
 * 			if not('alpha' in fargs.keys() or 'beta' in fargs.keys()):
 * 				fuel_data.Mw = validatePositive(fargs,'Mw','Fuel-Cylinder',114.23)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_fargs, __pyx_n_s_delta, __pyx_kp_s_Fuel_Cylinder, __pyx_float_0_0};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_fargs, __pyx_n_s_delta, __pyx_kp_s_Fuel_Cylinder, __pyx_float_0_0};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_14 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_fargs);
      __Pyx_GIVEREF(__pyx_v_fargs);
      PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_4, __pyx_v_fargs);
      __Pyx_INCREF(__pyx_n_s_delta);
      __Pyx_GIVEREF(__pyx_n_s_delta);
      PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_4, __pyx_n_s_delta);
      __Pyx_INCREF(__pyx_kp_s_Fuel_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Fuel_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_4, __pyx_kp_s_Fuel_Cylinder);
      __Pyx_INCREF(__pyx_float_0_0);
      __Pyx_GIVEREF(__pyx_float_0_0);
      PyTuple_SET_ITEM(__pyx_t_14, 3+__pyx_t_4, __pyx_float_0_0);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_fuel_data.delta = __pyx_t_10;

    /* "Cylinder.pyx":283
 * 			fuel_data.gamma	 = validatePositive(fargs,'gamma','Fuel-Cylinder',0.0)
 * 			fuel_data.delta	 = validatePositive(fargs,'delta','Fuel-Cylinder',0.0)
 * 			if not('alpha' in fargs.keys() or 'beta' in fargs.keys()):             # <<<<<<<<<<<<<<
 * 				fuel_data.Mw = validatePositive(fargs,'Mw','Fuel-Cylinder',114.23)
 * 				fuel_data.y  = validatePositive(fargs,'y','Fuel-Cylinder',2.25)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fargs, __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_14) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_alpha, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_15 = (__pyx_t_11 != 0);
    if (!__pyx_t_15) {
    } else {
      __pyx_t_12 = __pyx_t_15;
      goto __pyx_L25_bool_binop_done;
    }
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fargs, __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_14) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_15 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_beta, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = (__pyx_t_15 != 0);
    __pyx_t_12 = __pyx_t_11;
    __pyx_L25_bool_binop_done:;
    __pyx_t_11 = ((!__pyx_t_12) != 0);
    if (__pyx_t_11) {

      /* "Cylinder.pyx":284
 * 			fuel_data.delta	 = validatePositive(fargs,'delta','Fuel-Cylinder',0.0)
 * 			if not('alpha' in fargs.keys() or 'beta' in fargs.keys()):
 * 				fuel_data.Mw = validatePositive(fargs,'Mw','Fuel-Cylinder',114.23)             # <<<<<<<<<<<<<<
 * 				fuel_data.y  = validatePositive(fargs,'y','Fuel-Cylinder',2.25)
 * 			else:
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_14 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[5] = {__pyx_t_14, __pyx_v_fargs, __pyx_n_s_Mw, __pyx_kp_s_Fuel_Cylinder, __pyx_float_114_23};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[5] = {__pyx_t_14, __pyx_v_fargs, __pyx_n_s_Mw, __pyx_kp_s_Fuel_Cylinder, __pyx_float_114_23};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__pyx_t_14) {
          __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14); __pyx_t_14 = NULL;
        }
        __Pyx_INCREF(__pyx_v_fargs);
        __Pyx_GIVEREF(__pyx_v_fargs);
        PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_fargs);
        __Pyx_INCREF(__pyx_n_s_Mw);
        __Pyx_GIVEREF(__pyx_n_s_Mw);
        PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_Mw);
        __Pyx_INCREF(__pyx_kp_s_Fuel_Cylinder);
        __Pyx_GIVEREF(__pyx_kp_s_Fuel_Cylinder);
        PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_kp_s_Fuel_Cylinder);
        __Pyx_INCREF(__pyx_float_114_23);
        __Pyx_GIVEREF(__pyx_float_114_23);
        PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_float_114_23);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_fuel_data.Mw = __pyx_t_10;

      /* "Cylinder.pyx":285
 * 			if not('alpha' in fargs.keys() or 'beta' in fargs.keys()):
 * 				fuel_data.Mw = validatePositive(fargs,'Mw','Fuel-Cylinder',114.23)
 * 				fuel_data.y  = validatePositive(fargs,'y','Fuel-Cylinder',2.25)             # <<<<<<<<<<<<<<
 * 			else:
 * 				alpha, beta, gamma, delta = 0., 0., 0., 0
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_fargs, __pyx_n_s_y, __pyx_kp_s_Fuel_Cylinder, __pyx_float_2_25};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_fargs, __pyx_n_s_y, __pyx_kp_s_Fuel_Cylinder, __pyx_float_2_25};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_14 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_INCREF(__pyx_v_fargs);
        __Pyx_GIVEREF(__pyx_v_fargs);
        PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_4, __pyx_v_fargs);
        __Pyx_INCREF(__pyx_n_s_y);
        __Pyx_GIVEREF(__pyx_n_s_y);
        PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_4, __pyx_n_s_y);
        __Pyx_INCREF(__pyx_kp_s_Fuel_Cylinder);
        __Pyx_GIVEREF(__pyx_kp_s_Fuel_Cylinder);
        PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_4, __pyx_kp_s_Fuel_Cylinder);
        __Pyx_INCREF(__pyx_float_2_25);
        __Pyx_GIVEREF(__pyx_float_2_25);
        PyTuple_SET_ITEM(__pyx_t_14, 3+__pyx_t_4, __pyx_float_2_25);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_fuel_data.y = __pyx_t_10;

      /* "Cylinder.pyx":283
 * 			fuel_data.gamma	 = validatePositive(fargs,'gamma','Fuel-Cylinder',0.0)
 * 			fuel_data.delta	 = validatePositive(fargs,'delta','Fuel-Cylinder',0.0)
 * 			if not('alpha' in fargs.keys() or 'beta' in fargs.keys()):             # <<<<<<<<<<<<<<
 * 				fuel_data.Mw = validatePositive(fargs,'Mw','Fuel-Cylinder',114.23)
 * 				fuel_data.y  = validatePositive(fargs,'y','Fuel-Cylinder',2.25)
 */
      goto __pyx_L24;
    }

    /* "Cylinder.pyx":287
 * 				fuel_data.y  = validatePositive(fargs,'y','Fuel-Cylinder',2.25)
 * 			else:
 * 				alpha, beta, gamma, delta = 0., 0., 0., 0             # <<<<<<<<<<<<<<
 * 				if 'alpha' in fargs.keys():
 * 					alpha = fargs['alpha']
 */
    /*else*/ {
      __pyx_t_1 = __pyx_float_0_;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_2 = __pyx_float_0_;
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_14 = __pyx_float_0_;
      __Pyx_INCREF(__pyx_t_14);
      __pyx_t_5 = __pyx_int_0;
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_alpha = __pyx_t_1;
      __pyx_t_1 = 0;
      __pyx_v_beta = __pyx_t_2;
      __pyx_t_2 = 0;
      __pyx_v_gamma = __pyx_t_14;
      __pyx_t_14 = 0;
      __pyx_v_delta = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "Cylinder.pyx":288
 * 			else:
 * 				alpha, beta, gamma, delta = 0., 0., 0., 0
 * 				if 'alpha' in fargs.keys():             # <<<<<<<<<<<<<<
 * 					alpha = fargs['alpha']
 * 				if 'beta' in fargs.keys():
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_fargs, __pyx_n_s_keys); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      if (__pyx_t_2) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 288, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 288, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_alpha, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_12 = (__pyx_t_11 != 0);
      if (__pyx_t_12) {

        /* "Cylinder.pyx":289
 * 				alpha, beta, gamma, delta = 0., 0., 0., 0
 * 				if 'alpha' in fargs.keys():
 * 					alpha = fargs['alpha']             # <<<<<<<<<<<<<<
 * 				if 'beta' in fargs.keys():
 * 					beta = fargs['beta']
 */
        __pyx_t_5 = PyObject_GetItem(__pyx_v_fargs, __pyx_n_s_alpha); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF_SET(__pyx_v_alpha, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "Cylinder.pyx":288
 * 			else:
 * 				alpha, beta, gamma, delta = 0., 0., 0., 0
 * 				if 'alpha' in fargs.keys():             # <<<<<<<<<<<<<<
 * 					alpha = fargs['alpha']
 * 				if 'beta' in fargs.keys():
 */
      }

      /* "Cylinder.pyx":290
 * 				if 'alpha' in fargs.keys():
 * 					alpha = fargs['alpha']
 * 				if 'beta' in fargs.keys():             # <<<<<<<<<<<<<<
 * 					beta = fargs['beta']
 * 				if 'gamma' in fargs.keys():
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_fargs, __pyx_n_s_keys); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      if (__pyx_t_2) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 290, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 290, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_beta, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 290, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = (__pyx_t_12 != 0);
      if (__pyx_t_11) {

        /* "Cylinder.pyx":291
 * 					alpha = fargs['alpha']
 * 				if 'beta' in fargs.keys():
 * 					beta = fargs['beta']             # <<<<<<<<<<<<<<
 * 				if 'gamma' in fargs.keys():
 * 					gamma = fargs['gamma']
 */
        __pyx_t_5 = PyObject_GetItem(__pyx_v_fargs, __pyx_n_s_beta); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF_SET(__pyx_v_beta, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "Cylinder.pyx":290
 * 				if 'alpha' in fargs.keys():
 * 					alpha = fargs['alpha']
 * 				if 'beta' in fargs.keys():             # <<<<<<<<<<<<<<
 * 					beta = fargs['beta']
 * 				if 'gamma' in fargs.keys():
 */
      }

      /* "Cylinder.pyx":292
 * 				if 'beta' in fargs.keys():
 * 					beta = fargs['beta']
 * 				if 'gamma' in fargs.keys():             # <<<<<<<<<<<<<<
 * 					gamma = fargs['gamma']
 * 				if 'delta' in fargs.keys():
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_fargs, __pyx_n_s_keys); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      if (__pyx_t_2) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_gamma, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 292, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_12 = (__pyx_t_11 != 0);
      if (__pyx_t_12) {

        /* "Cylinder.pyx":293
 * 					beta = fargs['beta']
 * 				if 'gamma' in fargs.keys():
 * 					gamma = fargs['gamma']             # <<<<<<<<<<<<<<
 * 				if 'delta' in fargs.keys():
 * 					delta = fargs['delta']
 */
        __pyx_t_5 = PyObject_GetItem(__pyx_v_fargs, __pyx_n_s_gamma); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 293, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF_SET(__pyx_v_gamma, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "Cylinder.pyx":292
 * 				if 'beta' in fargs.keys():
 * 					beta = fargs['beta']
 * 				if 'gamma' in fargs.keys():             # <<<<<<<<<<<<<<
 * 					gamma = fargs['gamma']
 * 				if 'delta' in fargs.keys():
 */
      }

      /* "Cylinder.pyx":294
 * 				if 'gamma' in fargs.keys():
 * 					gamma = fargs['gamma']
 * 				if 'delta' in fargs.keys():             # <<<<<<<<<<<<<<
 * 					delta = fargs['delta']
 * 				fuel_data.y  = beta/alpha
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_fargs, __pyx_n_s_keys); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 294, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      if (__pyx_t_2) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_delta, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 294, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = (__pyx_t_12 != 0);
      if (__pyx_t_11) {

        /* "Cylinder.pyx":295
 * 					gamma = fargs['gamma']
 * 				if 'delta' in fargs.keys():
 * 					delta = fargs['delta']             # <<<<<<<<<<<<<<
 * 				fuel_data.y  = beta/alpha
 * 				fuel_data.Mw = 12.01*alpha+1.008*beta+ \
 */
        __pyx_t_5 = PyObject_GetItem(__pyx_v_fargs, __pyx_n_s_delta); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF_SET(__pyx_v_delta, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "Cylinder.pyx":294
 * 				if 'gamma' in fargs.keys():
 * 					gamma = fargs['gamma']
 * 				if 'delta' in fargs.keys():             # <<<<<<<<<<<<<<
 * 					delta = fargs['delta']
 * 				fuel_data.y  = beta/alpha
 */
      }

      /* "Cylinder.pyx":296
 * 				if 'delta' in fargs.keys():
 * 					delta = fargs['delta']
 * 				fuel_data.y  = beta/alpha             # <<<<<<<<<<<<<<
 * 				fuel_data.Mw = 12.01*alpha+1.008*beta+ \
 * 				    16.0*gamma+14.01*delta
 */
      __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_beta, __pyx_v_alpha); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_fuel_data.y = __pyx_t_10;

      /* "Cylinder.pyx":297
 * 					delta = fargs['delta']
 * 				fuel_data.y  = beta/alpha
 * 				fuel_data.Mw = 12.01*alpha+1.008*beta+ \             # <<<<<<<<<<<<<<
 * 				    16.0*gamma+14.01*delta
 * 			fuel_data.hvap_fuel = validatePositive(fargs,'hvap_fuel','Fuel-Cylinder',308000.0)
 */
      __pyx_t_5 = PyNumber_Multiply(__pyx_float_12_01, __pyx_v_alpha); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = PyNumber_Multiply(__pyx_float_1_008, __pyx_v_beta); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "Cylinder.pyx":298
 * 				fuel_data.y  = beta/alpha
 * 				fuel_data.Mw = 12.01*alpha+1.008*beta+ \
 * 				    16.0*gamma+14.01*delta             # <<<<<<<<<<<<<<
 * 			fuel_data.hvap_fuel = validatePositive(fargs,'hvap_fuel','Fuel-Cylinder',308000.0)
 * 			if not('coef_cp' in fargs.keys()):
 */
      __pyx_t_14 = PyNumber_Multiply(__pyx_float_16_0, __pyx_v_gamma); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);

      /* "Cylinder.pyx":297
 * 					delta = fargs['delta']
 * 				fuel_data.y  = beta/alpha
 * 				fuel_data.Mw = 12.01*alpha+1.008*beta+ \             # <<<<<<<<<<<<<<
 * 				    16.0*gamma+14.01*delta
 * 			fuel_data.hvap_fuel = validatePositive(fargs,'hvap_fuel','Fuel-Cylinder',308000.0)
 */
      __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "Cylinder.pyx":298
 * 				fuel_data.y  = beta/alpha
 * 				fuel_data.Mw = 12.01*alpha+1.008*beta+ \
 * 				    16.0*gamma+14.01*delta             # <<<<<<<<<<<<<<
 * 			fuel_data.hvap_fuel = validatePositive(fargs,'hvap_fuel','Fuel-Cylinder',308000.0)
 * 			if not('coef_cp' in fargs.keys()):
 */
      __pyx_t_14 = PyNumber_Multiply(__pyx_float_14_01, __pyx_v_delta); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "Cylinder.pyx":297
 * 					delta = fargs['delta']
 * 				fuel_data.y  = beta/alpha
 * 				fuel_data.Mw = 12.01*alpha+1.008*beta+ \             # <<<<<<<<<<<<<<
 * 				    16.0*gamma+14.01*delta
 * 			fuel_data.hvap_fuel = validatePositive(fargs,'hvap_fuel','Fuel-Cylinder',308000.0)
 */
      __pyx_v_fuel_data.Mw = __pyx_t_10;
    }
    __pyx_L24:;

    /* "Cylinder.pyx":299
 * 				fuel_data.Mw = 12.01*alpha+1.008*beta+ \
 * 				    16.0*gamma+14.01*delta
 * 			fuel_data.hvap_fuel = validatePositive(fargs,'hvap_fuel','Fuel-Cylinder',308000.0)             # <<<<<<<<<<<<<<
 * 			if not('coef_cp' in fargs.keys()):
 * 				Afuel = [-2.7835e-01, 9.1396e-02, -4.9209e-05, \
 */
    __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_fargs, __pyx_n_s_hvap_fuel, __pyx_kp_s_Fuel_Cylinder, __pyx_float_308000_0};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 299, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_fargs, __pyx_n_s_hvap_fuel, __pyx_kp_s_Fuel_Cylinder, __pyx_float_308000_0};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 299, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_fargs);
      __Pyx_GIVEREF(__pyx_v_fargs);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_fargs);
      __Pyx_INCREF(__pyx_n_s_hvap_fuel);
      __Pyx_GIVEREF(__pyx_n_s_hvap_fuel);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_hvap_fuel);
      __Pyx_INCREF(__pyx_kp_s_Fuel_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Fuel_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_kp_s_Fuel_Cylinder);
      __Pyx_INCREF(__pyx_float_308000_0);
      __Pyx_GIVEREF(__pyx_float_308000_0);
      PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_4, __pyx_float_308000_0);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_fuel_data.hvap_fuel = __pyx_t_10;

    /* "Cylinder.pyx":300
 * 				    16.0*gamma+14.01*delta
 * 			fuel_data.hvap_fuel = validatePositive(fargs,'hvap_fuel','Fuel-Cylinder',308000.0)
 * 			if not('coef_cp' in fargs.keys()):             # <<<<<<<<<<<<<<
 * 				Afuel = [-2.7835e-01, 9.1396e-02, -4.9209e-05, \
 * 						  1.0267e-08, -1.5575e+04]
 */
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_fargs, __pyx_n_s_keys); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_coef_cp, __pyx_t_2, Py_NE)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_12 = (__pyx_t_11 != 0);
    if (__pyx_t_12) {

      /* "Cylinder.pyx":301
 * 			fuel_data.hvap_fuel = validatePositive(fargs,'hvap_fuel','Fuel-Cylinder',308000.0)
 * 			if not('coef_cp' in fargs.keys()):
 * 				Afuel = [-2.7835e-01, 9.1396e-02, -4.9209e-05, \             # <<<<<<<<<<<<<<
 * 						  1.0267e-08, -1.5575e+04]
 * 			else:
 */
      __pyx_t_2 = PyList_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_float_neg_2_7835eneg_01);
      __Pyx_GIVEREF(__pyx_float_neg_2_7835eneg_01);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_float_neg_2_7835eneg_01);
      __Pyx_INCREF(__pyx_float_9_1396eneg_02);
      __Pyx_GIVEREF(__pyx_float_9_1396eneg_02);
      PyList_SET_ITEM(__pyx_t_2, 1, __pyx_float_9_1396eneg_02);
      __Pyx_INCREF(__pyx_float_neg_4_9209eneg_05);
      __Pyx_GIVEREF(__pyx_float_neg_4_9209eneg_05);
      PyList_SET_ITEM(__pyx_t_2, 2, __pyx_float_neg_4_9209eneg_05);
      __Pyx_INCREF(__pyx_float_1_0267eneg_08);
      __Pyx_GIVEREF(__pyx_float_1_0267eneg_08);
      PyList_SET_ITEM(__pyx_t_2, 3, __pyx_float_1_0267eneg_08);
      __Pyx_INCREF(__pyx_float_neg_1_5575e_04);
      __Pyx_GIVEREF(__pyx_float_neg_1_5575e_04);
      PyList_SET_ITEM(__pyx_t_2, 4, __pyx_float_neg_1_5575e_04);
      __pyx_v_Afuel = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "Cylinder.pyx":300
 * 				    16.0*gamma+14.01*delta
 * 			fuel_data.hvap_fuel = validatePositive(fargs,'hvap_fuel','Fuel-Cylinder',308000.0)
 * 			if not('coef_cp' in fargs.keys()):             # <<<<<<<<<<<<<<
 * 				Afuel = [-2.7835e-01, 9.1396e-02, -4.9209e-05, \
 * 						  1.0267e-08, -1.5575e+04]
 */
      goto __pyx_L31;
    }

    /* "Cylinder.pyx":304
 * 						  1.0267e-08, -1.5575e+04]
 * 			else:
 * 				Afuel = onlyAssert(fargs,'coef_cp','Fuel-Cylinder')             # <<<<<<<<<<<<<<
 * 		else:
 * 			alpha, beta, gamma, delta, Q_LHV, h_vap, Afuel = \
 */
    /*else*/ {
      __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_1 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
          __pyx_t_4 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_14)) {
        PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_fargs, __pyx_n_s_coef_cp, __pyx_kp_s_Fuel_Cylinder};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
        PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_fargs, __pyx_n_s_coef_cp, __pyx_kp_s_Fuel_Cylinder};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 304, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_INCREF(__pyx_v_fargs);
        __Pyx_GIVEREF(__pyx_v_fargs);
        PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_fargs);
        __Pyx_INCREF(__pyx_n_s_coef_cp);
        __Pyx_GIVEREF(__pyx_n_s_coef_cp);
        PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_coef_cp);
        __Pyx_INCREF(__pyx_kp_s_Fuel_Cylinder);
        __Pyx_GIVEREF(__pyx_kp_s_Fuel_Cylinder);
        PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_kp_s_Fuel_Cylinder);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_v_Afuel = __pyx_t_2;
      __pyx_t_2 = 0;
    }
    __pyx_L31:;

    /* "Cylinder.pyx":274
 * 		cdef fuel fuel_data
 * 		fuel_data.coef_cp = doublevec_factory(0)
 * 		if not('name' in fargs.keys()):             # <<<<<<<<<<<<<<
 * 			# if the name of fuel is not specified, the user can
 * 			# define the fuel properties.
 */
    goto __pyx_L23;
  }

  /* "Cylinder.pyx":306
 * 				Afuel = onlyAssert(fargs,'coef_cp','Fuel-Cylinder')
 * 		else:
 * 			alpha, beta, gamma, delta, Q_LHV, h_vap, Afuel = \             # <<<<<<<<<<<<<<
 * 			    data_fuel(fargs['name'])
 * 			fuel_data.Q_fuel     = Q_LHV
 */
  /*else*/ {

    /* "Cylinder.pyx":307
 * 		else:
 * 			alpha, beta, gamma, delta, Q_LHV, h_vap, Afuel = \
 * 			    data_fuel(fargs['name'])             # <<<<<<<<<<<<<<
 * 			fuel_data.Q_fuel     = Q_LHV
 * 			fuel_data.alpha      = alpha
 */
    __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_data_fuel); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = PyObject_GetItem(__pyx_v_fargs, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_14)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 307, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 7)) {
        if (size > 7) __Pyx_RaiseTooManyValuesError(7);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 306, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_14 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_16 = PyTuple_GET_ITEM(sequence, 4); 
        __pyx_t_17 = PyTuple_GET_ITEM(sequence, 5); 
        __pyx_t_18 = PyTuple_GET_ITEM(sequence, 6); 
      } else {
        __pyx_t_14 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_1 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_16 = PyList_GET_ITEM(sequence, 4); 
        __pyx_t_17 = PyList_GET_ITEM(sequence, 5); 
        __pyx_t_18 = PyList_GET_ITEM(sequence, 6); 
      }
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(__pyx_t_18);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[7] = {&__pyx_t_14,&__pyx_t_3,&__pyx_t_5,&__pyx_t_1,&__pyx_t_16,&__pyx_t_17,&__pyx_t_18};
        for (i=0; i < 7; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 306, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[7] = {&__pyx_t_14,&__pyx_t_3,&__pyx_t_5,&__pyx_t_1,&__pyx_t_16,&__pyx_t_17,&__pyx_t_18};
      __pyx_t_19 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_20 = Py_TYPE(__pyx_t_19)->tp_iternext;
      for (index=0; index < 7; index++) {
        PyObject* item = __pyx_t_20(__pyx_t_19); if (unlikely(!item)) goto __pyx_L32_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_20(__pyx_t_19), 7) < 0) __PYX_ERR(0, 306, __pyx_L1_error)
      __pyx_t_20 = NULL;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      goto __pyx_L33_unpacking_done;
      __pyx_L32_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_20 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 306, __pyx_L1_error)
      __pyx_L33_unpacking_done:;
    }

    /* "Cylinder.pyx":306
 * 				Afuel = onlyAssert(fargs,'coef_cp','Fuel-Cylinder')
 * 		else:
 * 			alpha, beta, gamma, delta, Q_LHV, h_vap, Afuel = \             # <<<<<<<<<<<<<<
 * 			    data_fuel(fargs['name'])
 * 			fuel_data.Q_fuel     = Q_LHV
 */
    __pyx_v_alpha = __pyx_t_14;
    __pyx_t_14 = 0;
    __pyx_v_beta = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_gamma = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_v_delta = __pyx_t_1;
    __pyx_t_1 = 0;
    __pyx_v_Q_LHV = __pyx_t_16;
    __pyx_t_16 = 0;
    __pyx_v_h_vap = __pyx_t_17;
    __pyx_t_17 = 0;
    __pyx_v_Afuel = __pyx_t_18;
    __pyx_t_18 = 0;

    /* "Cylinder.pyx":308
 * 			alpha, beta, gamma, delta, Q_LHV, h_vap, Afuel = \
 * 			    data_fuel(fargs['name'])
 * 			fuel_data.Q_fuel     = Q_LHV             # <<<<<<<<<<<<<<
 * 			fuel_data.alpha      = alpha
 * 			fuel_data.beta       = beta
 */
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_Q_LHV); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_v_fuel_data.Q_fuel = __pyx_t_10;

    /* "Cylinder.pyx":309
 * 			    data_fuel(fargs['name'])
 * 			fuel_data.Q_fuel     = Q_LHV
 * 			fuel_data.alpha      = alpha             # <<<<<<<<<<<<<<
 * 			fuel_data.beta       = beta
 * 			fuel_data.gamma      = gamma
 */
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_alpha); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L1_error)
    __pyx_v_fuel_data.alpha = __pyx_t_10;

    /* "Cylinder.pyx":310
 * 			fuel_data.Q_fuel     = Q_LHV
 * 			fuel_data.alpha      = alpha
 * 			fuel_data.beta       = beta             # <<<<<<<<<<<<<<
 * 			fuel_data.gamma      = gamma
 * 			fuel_data.delta      = delta
 */
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_beta); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
    __pyx_v_fuel_data.beta = __pyx_t_10;

    /* "Cylinder.pyx":311
 * 			fuel_data.alpha      = alpha
 * 			fuel_data.beta       = beta
 * 			fuel_data.gamma      = gamma             # <<<<<<<<<<<<<<
 * 			fuel_data.delta      = delta
 * 			fuel_data.hvap_fuel  = h_vap
 */
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_gamma); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L1_error)
    __pyx_v_fuel_data.gamma = __pyx_t_10;

    /* "Cylinder.pyx":312
 * 			fuel_data.beta       = beta
 * 			fuel_data.gamma      = gamma
 * 			fuel_data.delta      = delta             # <<<<<<<<<<<<<<
 * 			fuel_data.hvap_fuel  = h_vap
 * 			fuel_data.y          = beta/alpha
 */
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_delta); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L1_error)
    __pyx_v_fuel_data.delta = __pyx_t_10;

    /* "Cylinder.pyx":313
 * 			fuel_data.gamma      = gamma
 * 			fuel_data.delta      = delta
 * 			fuel_data.hvap_fuel  = h_vap             # <<<<<<<<<<<<<<
 * 			fuel_data.y          = beta/alpha
 * 			fuel_data.Mw         = 12.01*alpha+1.008*beta+ \
 */
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_h_vap); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 313, __pyx_L1_error)
    __pyx_v_fuel_data.hvap_fuel = __pyx_t_10;

    /* "Cylinder.pyx":314
 * 			fuel_data.delta      = delta
 * 			fuel_data.hvap_fuel  = h_vap
 * 			fuel_data.y          = beta/alpha             # <<<<<<<<<<<<<<
 * 			fuel_data.Mw         = 12.01*alpha+1.008*beta+ \
 * 			    16.0*gamma+14.01*delta
 */
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_beta, __pyx_v_alpha); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_fuel_data.y = __pyx_t_10;

    /* "Cylinder.pyx":315
 * 			fuel_data.hvap_fuel  = h_vap
 * 			fuel_data.y          = beta/alpha
 * 			fuel_data.Mw         = 12.01*alpha+1.008*beta+ \             # <<<<<<<<<<<<<<
 * 			    16.0*gamma+14.01*delta
 * 		for c in Afuel:
 */
    __pyx_t_2 = PyNumber_Multiply(__pyx_float_12_01, __pyx_v_alpha); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_18 = PyNumber_Multiply(__pyx_float_1_008, __pyx_v_beta); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_17 = PyNumber_Add(__pyx_t_2, __pyx_t_18); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "Cylinder.pyx":316
 * 			fuel_data.y          = beta/alpha
 * 			fuel_data.Mw         = 12.01*alpha+1.008*beta+ \
 * 			    16.0*gamma+14.01*delta             # <<<<<<<<<<<<<<
 * 		for c in Afuel:
 * 			fuel_data.coef_cp.push_back(c)
 */
    __pyx_t_18 = PyNumber_Multiply(__pyx_float_16_0, __pyx_v_gamma); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);

    /* "Cylinder.pyx":315
 * 			fuel_data.hvap_fuel  = h_vap
 * 			fuel_data.y          = beta/alpha
 * 			fuel_data.Mw         = 12.01*alpha+1.008*beta+ \             # <<<<<<<<<<<<<<
 * 			    16.0*gamma+14.01*delta
 * 		for c in Afuel:
 */
    __pyx_t_2 = PyNumber_Add(__pyx_t_17, __pyx_t_18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "Cylinder.pyx":316
 * 			fuel_data.y          = beta/alpha
 * 			fuel_data.Mw         = 12.01*alpha+1.008*beta+ \
 * 			    16.0*gamma+14.01*delta             # <<<<<<<<<<<<<<
 * 		for c in Afuel:
 * 			fuel_data.coef_cp.push_back(c)
 */
    __pyx_t_18 = PyNumber_Multiply(__pyx_float_14_01, __pyx_v_delta); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_17 = PyNumber_Add(__pyx_t_2, __pyx_t_18); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

    /* "Cylinder.pyx":315
 * 			fuel_data.hvap_fuel  = h_vap
 * 			fuel_data.y          = beta/alpha
 * 			fuel_data.Mw         = 12.01*alpha+1.008*beta+ \             # <<<<<<<<<<<<<<
 * 			    16.0*gamma+14.01*delta
 * 		for c in Afuel:
 */
    __pyx_v_fuel_data.Mw = __pyx_t_10;
  }
  __pyx_L23:;

  /* "Cylinder.pyx":317
 * 			fuel_data.Mw         = 12.01*alpha+1.008*beta+ \
 * 			    16.0*gamma+14.01*delta
 * 		for c in Afuel:             # <<<<<<<<<<<<<<
 * 			fuel_data.coef_cp.push_back(c)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_Afuel)) || PyTuple_CheckExact(__pyx_v_Afuel)) {
    __pyx_t_17 = __pyx_v_Afuel; __Pyx_INCREF(__pyx_t_17); __pyx_t_7 = 0;
    __pyx_t_21 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_17 = PyObject_GetIter(__pyx_v_Afuel); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_21 = Py_TYPE(__pyx_t_17)->tp_iternext; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 317, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_21)) {
      if (likely(PyList_CheckExact(__pyx_t_17))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_17)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_18 = PyList_GET_ITEM(__pyx_t_17, __pyx_t_7); __Pyx_INCREF(__pyx_t_18); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 317, __pyx_L1_error)
        #else
        __pyx_t_18 = PySequence_ITEM(__pyx_t_17, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 317, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_17)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_18 = PyTuple_GET_ITEM(__pyx_t_17, __pyx_t_7); __Pyx_INCREF(__pyx_t_18); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 317, __pyx_L1_error)
        #else
        __pyx_t_18 = PySequence_ITEM(__pyx_t_17, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 317, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        #endif
      }
    } else {
      __pyx_t_18 = __pyx_t_21(__pyx_t_17);
      if (unlikely(!__pyx_t_18)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 317, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_18);
    }
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_18);
    __pyx_t_18 = 0;

    /* "Cylinder.pyx":318
 * 			    16.0*gamma+14.01*delta
 * 		for c in Afuel:
 * 			fuel_data.coef_cp.push_back(c)             # <<<<<<<<<<<<<<
 * 
 * 		#condiciones para valves
 */
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_c); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L1_error)
    __pyx_v_fuel_data.coef_cp.push_back(__pyx_t_10);

    /* "Cylinder.pyx":317
 * 			fuel_data.Mw         = 12.01*alpha+1.008*beta+ \
 * 			    16.0*gamma+14.01*delta
 * 		for c in Afuel:             # <<<<<<<<<<<<<<
 * 			fuel_data.coef_cp.push_back(c)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "Cylinder.pyx":321
 * 
 * 		#condiciones para valves
 * 		vargs = kargs['intake_valves']             # <<<<<<<<<<<<<<
 * 		nintake = len(vargs)
 * 		vargs = vargs + kargs['exhaust_valves']
 */
  __pyx_t_17 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_intake_valves); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF_SET(__pyx_v_vargs, __pyx_t_17);
  __pyx_t_17 = 0;

  /* "Cylinder.pyx":322
 * 		#condiciones para valves
 * 		vargs = kargs['intake_valves']
 * 		nintake = len(vargs)             # <<<<<<<<<<<<<<
 * 		vargs = vargs + kargs['exhaust_valves']
 * 		cdef valvevec intake_valves  = valvevec_factory(0)
 */
  __pyx_t_7 = PyObject_Length(__pyx_v_vargs); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __pyx_v_nintake = __pyx_t_7;

  /* "Cylinder.pyx":323
 * 		vargs = kargs['intake_valves']
 * 		nintake = len(vargs)
 * 		vargs = vargs + kargs['exhaust_valves']             # <<<<<<<<<<<<<<
 * 		cdef valvevec intake_valves  = valvevec_factory(0)
 * 		cdef valvevec exhaust_valves = valvevec_factory(0)
 */
  __pyx_t_17 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_exhaust_valves); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyNumber_Add(__pyx_v_vargs, __pyx_t_17); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __Pyx_DECREF_SET(__pyx_v_vargs, __pyx_t_18);
  __pyx_t_18 = 0;

  /* "Cylinder.pyx":324
 * 		nintake = len(vargs)
 * 		vargs = vargs + kargs['exhaust_valves']
 * 		cdef valvevec intake_valves  = valvevec_factory(0)             # <<<<<<<<<<<<<<
 * 		cdef valvevec exhaust_valves = valvevec_factory(0)
 * 		cdef valve auxValve
 */
  __pyx_v_intake_valves = std::vector<valve>(0);

  /* "Cylinder.pyx":325
 * 		vargs = vargs + kargs['exhaust_valves']
 * 		cdef valvevec intake_valves  = valvevec_factory(0)
 * 		cdef valvevec exhaust_valves = valvevec_factory(0)             # <<<<<<<<<<<<<<
 * 		cdef valve auxValve
 * 		for i in range(len(vargs)):
 */
  __pyx_v_exhaust_valves = std::vector<valve>(0);

  /* "Cylinder.pyx":327
 * 		cdef valvevec exhaust_valves = valvevec_factory(0)
 * 		cdef valve auxValve
 * 		for i in range(len(vargs)):             # <<<<<<<<<<<<<<
 * 			auxValve.tube	     = onlyAssert(vargs[i],'tube','Valve-Cylinder')
 * 			auxValve.Nval	     = validatePositive(vargs[i],'Nval','Valve-Cylinder',1)
 */
  __pyx_t_7 = PyObject_Length(__pyx_v_vargs); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 327, __pyx_L1_error)
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_7; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "Cylinder.pyx":328
 * 		cdef valve auxValve
 * 		for i in range(len(vargs)):
 * 			auxValve.tube	     = onlyAssert(vargs[i],'tube','Valve-Cylinder')             # <<<<<<<<<<<<<<
 * 			auxValve.Nval	     = validatePositive(vargs[i],'Nval','Valve-Cylinder',1)
 * 			auxValve.type_dat    = onlyAssert(vargs[i],'type_dat','Valve-Cylinder')
 */
    __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_vargs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_16 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_17);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_17, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_2, __pyx_n_s_tube, __pyx_kp_s_Valve_Cylinder};
      __pyx_t_18 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_2, __pyx_n_s_tube, __pyx_kp_s_Valve_Cylinder};
      __pyx_t_18 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_16) {
        __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_16); __pyx_t_16 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_tube);
      __Pyx_GIVEREF(__pyx_n_s_tube);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_tube);
      __Pyx_INCREF(__pyx_kp_s_Valve_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Valve_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_kp_s_Valve_Cylinder);
      __pyx_t_2 = 0;
      __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_1, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_18); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_v_auxValve.tube = __pyx_t_4;

    /* "Cylinder.pyx":329
 * 		for i in range(len(vargs)):
 * 			auxValve.tube	     = onlyAssert(vargs[i],'tube','Valve-Cylinder')
 * 			auxValve.Nval	     = validatePositive(vargs[i],'Nval','Valve-Cylinder',1)             # <<<<<<<<<<<<<<
 * 			auxValve.type_dat    = onlyAssert(vargs[i],'type_dat','Valve-Cylinder')
 * 			auxValve.angle_V0    = onlyAssert(vargs[i],'angle_V0','Valve-Cylinder')
 */
    __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_vargs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_17);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_17, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_t_1, __pyx_n_s_Nval, __pyx_kp_s_Valve_Cylinder, __pyx_int_1};
      __pyx_t_18 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_t_1, __pyx_n_s_Nval, __pyx_kp_s_Valve_Cylinder, __pyx_int_1};
      __pyx_t_18 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_4, __pyx_t_1);
      __Pyx_INCREF(__pyx_n_s_Nval);
      __Pyx_GIVEREF(__pyx_n_s_Nval);
      PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_4, __pyx_n_s_Nval);
      __Pyx_INCREF(__pyx_kp_s_Valve_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Valve_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_16, 2+__pyx_t_4, __pyx_kp_s_Valve_Cylinder);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_16, 3+__pyx_t_4, __pyx_int_1);
      __pyx_t_1 = 0;
      __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_16, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_18); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_v_auxValve.Nval = __pyx_t_4;

    /* "Cylinder.pyx":330
 * 			auxValve.tube	     = onlyAssert(vargs[i],'tube','Valve-Cylinder')
 * 			auxValve.Nval	     = validatePositive(vargs[i],'Nval','Valve-Cylinder',1)
 * 			auxValve.type_dat    = onlyAssert(vargs[i],'type_dat','Valve-Cylinder')             # <<<<<<<<<<<<<<
 * 			auxValve.angle_V0    = onlyAssert(vargs[i],'angle_V0','Valve-Cylinder')
 * 			auxValve.angle_VC    = onlyAssert(vargs[i],'angle_VC','Valve-Cylinder')
 */
    __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_16 = __Pyx_GetItemInt(__pyx_v_vargs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_17);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_17, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_t_16, __pyx_n_s_type_dat, __pyx_kp_s_Valve_Cylinder};
      __pyx_t_18 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_t_16, __pyx_n_s_type_dat, __pyx_kp_s_Valve_Cylinder};
      __pyx_t_18 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_t_16);
      __Pyx_INCREF(__pyx_n_s_type_dat);
      __Pyx_GIVEREF(__pyx_n_s_type_dat);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_type_dat);
      __Pyx_INCREF(__pyx_kp_s_Valve_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Valve_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_kp_s_Valve_Cylinder);
      __pyx_t_16 = 0;
      __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_2, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_18); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_v_auxValve.type_dat = __pyx_t_4;

    /* "Cylinder.pyx":331
 * 			auxValve.Nval	     = validatePositive(vargs[i],'Nval','Valve-Cylinder',1)
 * 			auxValve.type_dat    = onlyAssert(vargs[i],'type_dat','Valve-Cylinder')
 * 			auxValve.angle_V0    = onlyAssert(vargs[i],'angle_V0','Valve-Cylinder')             # <<<<<<<<<<<<<<
 * 			auxValve.angle_VC    = onlyAssert(vargs[i],'angle_VC','Valve-Cylinder')
 * 			auxValve.Dv	     = validatePositive(vargs[i],'Dv','Valve-Cylinder')
 */
    __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_vargs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_16 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_17);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_17, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_2, __pyx_n_s_angle_V0, __pyx_kp_s_Valve_Cylinder};
      __pyx_t_18 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 331, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_2, __pyx_n_s_angle_V0, __pyx_kp_s_Valve_Cylinder};
      __pyx_t_18 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 331, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_16) {
        __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_16); __pyx_t_16 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_angle_V0);
      __Pyx_GIVEREF(__pyx_n_s_angle_V0);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_angle_V0);
      __Pyx_INCREF(__pyx_kp_s_Valve_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Valve_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_kp_s_Valve_Cylinder);
      __pyx_t_2 = 0;
      __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_1, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_18); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_v_auxValve.angle_V0 = __pyx_t_10;

    /* "Cylinder.pyx":332
 * 			auxValve.type_dat    = onlyAssert(vargs[i],'type_dat','Valve-Cylinder')
 * 			auxValve.angle_V0    = onlyAssert(vargs[i],'angle_V0','Valve-Cylinder')
 * 			auxValve.angle_VC    = onlyAssert(vargs[i],'angle_VC','Valve-Cylinder')             # <<<<<<<<<<<<<<
 * 			auxValve.Dv	     = validatePositive(vargs[i],'Dv','Valve-Cylinder')
 * 			auxValve.Lv 	     = doublevec_factory(0)
 */
    __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_vargs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_17);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_17, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_t_1, __pyx_n_s_angle_VC, __pyx_kp_s_Valve_Cylinder};
      __pyx_t_18 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 332, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_t_1, __pyx_n_s_angle_VC, __pyx_kp_s_Valve_Cylinder};
      __pyx_t_18 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 332, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_4, __pyx_t_1);
      __Pyx_INCREF(__pyx_n_s_angle_VC);
      __Pyx_GIVEREF(__pyx_n_s_angle_VC);
      PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_4, __pyx_n_s_angle_VC);
      __Pyx_INCREF(__pyx_kp_s_Valve_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Valve_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_16, 2+__pyx_t_4, __pyx_kp_s_Valve_Cylinder);
      __pyx_t_1 = 0;
      __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_16, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_18); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_v_auxValve.angle_VC = __pyx_t_10;

    /* "Cylinder.pyx":333
 * 			auxValve.angle_V0    = onlyAssert(vargs[i],'angle_V0','Valve-Cylinder')
 * 			auxValve.angle_VC    = onlyAssert(vargs[i],'angle_VC','Valve-Cylinder')
 * 			auxValve.Dv	     = validatePositive(vargs[i],'Dv','Valve-Cylinder')             # <<<<<<<<<<<<<<
 * 			auxValve.Lv 	     = doublevec_factory(0)
 * 			auxValve.Lvmax 	     = validatePositive(vargs[i],'Lvmax','Valve-Cylinder',0)
 */
    __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_16 = __Pyx_GetItemInt(__pyx_v_vargs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_17);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_17, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_t_16, __pyx_n_s_Dv, __pyx_kp_s_Valve_Cylinder};
      __pyx_t_18 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 333, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_t_16, __pyx_n_s_Dv, __pyx_kp_s_Valve_Cylinder};
      __pyx_t_18 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 333, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_t_16);
      __Pyx_INCREF(__pyx_n_s_Dv);
      __Pyx_GIVEREF(__pyx_n_s_Dv);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_Dv);
      __Pyx_INCREF(__pyx_kp_s_Valve_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Valve_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_kp_s_Valve_Cylinder);
      __pyx_t_16 = 0;
      __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_2, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 333, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_18); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_v_auxValve.Dv = __pyx_t_10;

    /* "Cylinder.pyx":334
 * 			auxValve.angle_VC    = onlyAssert(vargs[i],'angle_VC','Valve-Cylinder')
 * 			auxValve.Dv	     = validatePositive(vargs[i],'Dv','Valve-Cylinder')
 * 			auxValve.Lv 	     = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 			auxValve.Lvmax 	     = validatePositive(vargs[i],'Lvmax','Valve-Cylinder',0)
 * 			auxValve.valve_model = validateInList(vargs[i],'valve_model','Valve-Cylinder',[0,1],0)
 */
    __pyx_v_auxValve.Lv = std::vector<double>(0);

    /* "Cylinder.pyx":335
 * 			auxValve.Dv	     = validatePositive(vargs[i],'Dv','Valve-Cylinder')
 * 			auxValve.Lv 	     = doublevec_factory(0)
 * 			auxValve.Lvmax 	     = validatePositive(vargs[i],'Lvmax','Valve-Cylinder',0)             # <<<<<<<<<<<<<<
 * 			auxValve.valve_model = validateInList(vargs[i],'valve_model','Valve-Cylinder',[0,1],0)
 * 			if auxValve.type_dat == 0: # ley senoidal cuadrada, a calcular en Fortran
 */
    __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_vargs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_16 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_17);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_17, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[5] = {__pyx_t_16, __pyx_t_2, __pyx_n_s_Lvmax, __pyx_kp_s_Valve_Cylinder, __pyx_int_0};
      __pyx_t_18 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 335, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[5] = {__pyx_t_16, __pyx_t_2, __pyx_n_s_Lvmax, __pyx_kp_s_Valve_Cylinder, __pyx_int_0};
      __pyx_t_18 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 335, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_16) {
        __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_16); __pyx_t_16 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_Lvmax);
      __Pyx_GIVEREF(__pyx_n_s_Lvmax);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_Lvmax);
      __Pyx_INCREF(__pyx_kp_s_Valve_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Valve_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_kp_s_Valve_Cylinder);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_4, __pyx_int_0);
      __pyx_t_2 = 0;
      __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_1, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_18); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_v_auxValve.Lvmax = __pyx_t_10;

    /* "Cylinder.pyx":336
 * 			auxValve.Lv 	     = doublevec_factory(0)
 * 			auxValve.Lvmax 	     = validatePositive(vargs[i],'Lvmax','Valve-Cylinder',0)
 * 			auxValve.valve_model = validateInList(vargs[i],'valve_model','Valve-Cylinder',[0,1],0)             # <<<<<<<<<<<<<<
 * 			if auxValve.type_dat == 0: # ley senoidal cuadrada, a calcular en Fortran
 * 				auxValve.Lv.push_back(-1)
 */
    __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateInList); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_vargs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_1);
    __pyx_t_16 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_17);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_17, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[6] = {__pyx_t_16, __pyx_t_1, __pyx_n_s_valve_model, __pyx_kp_s_Valve_Cylinder, __pyx_t_2, __pyx_int_0};
      __pyx_t_18 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[6] = {__pyx_t_16, __pyx_t_1, __pyx_n_s_valve_model, __pyx_kp_s_Valve_Cylinder, __pyx_t_2, __pyx_int_0};
      __pyx_t_18 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(5+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_16) {
        __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_16); __pyx_t_16 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_t_1);
      __Pyx_INCREF(__pyx_n_s_valve_model);
      __Pyx_GIVEREF(__pyx_n_s_valve_model);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_valve_model);
      __Pyx_INCREF(__pyx_kp_s_Valve_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Valve_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_kp_s_Valve_Cylinder);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_t_2);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_int_0);
      __pyx_t_1 = 0;
      __pyx_t_2 = 0;
      __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_5, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_18); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_v_auxValve.valve_model = __pyx_t_4;

    /* "Cylinder.pyx":337
 * 			auxValve.Lvmax 	     = validatePositive(vargs[i],'Lvmax','Valve-Cylinder',0)
 * 			auxValve.valve_model = validateInList(vargs[i],'valve_model','Valve-Cylinder',[0,1],0)
 * 			if auxValve.type_dat == 0: # ley senoidal cuadrada, a calcular en Fortran             # <<<<<<<<<<<<<<
 * 				auxValve.Lv.push_back(-1)
 * 				auxValve.Lv.push_back(-1)
 */
    switch (__pyx_v_auxValve.type_dat) {
      case 0:

      /* "Cylinder.pyx":338
 * 			auxValve.valve_model = validateInList(vargs[i],'valve_model','Valve-Cylinder',[0,1],0)
 * 			if auxValve.type_dat == 0: # ley senoidal cuadrada, a calcular en Fortran
 * 				auxValve.Lv.push_back(-1)             # <<<<<<<<<<<<<<
 * 				auxValve.Lv.push_back(-1)
 * 			elif auxValve.type_dat == -1:  # ley exponencial, a calcular en Fortran
 */
      __pyx_v_auxValve.Lv.push_back(-1.0);

      /* "Cylinder.pyx":339
 * 			if auxValve.type_dat == 0: # ley senoidal cuadrada, a calcular en Fortran
 * 				auxValve.Lv.push_back(-1)
 * 				auxValve.Lv.push_back(-1)             # <<<<<<<<<<<<<<
 * 			elif auxValve.type_dat == -1:  # ley exponencial, a calcular en Fortran
 * 				auxValve.Lv.push_back(-1)
 */
      __pyx_v_auxValve.Lv.push_back(-1.0);

      /* "Cylinder.pyx":337
 * 			auxValve.Lvmax 	     = validatePositive(vargs[i],'Lvmax','Valve-Cylinder',0)
 * 			auxValve.valve_model = validateInList(vargs[i],'valve_model','Valve-Cylinder',[0,1],0)
 * 			if auxValve.type_dat == 0: # ley senoidal cuadrada, a calcular en Fortran             # <<<<<<<<<<<<<<
 * 				auxValve.Lv.push_back(-1)
 * 				auxValve.Lv.push_back(-1)
 */
      break;

      /* "Cylinder.pyx":340
 * 				auxValve.Lv.push_back(-1)
 * 				auxValve.Lv.push_back(-1)
 * 			elif auxValve.type_dat == -1:  # ley exponencial, a calcular en Fortran             # <<<<<<<<<<<<<<
 * 				auxValve.Lv.push_back(-1)
 * 				auxValve.Lv.push_back(-1)
 */
      case -1L:

      /* "Cylinder.pyx":341
 * 				auxValve.Lv.push_back(-1)
 * 			elif auxValve.type_dat == -1:  # ley exponencial, a calcular en Fortran
 * 				auxValve.Lv.push_back(-1)             # <<<<<<<<<<<<<<
 * 				auxValve.Lv.push_back(-1)
 * 			#	else:   # se debe ingresar un array(2x721) y lo mapea a un array unidimensional [ang,val,ang,val...]
 */
      __pyx_v_auxValve.Lv.push_back(-1.0);

      /* "Cylinder.pyx":342
 * 			elif auxValve.type_dat == -1:  # ley exponencial, a calcular en Fortran
 * 				auxValve.Lv.push_back(-1)
 * 				auxValve.Lv.push_back(-1)             # <<<<<<<<<<<<<<
 * 			#	else:   # se debe ingresar un array(2x721) y lo mapea a un array unidimensional [ang,val,ang,val...]
 * 			#		# if (validateSize(vargs[i],'Lv','Valve-Cylinder',721)):
 */
      __pyx_v_auxValve.Lv.push_back(-1.0);

      /* "Cylinder.pyx":340
 * 				auxValve.Lv.push_back(-1)
 * 				auxValve.Lv.push_back(-1)
 * 			elif auxValve.type_dat == -1:  # ley exponencial, a calcular en Fortran             # <<<<<<<<<<<<<<
 * 				auxValve.Lv.push_back(-1)
 * 				auxValve.Lv.push_back(-1)
 */
      break;
      default:

      /* "Cylinder.pyx":351
 * 			# ahora se recibe pares [angulo,valor]
 * 			else:
 * 				auxValve.Lv = []             # <<<<<<<<<<<<<<
 * 				for j in range(len(vargs[i]['Lv'])):
 * 					auxValve.Lv.push_back(vargs[i]['Lv'][j][0])
 */
      __pyx_v_auxValve.Lv = __pyx_t_22;

      /* "Cylinder.pyx":352
 * 			else:
 * 				auxValve.Lv = []
 * 				for j in range(len(vargs[i]['Lv'])):             # <<<<<<<<<<<<<<
 * 					auxValve.Lv.push_back(vargs[i]['Lv'][j][0])
 * 					auxValve.Lv.push_back(vargs[i]['Lv'][j][1])
 */
      __pyx_t_18 = __Pyx_GetItemInt(__pyx_v_vargs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_17 = PyObject_GetItem(__pyx_t_18, __pyx_n_s_Lv); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_23 = PyObject_Length(__pyx_t_17); if (unlikely(__pyx_t_23 == -1)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      for (__pyx_t_24 = 0; __pyx_t_24 < __pyx_t_23; __pyx_t_24+=1) {
        __pyx_v_j = __pyx_t_24;

        /* "Cylinder.pyx":353
 * 				auxValve.Lv = []
 * 				for j in range(len(vargs[i]['Lv'])):
 * 					auxValve.Lv.push_back(vargs[i]['Lv'][j][0])             # <<<<<<<<<<<<<<
 * 					auxValve.Lv.push_back(vargs[i]['Lv'][j][1])
 * 
 */
        __pyx_t_17 = __Pyx_GetItemInt(__pyx_v_vargs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 353, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_18 = PyObject_GetItem(__pyx_t_17, __pyx_n_s_Lv); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 353, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_18, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 353, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_t_18 = __Pyx_GetItemInt(__pyx_t_17, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 353, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_18); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 353, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_v_auxValve.Lv.push_back(__pyx_t_10);

        /* "Cylinder.pyx":354
 * 				for j in range(len(vargs[i]['Lv'])):
 * 					auxValve.Lv.push_back(vargs[i]['Lv'][j][0])
 * 					auxValve.Lv.push_back(vargs[i]['Lv'][j][1])             # <<<<<<<<<<<<<<
 * 
 * 			auxValve.Cd = []
 */
        __pyx_t_18 = __Pyx_GetItemInt(__pyx_v_vargs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __pyx_t_17 = PyObject_GetItem(__pyx_t_18, __pyx_n_s_Lv); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_t_18 = __Pyx_GetItemInt(__pyx_t_17, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_18, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_v_auxValve.Lv.push_back(__pyx_t_10);
      }
      break;
    }

    /* "Cylinder.pyx":356
 * 					auxValve.Lv.push_back(vargs[i]['Lv'][j][1])
 * 
 * 			auxValve.Cd = []             # <<<<<<<<<<<<<<
 * 			#for j in range(len(vargs[i]['Cd'][0])):
 * 			#	auxValve.Cd.push_back(vargs[i]['Cd'][0][j])
 */
    __pyx_v_auxValve.Cd = __pyx_t_22;

    /* "Cylinder.pyx":360
 * 			#	auxValve.Cd.push_back(vargs[i]['Cd'][0][j])
 * 			#	auxValve.Cd.push_back(vargs[i]['Cd'][1][j])
 * 			for j in range(len(vargs[i]['Cd'])):             # <<<<<<<<<<<<<<
 * 				auxValve.Cd.push_back(vargs[i]['Cd'][j][0])
 * 				auxValve.Cd.push_back(vargs[i]['Cd'][j][1])
 */
    __pyx_t_17 = __Pyx_GetItemInt(__pyx_v_vargs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = PyObject_GetItem(__pyx_t_17, __pyx_n_s_Cd); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_23 = PyObject_Length(__pyx_t_18); if (unlikely(__pyx_t_23 == -1)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    for (__pyx_t_24 = 0; __pyx_t_24 < __pyx_t_23; __pyx_t_24+=1) {
      __pyx_v_j = __pyx_t_24;

      /* "Cylinder.pyx":361
 * 			#	auxValve.Cd.push_back(vargs[i]['Cd'][1][j])
 * 			for j in range(len(vargs[i]['Cd'])):
 * 				auxValve.Cd.push_back(vargs[i]['Cd'][j][0])             # <<<<<<<<<<<<<<
 * 				auxValve.Cd.push_back(vargs[i]['Cd'][j][1])
 * 			#print "Cd: ", vargs[i]['Cd']
 */
      __pyx_t_18 = __Pyx_GetItemInt(__pyx_v_vargs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_17 = PyObject_GetItem(__pyx_t_18, __pyx_n_s_Cd); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_18 = __Pyx_GetItemInt(__pyx_t_17, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_18, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_v_auxValve.Cd.push_back(__pyx_t_10);

      /* "Cylinder.pyx":362
 * 			for j in range(len(vargs[i]['Cd'])):
 * 				auxValve.Cd.push_back(vargs[i]['Cd'][j][0])
 * 				auxValve.Cd.push_back(vargs[i]['Cd'][j][1])             # <<<<<<<<<<<<<<
 * 			#print "Cd: ", vargs[i]['Cd']
 * 
 */
      __pyx_t_17 = __Pyx_GetItemInt(__pyx_v_vargs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_18 = PyObject_GetItem(__pyx_t_17, __pyx_n_s_Cd); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_18, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_18 = __Pyx_GetItemInt(__pyx_t_17, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_18); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_v_auxValve.Cd.push_back(__pyx_t_10);
    }

    /* "Cylinder.pyx":365
 * 			#print "Cd: ", vargs[i]['Cd']
 * 
 * 			if(i<nintake):             # <<<<<<<<<<<<<<
 * 				intake_valves.push_back(auxValve)
 * 			else:
 */
    __pyx_t_12 = ((__pyx_v_i < __pyx_v_nintake) != 0);
    if (__pyx_t_12) {

      /* "Cylinder.pyx":366
 * 
 * 			if(i<nintake):
 * 				intake_valves.push_back(auxValve)             # <<<<<<<<<<<<<<
 * 			else:
 * 				exhaust_valves.push_back(auxValve)
 */
      __pyx_v_intake_valves.push_back(__pyx_v_auxValve);

      /* "Cylinder.pyx":365
 * 			#print "Cd: ", vargs[i]['Cd']
 * 
 * 			if(i<nintake):             # <<<<<<<<<<<<<<
 * 				intake_valves.push_back(auxValve)
 * 			else:
 */
      goto __pyx_L42;
    }

    /* "Cylinder.pyx":368
 * 				intake_valves.push_back(auxValve)
 * 			else:
 * 				exhaust_valves.push_back(auxValve)             # <<<<<<<<<<<<<<
 * 
 * 		ninput = len(kargs['intake_valves'])+len(kargs['exhaust_valves'])
 */
    /*else*/ {
      __pyx_v_exhaust_valves.push_back(__pyx_v_auxValve);
    }
    __pyx_L42:;
  }

  /* "Cylinder.pyx":370
 * 				exhaust_valves.push_back(auxValve)
 * 
 * 		ninput = len(kargs['intake_valves'])+len(kargs['exhaust_valves'])             # <<<<<<<<<<<<<<
 * 		if(kargs['engine_type']==2): ninput += 2
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Cylinder',ninput)
 */
  __pyx_t_18 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_intake_valves); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_7 = PyObject_Length(__pyx_t_18); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_exhaust_valves); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_9 = PyObject_Length(__pyx_t_18); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = PyInt_FromSsize_t((__pyx_t_7 + __pyx_t_9)); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_v_ninput = __pyx_t_18;
  __pyx_t_18 = 0;

  /* "Cylinder.pyx":371
 * 
 * 		ninput = len(kargs['intake_valves'])+len(kargs['exhaust_valves'])
 * 		if(kargs['engine_type']==2): ninput += 2             # <<<<<<<<<<<<<<
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Cylinder',ninput)
 * 
 */
  __pyx_t_18 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_engine_type); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_17 = __Pyx_PyInt_EqObjC(__pyx_t_18, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_17); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (__pyx_t_12) {
    __pyx_t_17 = __Pyx_PyInt_AddObjC(__pyx_v_ninput, __pyx_int_2, 2, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF_SET(__pyx_v_ninput, __pyx_t_17);
    __pyx_t_17 = 0;
  }

  /* "Cylinder.pyx":372
 * 		ninput = len(kargs['intake_valves'])+len(kargs['exhaust_valves'])
 * 		if(kargs['engine_type']==2): ninput += 2
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Cylinder',ninput)             # <<<<<<<<<<<<<<
 * 
 * 		#condiciones para injection
 */
  __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_18);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_18, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_nnod_input, __pyx_n_s_Cylinder, __pyx_v_ninput};
    __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_17);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_nnod_input, __pyx_n_s_Cylinder, __pyx_v_ninput};
    __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_17);
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_nnod_input);
    __Pyx_GIVEREF(__pyx_n_s_nnod_input);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_nnod_input);
    __Pyx_INCREF(__pyx_n_s_Cylinder);
    __Pyx_GIVEREF(__pyx_n_s_Cylinder);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_n_s_Cylinder);
    __Pyx_INCREF(__pyx_v_ninput);
    __Pyx_GIVEREF(__pyx_v_ninput);
    PyTuple_SET_ITEM(__pyx_t_2, 3+__pyx_t_4, __pyx_v_ninput);
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_2, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_17); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_v_nnod_input = __pyx_t_6;

  /* "Cylinder.pyx":376
 * 		#condiciones para injection
 * 		cdef injection injection_data
 * 		injection_data.mfdot_array = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		if(type_ig==1):
 * 			iargs 				    = kargs['injection']
 */
  __pyx_v_injection_data.mfdot_array = std::vector<double>(0);

  /* "Cylinder.pyx":377
 * 		cdef injection injection_data
 * 		injection_data.mfdot_array = doublevec_factory(0)
 * 		if(type_ig==1):             # <<<<<<<<<<<<<<
 * 			iargs 				    = kargs['injection']
 * 			injection_data.pulse		    = assignOptional(iargs,'pulse',2)
 */
  __pyx_t_12 = ((__pyx_v_type_ig == 1) != 0);
  if (__pyx_t_12) {

    /* "Cylinder.pyx":378
 * 		injection_data.mfdot_array = doublevec_factory(0)
 * 		if(type_ig==1):
 * 			iargs 				    = kargs['injection']             # <<<<<<<<<<<<<<
 * 			injection_data.pulse		    = assignOptional(iargs,'pulse',2)
 * 			injection_data.m_inj		    = validatePositive(iargs,'m_inj','Injection-Cylinder')
 */
    __pyx_t_17 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_injection); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_v_iargs = __pyx_t_17;
    __pyx_t_17 = 0;

    /* "Cylinder.pyx":379
 * 		if(type_ig==1):
 * 			iargs 				    = kargs['injection']
 * 			injection_data.pulse		    = assignOptional(iargs,'pulse',2)             # <<<<<<<<<<<<<<
 * 			injection_data.m_inj		    = validatePositive(iargs,'m_inj','Injection-Cylinder')
 * 			injection_data.dtheta_inj	    = validatePositive(iargs,'dtheta_inj','Injection-Cylinder')
 */
    __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_iargs, __pyx_n_s_pulse, __pyx_int_2};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_iargs, __pyx_n_s_pulse, __pyx_int_2};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_iargs);
      __Pyx_GIVEREF(__pyx_v_iargs);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_iargs);
      __Pyx_INCREF(__pyx_n_s_pulse);
      __Pyx_GIVEREF(__pyx_n_s_pulse);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_pulse);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_int_2);
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_5, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_17); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_injection_data.pulse = __pyx_t_4;

    /* "Cylinder.pyx":380
 * 			iargs 				    = kargs['injection']
 * 			injection_data.pulse		    = assignOptional(iargs,'pulse',2)
 * 			injection_data.m_inj		    = validatePositive(iargs,'m_inj','Injection-Cylinder')             # <<<<<<<<<<<<<<
 * 			injection_data.dtheta_inj	    = validatePositive(iargs,'dtheta_inj','Injection-Cylinder')
 * 			injection_data.T_fuel		    = validatePositive(iargs,'T_fuel','Injection-Cylinder')
 */
    __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_iargs, __pyx_n_s_m_inj, __pyx_kp_s_Injection_Cylinder};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_iargs, __pyx_n_s_m_inj, __pyx_kp_s_Injection_Cylinder};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_iargs);
      __Pyx_GIVEREF(__pyx_v_iargs);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_v_iargs);
      __Pyx_INCREF(__pyx_n_s_m_inj);
      __Pyx_GIVEREF(__pyx_n_s_m_inj);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_m_inj);
      __Pyx_INCREF(__pyx_kp_s_Injection_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Injection_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_kp_s_Injection_Cylinder);
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_2, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_injection_data.m_inj = __pyx_t_10;

    /* "Cylinder.pyx":381
 * 			injection_data.pulse		    = assignOptional(iargs,'pulse',2)
 * 			injection_data.m_inj		    = validatePositive(iargs,'m_inj','Injection-Cylinder')
 * 			injection_data.dtheta_inj	    = validatePositive(iargs,'dtheta_inj','Injection-Cylinder')             # <<<<<<<<<<<<<<
 * 			injection_data.T_fuel		    = validatePositive(iargs,'T_fuel','Injection-Cylinder')
 * 			injection_data.theta_inj_ini	    = validatePositive(iargs,'theta_inj_ini','Injection-Cylinder')
 */
    __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_iargs, __pyx_n_s_dtheta_inj, __pyx_kp_s_Injection_Cylinder};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 381, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_iargs, __pyx_n_s_dtheta_inj, __pyx_kp_s_Injection_Cylinder};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 381, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_iargs);
      __Pyx_GIVEREF(__pyx_v_iargs);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_iargs);
      __Pyx_INCREF(__pyx_n_s_dtheta_inj);
      __Pyx_GIVEREF(__pyx_n_s_dtheta_inj);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_dtheta_inj);
      __Pyx_INCREF(__pyx_kp_s_Injection_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Injection_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_kp_s_Injection_Cylinder);
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_5, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_injection_data.dtheta_inj = __pyx_t_10;

    /* "Cylinder.pyx":382
 * 			injection_data.m_inj		    = validatePositive(iargs,'m_inj','Injection-Cylinder')
 * 			injection_data.dtheta_inj	    = validatePositive(iargs,'dtheta_inj','Injection-Cylinder')
 * 			injection_data.T_fuel		    = validatePositive(iargs,'T_fuel','Injection-Cylinder')             # <<<<<<<<<<<<<<
 * 			injection_data.theta_inj_ini	    = validatePositive(iargs,'theta_inj_ini','Injection-Cylinder')
 * 			injection_data.theta_id		    = validatePositive(iargs,'theta_id','Injection-Cylinder',0.0)
 */
    __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_iargs, __pyx_n_s_T_fuel, __pyx_kp_s_Injection_Cylinder};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_iargs, __pyx_n_s_T_fuel, __pyx_kp_s_Injection_Cylinder};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_iargs);
      __Pyx_GIVEREF(__pyx_v_iargs);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_v_iargs);
      __Pyx_INCREF(__pyx_n_s_T_fuel);
      __Pyx_GIVEREF(__pyx_n_s_T_fuel);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_T_fuel);
      __Pyx_INCREF(__pyx_kp_s_Injection_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Injection_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_kp_s_Injection_Cylinder);
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_2, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_injection_data.T_fuel = __pyx_t_10;

    /* "Cylinder.pyx":383
 * 			injection_data.dtheta_inj	    = validatePositive(iargs,'dtheta_inj','Injection-Cylinder')
 * 			injection_data.T_fuel		    = validatePositive(iargs,'T_fuel','Injection-Cylinder')
 * 			injection_data.theta_inj_ini	    = validatePositive(iargs,'theta_inj_ini','Injection-Cylinder')             # <<<<<<<<<<<<<<
 * 			injection_data.theta_id		    = validatePositive(iargs,'theta_id','Injection-Cylinder',0.0)
 * 			injection_data.ignition_delay_model = validateInList(iargs,'ignition_delay_model','Injection-Cylinder',[0,1,2],0)
 */
    __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_iargs, __pyx_n_s_theta_inj_ini, __pyx_kp_s_Injection_Cylinder};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 383, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_iargs, __pyx_n_s_theta_inj_ini, __pyx_kp_s_Injection_Cylinder};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 383, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_iargs);
      __Pyx_GIVEREF(__pyx_v_iargs);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_iargs);
      __Pyx_INCREF(__pyx_n_s_theta_inj_ini);
      __Pyx_GIVEREF(__pyx_n_s_theta_inj_ini);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_theta_inj_ini);
      __Pyx_INCREF(__pyx_kp_s_Injection_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Injection_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_kp_s_Injection_Cylinder);
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_5, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_injection_data.theta_inj_ini = __pyx_t_10;

    /* "Cylinder.pyx":384
 * 			injection_data.T_fuel		    = validatePositive(iargs,'T_fuel','Injection-Cylinder')
 * 			injection_data.theta_inj_ini	    = validatePositive(iargs,'theta_inj_ini','Injection-Cylinder')
 * 			injection_data.theta_id		    = validatePositive(iargs,'theta_id','Injection-Cylinder',0.0)             # <<<<<<<<<<<<<<
 * 			injection_data.ignition_delay_model = validateInList(iargs,'ignition_delay_model','Injection-Cylinder',[0,1,2],0)
 * 			injection_data.integral		    = validatePositive(iargs,'integral','Injection-Cylinder',0.0)
 */
    __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_iargs, __pyx_n_s_theta_id, __pyx_kp_s_Injection_Cylinder, __pyx_float_0_0};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_iargs, __pyx_n_s_theta_id, __pyx_kp_s_Injection_Cylinder, __pyx_float_0_0};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_iargs);
      __Pyx_GIVEREF(__pyx_v_iargs);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_v_iargs);
      __Pyx_INCREF(__pyx_n_s_theta_id);
      __Pyx_GIVEREF(__pyx_n_s_theta_id);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_theta_id);
      __Pyx_INCREF(__pyx_kp_s_Injection_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Injection_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_kp_s_Injection_Cylinder);
      __Pyx_INCREF(__pyx_float_0_0);
      __Pyx_GIVEREF(__pyx_float_0_0);
      PyTuple_SET_ITEM(__pyx_t_2, 3+__pyx_t_4, __pyx_float_0_0);
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_2, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_injection_data.theta_id = __pyx_t_10;

    /* "Cylinder.pyx":385
 * 			injection_data.theta_inj_ini	    = validatePositive(iargs,'theta_inj_ini','Injection-Cylinder')
 * 			injection_data.theta_id		    = validatePositive(iargs,'theta_id','Injection-Cylinder',0.0)
 * 			injection_data.ignition_delay_model = validateInList(iargs,'ignition_delay_model','Injection-Cylinder',[0,1,2],0)             # <<<<<<<<<<<<<<
 * 			injection_data.integral		    = validatePositive(iargs,'integral','Injection-Cylinder',0.0)
 * 			if(injection_data.pulse == 3):
 */
    __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateInList); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_1);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_2, 2, __pyx_int_2);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[6] = {__pyx_t_5, __pyx_v_iargs, __pyx_n_s_ignition_delay_model, __pyx_kp_s_Injection_Cylinder, __pyx_t_2, __pyx_int_0};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 385, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[6] = {__pyx_t_5, __pyx_v_iargs, __pyx_n_s_ignition_delay_model, __pyx_kp_s_Injection_Cylinder, __pyx_t_2, __pyx_int_0};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 385, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(5+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_iargs);
      __Pyx_GIVEREF(__pyx_v_iargs);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_iargs);
      __Pyx_INCREF(__pyx_n_s_ignition_delay_model);
      __Pyx_GIVEREF(__pyx_n_s_ignition_delay_model);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_ignition_delay_model);
      __Pyx_INCREF(__pyx_kp_s_Injection_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Injection_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_kp_s_Injection_Cylinder);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_4, __pyx_t_2);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_4, __pyx_int_0);
      __pyx_t_2 = 0;
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_1, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_17); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_injection_data.ignition_delay_model = __pyx_t_4;

    /* "Cylinder.pyx":386
 * 			injection_data.theta_id		    = validatePositive(iargs,'theta_id','Injection-Cylinder',0.0)
 * 			injection_data.ignition_delay_model = validateInList(iargs,'ignition_delay_model','Injection-Cylinder',[0,1,2],0)
 * 			injection_data.integral		    = validatePositive(iargs,'integral','Injection-Cylinder',0.0)             # <<<<<<<<<<<<<<
 * 			if(injection_data.pulse == 3):
 * 				mfdot = onlyAssert(iargs,'mfdot_array','Injection-Cylinder')
 */
    __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[5] = {__pyx_t_1, __pyx_v_iargs, __pyx_n_s_integral, __pyx_kp_s_Injection_Cylinder, __pyx_float_0_0};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 386, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[5] = {__pyx_t_1, __pyx_v_iargs, __pyx_n_s_integral, __pyx_kp_s_Injection_Cylinder, __pyx_float_0_0};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 386, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_iargs);
      __Pyx_GIVEREF(__pyx_v_iargs);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_v_iargs);
      __Pyx_INCREF(__pyx_n_s_integral);
      __Pyx_GIVEREF(__pyx_n_s_integral);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_integral);
      __Pyx_INCREF(__pyx_kp_s_Injection_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Injection_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_kp_s_Injection_Cylinder);
      __Pyx_INCREF(__pyx_float_0_0);
      __Pyx_GIVEREF(__pyx_float_0_0);
      PyTuple_SET_ITEM(__pyx_t_2, 3+__pyx_t_4, __pyx_float_0_0);
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_2, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_injection_data.integral = __pyx_t_10;

    /* "Cylinder.pyx":387
 * 			injection_data.ignition_delay_model = validateInList(iargs,'ignition_delay_model','Injection-Cylinder',[0,1,2],0)
 * 			injection_data.integral		    = validatePositive(iargs,'integral','Injection-Cylinder',0.0)
 * 			if(injection_data.pulse == 3):             # <<<<<<<<<<<<<<
 * 				mfdot = onlyAssert(iargs,'mfdot_array','Injection-Cylinder')
 * 				#for i in range(len(mfdot[0])): #[key1,value1,key2,value2,....,keyN,valueN]
 */
    __pyx_t_12 = ((__pyx_v_injection_data.pulse == 3) != 0);
    if (__pyx_t_12) {

      /* "Cylinder.pyx":388
 * 			injection_data.integral		    = validatePositive(iargs,'integral','Injection-Cylinder',0.0)
 * 			if(injection_data.pulse == 3):
 * 				mfdot = onlyAssert(iargs,'mfdot_array','Injection-Cylinder')             # <<<<<<<<<<<<<<
 * 				#for i in range(len(mfdot[0])): #[key1,value1,key2,value2,....,keyN,valueN]
 * 				#	injection_data.mfdot_array.push_back(mfdot[0][i])
 */
      __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_18);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_18, function);
          __pyx_t_4 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_18)) {
        PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_iargs, __pyx_n_s_mfdot_array, __pyx_kp_s_Injection_Cylinder};
        __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 388, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_17);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
        PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_iargs, __pyx_n_s_mfdot_array, __pyx_kp_s_Injection_Cylinder};
        __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 388, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_17);
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (__pyx_t_2) {
          __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
        }
        __Pyx_INCREF(__pyx_v_iargs);
        __Pyx_GIVEREF(__pyx_v_iargs);
        PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_iargs);
        __Pyx_INCREF(__pyx_n_s_mfdot_array);
        __Pyx_GIVEREF(__pyx_n_s_mfdot_array);
        PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_mfdot_array);
        __Pyx_INCREF(__pyx_kp_s_Injection_Cylinder);
        __Pyx_GIVEREF(__pyx_kp_s_Injection_Cylinder);
        PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_kp_s_Injection_Cylinder);
        __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_1, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 388, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_v_mfdot = __pyx_t_17;
      __pyx_t_17 = 0;

      /* "Cylinder.pyx":392
 * 				#	injection_data.mfdot_array.push_back(mfdot[0][i])
 * 				#	injection_data.mfdot_array.push_back(mfdot[1][i])
 * 				for i in range(len(mfdot)): #[key1,value1,key2,value2,....,keyN,valueN]             # <<<<<<<<<<<<<<
 * 					injection_data.mfdot_array.push_back(mfdot[i][0])
 * 					injection_data.mfdot_array.push_back(mfdot[i][1])
 */
      __pyx_t_9 = PyObject_Length(__pyx_v_mfdot); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 392, __pyx_L1_error)
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_9; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "Cylinder.pyx":393
 * 				#	injection_data.mfdot_array.push_back(mfdot[1][i])
 * 				for i in range(len(mfdot)): #[key1,value1,key2,value2,....,keyN,valueN]
 * 					injection_data.mfdot_array.push_back(mfdot[i][0])             # <<<<<<<<<<<<<<
 * 					injection_data.mfdot_array.push_back(mfdot[i][1])
 * 
 */
        __pyx_t_17 = __Pyx_GetItemInt(__pyx_v_mfdot, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 393, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_18 = __Pyx_GetItemInt(__pyx_t_17, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 393, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_18); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_v_injection_data.mfdot_array.push_back(__pyx_t_10);

        /* "Cylinder.pyx":394
 * 				for i in range(len(mfdot)): #[key1,value1,key2,value2,....,keyN,valueN]
 * 					injection_data.mfdot_array.push_back(mfdot[i][0])
 * 					injection_data.mfdot_array.push_back(mfdot[i][1])             # <<<<<<<<<<<<<<
 * 
 * 		#condiciones para combustion
 */
        __pyx_t_18 = __Pyx_GetItemInt(__pyx_v_mfdot, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_18, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 394, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_v_injection_data.mfdot_array.push_back(__pyx_t_10);
      }

      /* "Cylinder.pyx":387
 * 			injection_data.ignition_delay_model = validateInList(iargs,'ignition_delay_model','Injection-Cylinder',[0,1,2],0)
 * 			injection_data.integral		    = validatePositive(iargs,'integral','Injection-Cylinder',0.0)
 * 			if(injection_data.pulse == 3):             # <<<<<<<<<<<<<<
 * 				mfdot = onlyAssert(iargs,'mfdot_array','Injection-Cylinder')
 * 				#for i in range(len(mfdot[0])): #[key1,value1,key2,value2,....,keyN,valueN]
 */
    }

    /* "Cylinder.pyx":377
 * 		cdef injection injection_data
 * 		injection_data.mfdot_array = doublevec_factory(0)
 * 		if(type_ig==1):             # <<<<<<<<<<<<<<
 * 			iargs 				    = kargs['injection']
 * 			injection_data.pulse		    = assignOptional(iargs,'pulse',2)
 */
  }

  /* "Cylinder.pyx":398
 * 		#condiciones para combustion
 * 		cdef combustion combustion_data
 * 		cargs 			    = kargs['combustion']             # <<<<<<<<<<<<<<
 * 		combustion_data.xbdot_array = doublevec_factory(0)
 * 		combustion_data.dtheta_comb = validatePositive(cargs,'dtheta_comb','Combustion-Cylinder')
 */
  __pyx_t_17 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_combustion); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_v_cargs = __pyx_t_17;
  __pyx_t_17 = 0;

  /* "Cylinder.pyx":399
 * 		cdef combustion combustion_data
 * 		cargs 			    = kargs['combustion']
 * 		combustion_data.xbdot_array = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		combustion_data.dtheta_comb = validatePositive(cargs,'dtheta_comb','Combustion-Cylinder')
 * 
 */
  __pyx_v_combustion_data.xbdot_array = std::vector<double>(0);

  /* "Cylinder.pyx":400
 * 		cargs 			    = kargs['combustion']
 * 		combustion_data.xbdot_array = doublevec_factory(0)
 * 		combustion_data.dtheta_comb = validatePositive(cargs,'dtheta_comb','Combustion-Cylinder')             # <<<<<<<<<<<<<<
 * 
 * 		if(type_ig==0):
 */
  __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_18);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_18, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_cargs, __pyx_n_s_dtheta_comb, __pyx_kp_s_Combustion_Cylinder};
    __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_17);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_cargs, __pyx_n_s_dtheta_comb, __pyx_kp_s_Combustion_Cylinder};
    __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_17);
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_cargs);
    __Pyx_GIVEREF(__pyx_v_cargs);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_v_cargs);
    __Pyx_INCREF(__pyx_n_s_dtheta_comb);
    __Pyx_GIVEREF(__pyx_n_s_dtheta_comb);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_dtheta_comb);
    __Pyx_INCREF(__pyx_kp_s_Combustion_Cylinder);
    __Pyx_GIVEREF(__pyx_kp_s_Combustion_Cylinder);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_kp_s_Combustion_Cylinder);
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_2, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_v_combustion_data.dtheta_comb = __pyx_t_10;

  /* "Cylinder.pyx":402
 * 		combustion_data.dtheta_comb = validatePositive(cargs,'dtheta_comb','Combustion-Cylinder')
 * 
 * 		if(type_ig==0):             # <<<<<<<<<<<<<<
 * 			combustion_data.theta_ig_0  = validatePositive(cargs,'theta_ig_0','Combustion-Cylinder')
 * 			combustion_data.phi = onlyAssert(cargs,'phi','Combustion-Cylinder')
 */
  __pyx_t_12 = ((__pyx_v_type_ig == 0) != 0);
  if (__pyx_t_12) {

    /* "Cylinder.pyx":403
 * 
 * 		if(type_ig==0):
 * 			combustion_data.theta_ig_0  = validatePositive(cargs,'theta_ig_0','Combustion-Cylinder')             # <<<<<<<<<<<<<<
 * 			combustion_data.phi = onlyAssert(cargs,'phi','Combustion-Cylinder')
 * 		else:
 */
    __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_cargs, __pyx_n_s_theta_ig_0, __pyx_kp_s_Combustion_Cylinder};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 403, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_cargs, __pyx_n_s_theta_ig_0, __pyx_kp_s_Combustion_Cylinder};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 403, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_cargs);
      __Pyx_GIVEREF(__pyx_v_cargs);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_cargs);
      __Pyx_INCREF(__pyx_n_s_theta_ig_0);
      __Pyx_GIVEREF(__pyx_n_s_theta_ig_0);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_theta_ig_0);
      __Pyx_INCREF(__pyx_kp_s_Combustion_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Combustion_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_kp_s_Combustion_Cylinder);
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_1, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_combustion_data.theta_ig_0 = __pyx_t_10;

    /* "Cylinder.pyx":404
 * 		if(type_ig==0):
 * 			combustion_data.theta_ig_0  = validatePositive(cargs,'theta_ig_0','Combustion-Cylinder')
 * 			combustion_data.phi = onlyAssert(cargs,'phi','Combustion-Cylinder')             # <<<<<<<<<<<<<<
 * 		else:
 * 			combustion_data.phi = 0.0
 */
    __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_cargs, __pyx_n_s_phi, __pyx_kp_s_Combustion_Cylinder};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_cargs, __pyx_n_s_phi, __pyx_kp_s_Combustion_Cylinder};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_cargs);
      __Pyx_GIVEREF(__pyx_v_cargs);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_v_cargs);
      __Pyx_INCREF(__pyx_n_s_phi);
      __Pyx_GIVEREF(__pyx_n_s_phi);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_phi);
      __Pyx_INCREF(__pyx_kp_s_Combustion_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Combustion_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_kp_s_Combustion_Cylinder);
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_2, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_combustion_data.phi = __pyx_t_10;

    /* "Cylinder.pyx":402
 * 		combustion_data.dtheta_comb = validatePositive(cargs,'dtheta_comb','Combustion-Cylinder')
 * 
 * 		if(type_ig==0):             # <<<<<<<<<<<<<<
 * 			combustion_data.theta_ig_0  = validatePositive(cargs,'theta_ig_0','Combustion-Cylinder')
 * 			combustion_data.phi = onlyAssert(cargs,'phi','Combustion-Cylinder')
 */
    goto __pyx_L48;
  }

  /* "Cylinder.pyx":406
 * 			combustion_data.phi = onlyAssert(cargs,'phi','Combustion-Cylinder')
 * 		else:
 * 			combustion_data.phi = 0.0             # <<<<<<<<<<<<<<
 * 
 * 		combustion_data.phi_ig	= assignOptional(cargs,'phi_ig',0.0) #como asignar internamente??
 */
  /*else*/ {
    __pyx_v_combustion_data.phi = 0.0;
  }
  __pyx_L48:;

  /* "Cylinder.pyx":408
 * 			combustion_data.phi = 0.0
 * 
 * 		combustion_data.phi_ig	= assignOptional(cargs,'phi_ig',0.0) #como asignar internamente??             # <<<<<<<<<<<<<<
 * 		combustion_data.a_wiebe	= assignOptional(cargs,'a_wiebe',6.02)
 * 		combustion_data.m_wiebe	= assignOptional(cargs,'m_wiebe',1.64)
 */
  __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_18);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_18, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_cargs, __pyx_n_s_phi_ig, __pyx_float_0_0};
    __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_17);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_cargs, __pyx_n_s_phi_ig, __pyx_float_0_0};
    __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_17);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_cargs);
    __Pyx_GIVEREF(__pyx_v_cargs);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_cargs);
    __Pyx_INCREF(__pyx_n_s_phi_ig);
    __Pyx_GIVEREF(__pyx_n_s_phi_ig);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_phi_ig);
    __Pyx_INCREF(__pyx_float_0_0);
    __Pyx_GIVEREF(__pyx_float_0_0);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_float_0_0);
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_1, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_v_combustion_data.phi_ig = __pyx_t_10;

  /* "Cylinder.pyx":409
 * 
 * 		combustion_data.phi_ig	= assignOptional(cargs,'phi_ig',0.0) #como asignar internamente??
 * 		combustion_data.a_wiebe	= assignOptional(cargs,'a_wiebe',6.02)             # <<<<<<<<<<<<<<
 * 		combustion_data.m_wiebe	= assignOptional(cargs,'m_wiebe',1.64)
 * 
 */
  __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_18);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_18, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_cargs, __pyx_n_s_a_wiebe, __pyx_float_6_02};
    __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_17);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_cargs, __pyx_n_s_a_wiebe, __pyx_float_6_02};
    __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_17);
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_cargs);
    __Pyx_GIVEREF(__pyx_v_cargs);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_v_cargs);
    __Pyx_INCREF(__pyx_n_s_a_wiebe);
    __Pyx_GIVEREF(__pyx_n_s_a_wiebe);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_a_wiebe);
    __Pyx_INCREF(__pyx_float_6_02);
    __Pyx_GIVEREF(__pyx_float_6_02);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_float_6_02);
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_2, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_v_combustion_data.a_wiebe = __pyx_t_10;

  /* "Cylinder.pyx":410
 * 		combustion_data.phi_ig	= assignOptional(cargs,'phi_ig',0.0) #como asignar internamente??
 * 		combustion_data.a_wiebe	= assignOptional(cargs,'a_wiebe',6.02)
 * 		combustion_data.m_wiebe	= assignOptional(cargs,'m_wiebe',1.64)             # <<<<<<<<<<<<<<
 * 
 * 		if(type_ig==1):
 */
  __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_18);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_18, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_cargs, __pyx_n_s_m_wiebe, __pyx_float_1_64};
    __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 410, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_17);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_cargs, __pyx_n_s_m_wiebe, __pyx_float_1_64};
    __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 410, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_17);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_cargs);
    __Pyx_GIVEREF(__pyx_v_cargs);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_cargs);
    __Pyx_INCREF(__pyx_n_s_m_wiebe);
    __Pyx_GIVEREF(__pyx_n_s_m_wiebe);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_m_wiebe);
    __Pyx_INCREF(__pyx_float_1_64);
    __Pyx_GIVEREF(__pyx_float_1_64);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_float_1_64);
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_1, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_v_combustion_data.m_wiebe = __pyx_t_10;

  /* "Cylinder.pyx":412
 * 		combustion_data.m_wiebe	= assignOptional(cargs,'m_wiebe',1.64)
 * 
 * 		if(type_ig==1):             # <<<<<<<<<<<<<<
 * 			combustion_data.combustion_model = validateInList(cargs,'combustion_model','Combustion-Cylinder',[0,1,2,3,4],1)
 * 		else:
 */
  __pyx_t_12 = ((__pyx_v_type_ig == 1) != 0);
  if (__pyx_t_12) {

    /* "Cylinder.pyx":413
 * 
 * 		if(type_ig==1):
 * 			combustion_data.combustion_model = validateInList(cargs,'combustion_model','Combustion-Cylinder',[0,1,2,3,4],1)             # <<<<<<<<<<<<<<
 * 		else:
 * 			combustion_data.combustion_model = validateInList(cargs,'combustion_model','Combustion-Cylinder',[0,1,2,3,4],4)
 */
    __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateInList); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_1);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_2);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_3);
    __Pyx_INCREF(__pyx_int_4);
    __Pyx_GIVEREF(__pyx_int_4);
    PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_4);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[6] = {__pyx_t_2, __pyx_v_cargs, __pyx_n_s_combustion_model, __pyx_kp_s_Combustion_Cylinder, __pyx_t_1, __pyx_int_1};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 413, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[6] = {__pyx_t_2, __pyx_v_cargs, __pyx_n_s_combustion_model, __pyx_kp_s_Combustion_Cylinder, __pyx_t_1, __pyx_int_1};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 413, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(5+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 413, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_cargs);
      __Pyx_GIVEREF(__pyx_v_cargs);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_cargs);
      __Pyx_INCREF(__pyx_n_s_combustion_model);
      __Pyx_GIVEREF(__pyx_n_s_combustion_model);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_combustion_model);
      __Pyx_INCREF(__pyx_kp_s_Combustion_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Combustion_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_kp_s_Combustion_Cylinder);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_t_1);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_int_1);
      __pyx_t_1 = 0;
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_5, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 413, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_17); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_combustion_data.combustion_model = __pyx_t_4;

    /* "Cylinder.pyx":412
 * 		combustion_data.m_wiebe	= assignOptional(cargs,'m_wiebe',1.64)
 * 
 * 		if(type_ig==1):             # <<<<<<<<<<<<<<
 * 			combustion_data.combustion_model = validateInList(cargs,'combustion_model','Combustion-Cylinder',[0,1,2,3,4],1)
 * 		else:
 */
    goto __pyx_L49;
  }

  /* "Cylinder.pyx":415
 * 			combustion_data.combustion_model = validateInList(cargs,'combustion_model','Combustion-Cylinder',[0,1,2,3,4],1)
 * 		else:
 * 			combustion_data.combustion_model = validateInList(cargs,'combustion_model','Combustion-Cylinder',[0,1,2,3,4],4)             # <<<<<<<<<<<<<<
 * 
 * 		combustion_data.start_comb	= assignOptional(cargs,'start_comb',1)
 */
  /*else*/ {
    __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateInList); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_5 = PyList_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_int_1);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_5, 2, __pyx_int_2);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyList_SET_ITEM(__pyx_t_5, 3, __pyx_int_3);
    __Pyx_INCREF(__pyx_int_4);
    __Pyx_GIVEREF(__pyx_int_4);
    PyList_SET_ITEM(__pyx_t_5, 4, __pyx_int_4);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[6] = {__pyx_t_1, __pyx_v_cargs, __pyx_n_s_combustion_model, __pyx_kp_s_Combustion_Cylinder, __pyx_t_5, __pyx_int_4};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 415, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[6] = {__pyx_t_1, __pyx_v_cargs, __pyx_n_s_combustion_model, __pyx_kp_s_Combustion_Cylinder, __pyx_t_5, __pyx_int_4};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 415, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(5+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_cargs);
      __Pyx_GIVEREF(__pyx_v_cargs);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_v_cargs);
      __Pyx_INCREF(__pyx_n_s_combustion_model);
      __Pyx_GIVEREF(__pyx_n_s_combustion_model);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_combustion_model);
      __Pyx_INCREF(__pyx_kp_s_Combustion_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Combustion_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_kp_s_Combustion_Cylinder);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_2, 3+__pyx_t_4, __pyx_t_5);
      __Pyx_INCREF(__pyx_int_4);
      __Pyx_GIVEREF(__pyx_int_4);
      PyTuple_SET_ITEM(__pyx_t_2, 4+__pyx_t_4, __pyx_int_4);
      __pyx_t_5 = 0;
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_2, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 415, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_17); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_combustion_data.combustion_model = __pyx_t_4;
  }
  __pyx_L49:;

  /* "Cylinder.pyx":417
 * 			combustion_data.combustion_model = validateInList(cargs,'combustion_model','Combustion-Cylinder',[0,1,2,3,4],4)
 * 
 * 		combustion_data.start_comb	= assignOptional(cargs,'start_comb',1)             # <<<<<<<<<<<<<<
 * 		if(combustion_data.combustion_model==0):
 * 			xbdot = onlyAssert(cargs,'xbdot_array','Combustion-Cylinder')
 */
  __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_18);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_18, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_cargs, __pyx_n_s_start_comb, __pyx_int_1};
    __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_17);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_cargs, __pyx_n_s_start_comb, __pyx_int_1};
    __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_17);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_cargs);
    __Pyx_GIVEREF(__pyx_v_cargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_cargs);
    __Pyx_INCREF(__pyx_n_s_start_comb);
    __Pyx_GIVEREF(__pyx_n_s_start_comb);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_start_comb);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_int_1);
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_5, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_17); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_v_combustion_data.start_comb = __pyx_t_4;

  /* "Cylinder.pyx":418
 * 
 * 		combustion_data.start_comb	= assignOptional(cargs,'start_comb',1)
 * 		if(combustion_data.combustion_model==0):             # <<<<<<<<<<<<<<
 * 			xbdot = onlyAssert(cargs,'xbdot_array','Combustion-Cylinder')
 * 			#for i in range(len(xbdot[0])): #[key1,value1,key2,value2,....,keyN,valueN]
 */
  __pyx_t_12 = ((__pyx_v_combustion_data.combustion_model == 0) != 0);
  if (__pyx_t_12) {

    /* "Cylinder.pyx":419
 * 		combustion_data.start_comb	= assignOptional(cargs,'start_comb',1)
 * 		if(combustion_data.combustion_model==0):
 * 			xbdot = onlyAssert(cargs,'xbdot_array','Combustion-Cylinder')             # <<<<<<<<<<<<<<
 * 			#for i in range(len(xbdot[0])): #[key1,value1,key2,value2,....,keyN,valueN]
 * 			#	combustion_data.xbdot_array.push_back(xbdot[0][i])
 */
    __pyx_t_18 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_cargs, __pyx_n_s_xbdot_array, __pyx_kp_s_Combustion_Cylinder};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_cargs, __pyx_n_s_xbdot_array, __pyx_kp_s_Combustion_Cylinder};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_17);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_cargs);
      __Pyx_GIVEREF(__pyx_v_cargs);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_v_cargs);
      __Pyx_INCREF(__pyx_n_s_xbdot_array);
      __Pyx_GIVEREF(__pyx_n_s_xbdot_array);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_xbdot_array);
      __Pyx_INCREF(__pyx_kp_s_Combustion_Cylinder);
      __Pyx_GIVEREF(__pyx_kp_s_Combustion_Cylinder);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_kp_s_Combustion_Cylinder);
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_2, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_v_xbdot = __pyx_t_17;
    __pyx_t_17 = 0;

    /* "Cylinder.pyx":423
 * 			#	combustion_data.xbdot_array.push_back(xbdot[0][i])
 * 			#	combustion_data.xbdot_array.push_back(xbdot[1][i])
 * 			for i in range(len(xbdot)): #[key1,value1,key2,value2,....,keyN,valueN]             # <<<<<<<<<<<<<<
 * 				combustion_data.xbdot_array.push_back(xbdot[i][0])
 * 				combustion_data.xbdot_array.push_back(xbdot[i][1])
 */
    __pyx_t_9 = PyObject_Length(__pyx_v_xbdot); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 423, __pyx_L1_error)
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_9; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "Cylinder.pyx":424
 * 			#	combustion_data.xbdot_array.push_back(xbdot[1][i])
 * 			for i in range(len(xbdot)): #[key1,value1,key2,value2,....,keyN,valueN]
 * 				combustion_data.xbdot_array.push_back(xbdot[i][0])             # <<<<<<<<<<<<<<
 * 				combustion_data.xbdot_array.push_back(xbdot[i][1])
 * 
 */
      __pyx_t_17 = __Pyx_GetItemInt(__pyx_v_xbdot, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 424, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_18 = __Pyx_GetItemInt(__pyx_t_17, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 424, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_18); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 424, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_v_combustion_data.xbdot_array.push_back(__pyx_t_10);

      /* "Cylinder.pyx":425
 * 			for i in range(len(xbdot)): #[key1,value1,key2,value2,....,keyN,valueN]
 * 				combustion_data.xbdot_array.push_back(xbdot[i][0])
 * 				combustion_data.xbdot_array.push_back(xbdot[i][1])             # <<<<<<<<<<<<<<
 * 
 * 		#instancio la clase
 */
      __pyx_t_18 = __Pyx_GetItemInt(__pyx_v_xbdot, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_18, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_17); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_v_combustion_data.xbdot_array.push_back(__pyx_t_10);
    }

    /* "Cylinder.pyx":418
 * 
 * 		combustion_data.start_comb	= assignOptional(cargs,'start_comb',1)
 * 		if(combustion_data.combustion_model==0):             # <<<<<<<<<<<<<<
 * 			xbdot = onlyAssert(cargs,'xbdot_array','Combustion-Cylinder')
 * 			#for i in range(len(xbdot[0])): #[key1,value1,key2,value2,....,keyN,valueN]
 */
  }

  /* "Cylinder.pyx":428
 * 
 * 		#instancio la clase
 * 		self.thisptr = new_Cylinder(nnod, ndof, nnod_input, implicit, state_ini, histo, label, Bore, crank_radius,             # <<<<<<<<<<<<<<
 * 					    Vol_clearance, rod_length, head_chamber_area, piston_area, theta_0,
 * 					    delta_ca, twall, prop, U_crevice, data_crevice, mass_C, model_ht,
 */
  __pyx_v_self->thisptr = new Cylinder(__pyx_v_nnod, __pyx_v_ndof, __pyx_v_nnod_input, __pyx_v_implicit, __pyx_v_state_ini, __pyx_v_histo, __pyx_v_label, __pyx_v_Bore, __pyx_v_crank_radius, __pyx_v_Vol_clearance, __pyx_v_rod_length, __pyx_v_head_chamber_area, __pyx_v_piston_area, __pyx_v_theta_0, __pyx_v_delta_ca, __pyx_v_twall, __pyx_v_prop, __pyx_v_U_crevice, __pyx_v_data_crevice, __pyx_v_mass_C, __pyx_v_model_ht, __pyx_v_factor_ht, __pyx_v_scavenge, __pyx_v_scavenge_type, __pyx_v_type_ig, __pyx_v_full_implicit, __pyx_v_fuel_data, __pyx_v_combustion_data, __pyx_v_injection_data, __pyx_v_intake_valves, __pyx_v_exhaust_valves, __pyx_v_scavenge_data, __pyx_v_extras, __pyx_v_species_model, __pyx_v_nvanes, __pyx_v_major_radius, __pyx_v_minor_radius, __pyx_v_chamber_heigh);

  /* "Cylinder.pyx":141
 * 	cdef c_Cylinder *thisptr
 * 
 * 	def __cinit__(self, **kargs):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nnod = validatePositive(kargs,'nnod','Cylinder')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("simCythonCPP.Cylinder.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_vargs);
  __Pyx_XDECREF(__pyx_v_fargs);
  __Pyx_XDECREF(__pyx_v_alpha);
  __Pyx_XDECREF(__pyx_v_beta);
  __Pyx_XDECREF(__pyx_v_gamma);
  __Pyx_XDECREF(__pyx_v_delta);
  __Pyx_XDECREF(__pyx_v_Afuel);
  __Pyx_XDECREF(__pyx_v_Q_LHV);
  __Pyx_XDECREF(__pyx_v_h_vap);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_ninput);
  __Pyx_XDECREF(__pyx_v_iargs);
  __Pyx_XDECREF(__pyx_v_mfdot);
  __Pyx_XDECREF(__pyx_v_cargs);
  __Pyx_XDECREF(__pyx_v_xbdot);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Cylinder.pyx":436
 * 					    chamber_heigh)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del_Cylinder(self.thisptr)
 */

/* Python wrapper */
static void __pyx_pw_12simCythonCPP_8Cylinder_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_12simCythonCPP_8Cylinder_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_12simCythonCPP_8Cylinder_2__dealloc__(((struct __pyx_obj_12simCythonCPP_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_12simCythonCPP_8Cylinder_2__dealloc__(struct __pyx_obj_12simCythonCPP_Cylinder *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "Cylinder.pyx":437
 * 
 * 	def __dealloc__(self):
 * 		del_Cylinder(self.thisptr)             # <<<<<<<<<<<<<<
 */
  delete(__pyx_v_self->thisptr);

  /* "Cylinder.pyx":436
 * 					    chamber_heigh)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del_Cylinder(self.thisptr)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Junction.pyx":47
 * 	cdef c_Junction *thisptr
 * 
 * 	def __cinit__(self, **kargs):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Junction')
 */

/* Python wrapper */
static int __pyx_pw_12simCythonCPP_8Junction_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_12simCythonCPP_8Junction_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kargs);
  __pyx_r = __pyx_pf_12simCythonCPP_8Junction___cinit__(((struct __pyx_obj_12simCythonCPP_Junction *)__pyx_v_self), __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_12simCythonCPP_8Junction___cinit__(struct __pyx_obj_12simCythonCPP_Junction *__pyx_v_self, PyObject *__pyx_v_kargs) {
  unsigned int __pyx_v_nnod;
  unsigned int __pyx_v_ndof;
  unsigned int __pyx_v_nnod_input;
  int __pyx_v_implicit;
  std::vector<double> __pyx_v_state_ini;
  Py_ssize_t __pyx_v_i;
  unsigned int __pyx_v_j;
  std::vector<int> __pyx_v_histo;
  PyObject *__pyx_v_s = NULL;
  char *__pyx_v_label;
  int __pyx_v_modelo_junc;
  std::vector<int> __pyx_v_type_end;
  std::vector<int> __pyx_v_node2tube;
  int __pyx_v_type;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  unsigned int __pyx_t_9;
  unsigned int __pyx_t_10;
  double __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  char *__pyx_t_15;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "Junction.pyx":49
 * 	def __cinit__(self, **kargs):
 * 
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Junction')             # <<<<<<<<<<<<<<
 * 		cdef unsigned int ndof 	     = validatePositive(kargs,'ndof','Junction')
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Junction', nnod)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_nnod, __pyx_n_s_Junction};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 49, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_nnod, __pyx_n_s_Junction};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 49, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_nnod);
    __Pyx_GIVEREF(__pyx_n_s_nnod);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_nnod);
    __Pyx_INCREF(__pyx_n_s_Junction);
    __Pyx_GIVEREF(__pyx_n_s_Junction);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Junction);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(2, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nnod = __pyx_t_6;

  /* "Junction.pyx":50
 * 
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Junction')
 * 		cdef unsigned int ndof 	     = validatePositive(kargs,'ndof','Junction')             # <<<<<<<<<<<<<<
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Junction', nnod)
 * 		kargs['implicit']	     = assignOptional(kargs,'implicit',1)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_ndof, __pyx_n_s_Junction};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 50, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_ndof, __pyx_n_s_Junction};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 50, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_ndof);
    __Pyx_GIVEREF(__pyx_n_s_ndof);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_ndof);
    __Pyx_INCREF(__pyx_n_s_Junction);
    __Pyx_GIVEREF(__pyx_n_s_Junction);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Junction);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(2, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ndof = __pyx_t_6;

  /* "Junction.pyx":51
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Junction')
 * 		cdef unsigned int ndof 	     = validatePositive(kargs,'ndof','Junction')
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Junction', nnod)             # <<<<<<<<<<<<<<
 * 		kargs['implicit']	     = assignOptional(kargs,'implicit',1)
 * 		cdef int implicit 	     = boolean(kargs,'implicit','Junction')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nnod); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_nnod_input, __pyx_n_s_Junction, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 51, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_nnod_input, __pyx_n_s_Junction, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 51, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_nnod_input);
    __Pyx_GIVEREF(__pyx_n_s_nnod_input);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_4, __pyx_n_s_nnod_input);
    __Pyx_INCREF(__pyx_n_s_Junction);
    __Pyx_GIVEREF(__pyx_n_s_Junction);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_4, __pyx_n_s_Junction);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 3+__pyx_t_4, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(2, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nnod_input = __pyx_t_6;

  /* "Junction.pyx":52
 * 		cdef unsigned int ndof 	     = validatePositive(kargs,'ndof','Junction')
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Junction', nnod)
 * 		kargs['implicit']	     = assignOptional(kargs,'implicit',1)             # <<<<<<<<<<<<<<
 * 		cdef int implicit 	     = boolean(kargs,'implicit','Junction')
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 52, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 52, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_implicit);
    __Pyx_GIVEREF(__pyx_n_s_implicit);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_implicit);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_int_1);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_kargs, __pyx_n_s_implicit, __pyx_t_1) < 0)) __PYX_ERR(2, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Junction.pyx":53
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Junction', nnod)
 * 		kargs['implicit']	     = assignOptional(kargs,'implicit',1)
 * 		cdef int implicit 	     = boolean(kargs,'implicit','Junction')             # <<<<<<<<<<<<<<
 * 
 * 		onlyAssert(kargs,'state_ini','Junction')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_boolean); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_n_s_Junction};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 53, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_n_s_Junction};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 53, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_implicit);
    __Pyx_GIVEREF(__pyx_n_s_implicit);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_4, __pyx_n_s_implicit);
    __Pyx_INCREF(__pyx_n_s_Junction);
    __Pyx_GIVEREF(__pyx_n_s_Junction);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_4, __pyx_n_s_Junction);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_implicit = __pyx_t_4;

  /* "Junction.pyx":55
 * 		cdef int implicit 	     = boolean(kargs,'implicit','Junction')
 * 
 * 		onlyAssert(kargs,'state_ini','Junction')             # <<<<<<<<<<<<<<
 * 		cdef doublevec state_ini = doublevec_factory(0)
 * 		for i in range(nnod):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_kargs, __pyx_n_s_state_ini, __pyx_n_s_Junction};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 55, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_kargs, __pyx_n_s_state_ini, __pyx_n_s_Junction};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 55, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_state_ini);
    __Pyx_GIVEREF(__pyx_n_s_state_ini);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_state_ini);
    __Pyx_INCREF(__pyx_n_s_Junction);
    __Pyx_GIVEREF(__pyx_n_s_Junction);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Junction);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Junction.pyx":56
 * 
 * 		onlyAssert(kargs,'state_ini','Junction')
 * 		cdef doublevec state_ini = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(nnod):
 * 			for j in range(ndof):
 */
  __pyx_v_state_ini = std::vector<double>(0);

  /* "Junction.pyx":57
 * 		onlyAssert(kargs,'state_ini','Junction')
 * 		cdef doublevec state_ini = doublevec_factory(0)
 * 		for i in range(nnod):             # <<<<<<<<<<<<<<
 * 			for j in range(ndof):
 * 				state_ini.push_back(kargs['state_ini'][i][j])
 */
  __pyx_t_6 = __pyx_v_nnod;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_6; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "Junction.pyx":58
 * 		cdef doublevec state_ini = doublevec_factory(0)
 * 		for i in range(nnod):
 * 			for j in range(ndof):             # <<<<<<<<<<<<<<
 * 				state_ini.push_back(kargs['state_ini'][i][j])
 * 
 */
    __pyx_t_9 = __pyx_v_ndof;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_j = __pyx_t_10;

      /* "Junction.pyx":59
 * 		for i in range(nnod):
 * 			for j in range(ndof):
 * 				state_ini.push_back(kargs['state_ini'][i][j])             # <<<<<<<<<<<<<<
 * 
 * 		onlyAssert(kargs,'histo','Junction')
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_state_ini); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 59, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 59, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_j, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 59, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 59, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_state_ini.push_back(__pyx_t_11);
    }
  }

  /* "Junction.pyx":61
 * 				state_ini.push_back(kargs['state_ini'][i][j])
 * 
 * 		onlyAssert(kargs,'histo','Junction')             # <<<<<<<<<<<<<<
 * 		cdef intvec histo = intvec_factory(0)
 * 		for i in range(len(kargs['histo'])):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_histo, __pyx_n_s_Junction};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_histo, __pyx_n_s_Junction};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_histo);
    __Pyx_GIVEREF(__pyx_n_s_histo);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_4, __pyx_n_s_histo);
    __Pyx_INCREF(__pyx_n_s_Junction);
    __Pyx_GIVEREF(__pyx_n_s_Junction);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_4, __pyx_n_s_Junction);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Junction.pyx":62
 * 
 * 		onlyAssert(kargs,'histo','Junction')
 * 		cdef intvec histo = intvec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):
 */
  __pyx_v_histo = std::vector<int>(0);

  /* "Junction.pyx":63
 * 		onlyAssert(kargs,'histo','Junction')
 * 		cdef intvec histo = intvec_factory(0)
 * 		for i in range(len(kargs['histo'])):             # <<<<<<<<<<<<<<
 * 			if(kargs['histo'][i] in range(nnod)):
 * 				histo.push_back(kargs['histo'][i])
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_histo); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(2, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_8; __pyx_t_12+=1) {
    __pyx_v_i = __pyx_t_12;

    /* "Junction.pyx":64
 * 		cdef intvec histo = intvec_factory(0)
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):             # <<<<<<<<<<<<<<
 * 				histo.push_back(kargs['histo'][i])
 * 			else:
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_histo); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nnod); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_13 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(2, 64, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_14 = (__pyx_t_13 != 0);
    if (__pyx_t_14) {

      /* "Junction.pyx":65
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):
 * 				histo.push_back(kargs['histo'][i])             # <<<<<<<<<<<<<<
 * 			else:
 * 				print 'Fail inicialitation in [Junction], some node to histo not exists'
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_histo); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 65, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_histo.push_back(__pyx_t_4);

      /* "Junction.pyx":64
 * 		cdef intvec histo = intvec_factory(0)
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):             # <<<<<<<<<<<<<<
 * 				histo.push_back(kargs['histo'][i])
 * 			else:
 */
      goto __pyx_L9;
    }

    /* "Junction.pyx":67
 * 				histo.push_back(kargs['histo'][i])
 * 			else:
 * 				print 'Fail inicialitation in [Junction], some node to histo not exists'             # <<<<<<<<<<<<<<
 * 				sys.exit()
 * 
 */
    /*else*/ {
      if (__Pyx_PrintOne(0, __pyx_kp_s_Fail_inicialitation_in_Junction) < 0) __PYX_ERR(2, 67, __pyx_L1_error)

      /* "Junction.pyx":68
 * 			else:
 * 				print 'Fail inicialitation in [Junction], some node to histo not exists'
 * 				sys.exit()             # <<<<<<<<<<<<<<
 * 
 * 		s =  assignOptional(kargs,'label','junc_default')
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 68, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 68, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (__pyx_t_1) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 68, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 68, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L9:;
  }

  /* "Junction.pyx":70
 * 				sys.exit()
 * 
 * 		s =  assignOptional(kargs,'label','junc_default')             # <<<<<<<<<<<<<<
 * 		cdef char* label =  s
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_label, __pyx_n_s_junc_default};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 70, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_label, __pyx_n_s_junc_default};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 70, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_label);
    __Pyx_GIVEREF(__pyx_n_s_label);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_label);
    __Pyx_INCREF(__pyx_n_s_junc_default);
    __Pyx_GIVEREF(__pyx_n_s_junc_default);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_junc_default);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_s = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "Junction.pyx":71
 * 
 * 		s =  assignOptional(kargs,'label','junc_default')
 * 		cdef char* label =  s             # <<<<<<<<<<<<<<
 * 
 * 		cdef int modelo_junc = assignOptional(kargs,'modelo_jun',1)
 */
  __pyx_t_15 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(2, 71, __pyx_L1_error)
  __pyx_v_label = __pyx_t_15;

  /* "Junction.pyx":73
 * 		cdef char* label =  s
 * 
 * 		cdef int modelo_junc = assignOptional(kargs,'modelo_jun',1)             # <<<<<<<<<<<<<<
 * 
 * 		# asignacion que puede ser mejorada
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_modelo_jun, __pyx_int_1};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 73, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_modelo_jun, __pyx_int_1};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 73, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_modelo_jun);
    __Pyx_GIVEREF(__pyx_n_s_modelo_jun);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_modelo_jun);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_int_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_modelo_junc = __pyx_t_4;

  /* "Junction.pyx":77
 * 		# asignacion que puede ser mejorada
 * 
 * 		cdef intvec type_end = intvec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(len(kargs['type_end'])):
 * 			type_end.push_back(kargs['type_end'][i])
 */
  __pyx_v_type_end = std::vector<int>(0);

  /* "Junction.pyx":78
 * 
 * 		cdef intvec type_end = intvec_factory(0)
 * 		for i in range(len(kargs['type_end'])):             # <<<<<<<<<<<<<<
 * 			type_end.push_back(kargs['type_end'][i])
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_type_end); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(2, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_8; __pyx_t_12+=1) {
    __pyx_v_i = __pyx_t_12;

    /* "Junction.pyx":79
 * 		cdef intvec type_end = intvec_factory(0)
 * 		for i in range(len(kargs['type_end'])):
 * 			type_end.push_back(kargs['type_end'][i])             # <<<<<<<<<<<<<<
 * 
 * 		validateSize(kargs,'node2tube','Junction',nnod)
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_type_end); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 79, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_type_end.push_back(__pyx_t_4);
  }

  /* "Junction.pyx":81
 * 			type_end.push_back(kargs['type_end'][i])
 * 
 * 		validateSize(kargs,'node2tube','Junction',nnod)             # <<<<<<<<<<<<<<
 * 		cdef intvec node2tube = intvec_factory(0)
 * 		for i in range(nnod):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateSize); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nnod); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_node2tube, __pyx_n_s_Junction, __pyx_t_1};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 81, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_node2tube, __pyx_n_s_Junction, __pyx_t_1};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 81, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_node2tube);
    __Pyx_GIVEREF(__pyx_n_s_node2tube);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_node2tube);
    __Pyx_INCREF(__pyx_n_s_Junction);
    __Pyx_GIVEREF(__pyx_n_s_Junction);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Junction);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Junction.pyx":82
 * 
 * 		validateSize(kargs,'node2tube','Junction',nnod)
 * 		cdef intvec node2tube = intvec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(nnod):
 * 			node2tube.push_back(kargs['node2tube'][i])
 */
  __pyx_v_node2tube = std::vector<int>(0);

  /* "Junction.pyx":83
 * 		validateSize(kargs,'node2tube','Junction',nnod)
 * 		cdef intvec node2tube = intvec_factory(0)
 * 		for i in range(nnod):             # <<<<<<<<<<<<<<
 * 			node2tube.push_back(kargs['node2tube'][i])
 * 
 */
  __pyx_t_6 = __pyx_v_nnod;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_6; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "Junction.pyx":84
 * 		cdef intvec node2tube = intvec_factory(0)
 * 		for i in range(nnod):
 * 			node2tube.push_back(kargs['node2tube'][i])             # <<<<<<<<<<<<<<
 * 
 * 		cdef int type
 */
    __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_node2tube); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_7, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_node2tube.push_back(__pyx_t_4);
  }

  /* "Junction.pyx":87
 * 
 * 		cdef int type
 * 		if('type' in kargs.keys()):             # <<<<<<<<<<<<<<
 * 			validateInList(kargs,'type','Junction', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):
 */
  __pyx_t_2 = __Pyx_PyDict_Keys(__pyx_v_kargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_type, __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(2, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_13 = (__pyx_t_14 != 0);
  if (__pyx_t_13) {

    /* "Junction.pyx":88
 * 		cdef int type
 * 		if('type' in kargs.keys()):
 * 			validateInList(kargs,'type','Junction', ['intake', 'exhaust'], 'none')             # <<<<<<<<<<<<<<
 * 			if(kargs['type']=='intake'):
 * 				type = 1
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateInList); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_n_s_intake);
    __Pyx_GIVEREF(__pyx_n_s_intake);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_intake);
    __Pyx_INCREF(__pyx_n_s_exhaust);
    __Pyx_GIVEREF(__pyx_n_s_exhaust);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_exhaust);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[6] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_type, __pyx_n_s_Junction, __pyx_t_5, __pyx_n_s_none};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 88, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[6] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_type, __pyx_n_s_Junction, __pyx_t_5, __pyx_n_s_none};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 88, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(5+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_type);
      __Pyx_GIVEREF(__pyx_n_s_type);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_type);
      __Pyx_INCREF(__pyx_n_s_Junction);
      __Pyx_GIVEREF(__pyx_n_s_Junction);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Junction);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_4, __pyx_t_5);
      __Pyx_INCREF(__pyx_n_s_none);
      __Pyx_GIVEREF(__pyx_n_s_none);
      PyTuple_SET_ITEM(__pyx_t_3, 4+__pyx_t_4, __pyx_n_s_none);
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "Junction.pyx":89
 * 		if('type' in kargs.keys()):
 * 			validateInList(kargs,'type','Junction', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):             # <<<<<<<<<<<<<<
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_intake, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(2, 89, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_13) {

      /* "Junction.pyx":90
 * 			validateInList(kargs,'type','Junction', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):
 * 				type = 1             # <<<<<<<<<<<<<<
 * 			elif(kargs['type']=='exhaust'):
 * 				type = -1
 */
      __pyx_v_type = 1;

      /* "Junction.pyx":89
 * 		if('type' in kargs.keys()):
 * 			validateInList(kargs,'type','Junction', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):             # <<<<<<<<<<<<<<
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):
 */
      goto __pyx_L15;
    }

    /* "Junction.pyx":91
 * 			if(kargs['type']=='intake'):
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):             # <<<<<<<<<<<<<<
 * 				type = -1
 * 		else:
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_exhaust, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(2, 91, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_13) {

      /* "Junction.pyx":92
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):
 * 				type = -1             # <<<<<<<<<<<<<<
 * 		else:
 * 			print 'It is not indicated the type of junction'
 */
      __pyx_v_type = -1;

      /* "Junction.pyx":91
 * 			if(kargs['type']=='intake'):
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):             # <<<<<<<<<<<<<<
 * 				type = -1
 * 		else:
 */
    }
    __pyx_L15:;

    /* "Junction.pyx":87
 * 
 * 		cdef int type
 * 		if('type' in kargs.keys()):             # <<<<<<<<<<<<<<
 * 			validateInList(kargs,'type','Junction', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):
 */
    goto __pyx_L14;
  }

  /* "Junction.pyx":94
 * 				type = -1
 * 		else:
 * 			print 'It is not indicated the type of junction'             # <<<<<<<<<<<<<<
 * 			print 'Options are: intake or exhaust'
 * 			# raise ValueError
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_It_is_not_indicated_the_type_of) < 0) __PYX_ERR(2, 94, __pyx_L1_error)

    /* "Junction.pyx":95
 * 		else:
 * 			print 'It is not indicated the type of junction'
 * 			print 'Options are: intake or exhaust'             # <<<<<<<<<<<<<<
 * 			# raise ValueError
 * 			type = 1
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Options_are_intake_or_exhaust) < 0) __PYX_ERR(2, 95, __pyx_L1_error)

    /* "Junction.pyx":97
 * 			print 'Options are: intake or exhaust'
 * 			# raise ValueError
 * 			type = 1             # <<<<<<<<<<<<<<
 * 
 * 		self.thisptr = new_Junction(nnod, ndof, nnod_input, implicit,
 */
    __pyx_v_type = 1;
  }
  __pyx_L14:;

  /* "Junction.pyx":99
 * 			type = 1
 * 
 * 		self.thisptr = new_Junction(nnod, ndof, nnod_input, implicit,             # <<<<<<<<<<<<<<
 * 					    state_ini, histo, label, type_end,
 * 					    modelo_junc, node2tube, type)
 */
  __pyx_v_self->thisptr = new Junction(__pyx_v_nnod, __pyx_v_ndof, __pyx_v_nnod_input, __pyx_v_implicit, __pyx_v_state_ini, __pyx_v_histo, __pyx_v_label, __pyx_v_type_end, __pyx_v_modelo_junc, __pyx_v_node2tube, __pyx_v_type);

  /* "Junction.pyx":47
 * 	cdef c_Junction *thisptr
 * 
 * 	def __cinit__(self, **kargs):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Junction')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("simCythonCPP.Junction.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Junction.pyx":104
 * 
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del_Junction(self.thisptr)
 * 
 */

/* Python wrapper */
static void __pyx_pw_12simCythonCPP_8Junction_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_12simCythonCPP_8Junction_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_12simCythonCPP_8Junction_2__dealloc__(((struct __pyx_obj_12simCythonCPP_Junction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_12simCythonCPP_8Junction_2__dealloc__(struct __pyx_obj_12simCythonCPP_Junction *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "Junction.pyx":105
 * 
 * 	def __dealloc__(self):
 * 		del_Junction(self.thisptr)             # <<<<<<<<<<<<<<
 * 
 */
  delete(__pyx_v_self->thisptr);

  /* "Junction.pyx":104
 * 
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del_Junction(self.thisptr)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Tube.pyx":57
 * 	cdef c_Tube *thisptr
 * 
 * 	def __cinit__(self, **kargs):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Tube')
 */

/* Python wrapper */
static int __pyx_pw_12simCythonCPP_4Tube_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_12simCythonCPP_4Tube_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kargs);
  __pyx_r = __pyx_pf_12simCythonCPP_4Tube___cinit__(((struct __pyx_obj_12simCythonCPP_Tube *)__pyx_v_self), __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_12simCythonCPP_4Tube___cinit__(struct __pyx_obj_12simCythonCPP_Tube *__pyx_v_self, PyObject *__pyx_v_kargs) {
  unsigned int __pyx_v_nnod;
  unsigned int __pyx_v_ndof;
  unsigned int __pyx_v_nnod_input;
  int __pyx_v_implicit;
  std::vector<double> __pyx_v_state_ini;
  Py_ssize_t __pyx_v_i;
  unsigned int __pyx_v_j;
  std::vector<int> __pyx_v_histo;
  PyObject *__pyx_v_s = NULL;
  char *__pyx_v_label;
  double __pyx_v_longitud;
  std::vector<double> __pyx_v_xnod;
  PyObject *__pyx_v_d = NULL;
  std::vector<double> __pyx_v_Area;
  std::vector<double> __pyx_v_twall;
  std::vector<double> __pyx_v_dAreax;
  std::vector<double> __pyx_v_curvature;
  char *__pyx_v_tleft;
  char *__pyx_v_tright;
  unsigned int __pyx_v_nleft;
  unsigned int __pyx_v_nright;
  int __pyx_v_type;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  double __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  char *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *(*__pyx_t_16)(PyObject *);
  int __pyx_t_17;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "Tube.pyx":59
 * 	def __cinit__(self, **kargs):
 * 
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Tube')             # <<<<<<<<<<<<<<
 * 		cdef unsigned int ndof 	     = validatePositive(kargs,'ndof','Tube')
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Tube',2)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_nnod, __pyx_n_s_Tube};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 59, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_nnod, __pyx_n_s_Tube};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 59, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_nnod);
    __Pyx_GIVEREF(__pyx_n_s_nnod);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_nnod);
    __Pyx_INCREF(__pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_n_s_Tube);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Tube);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(3, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nnod = __pyx_t_6;

  /* "Tube.pyx":60
 * 
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Tube')
 * 		cdef unsigned int ndof 	     = validatePositive(kargs,'ndof','Tube')             # <<<<<<<<<<<<<<
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Tube',2)
 * 		kargs['implicit']	     = assignOptional(kargs,'implicit',0)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_ndof, __pyx_n_s_Tube};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 60, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_ndof, __pyx_n_s_Tube};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 60, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_ndof);
    __Pyx_GIVEREF(__pyx_n_s_ndof);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_ndof);
    __Pyx_INCREF(__pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_n_s_Tube);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Tube);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(3, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ndof = __pyx_t_6;

  /* "Tube.pyx":61
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Tube')
 * 		cdef unsigned int ndof 	     = validatePositive(kargs,'ndof','Tube')
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Tube',2)             # <<<<<<<<<<<<<<
 * 		kargs['implicit']	     = assignOptional(kargs,'implicit',0)
 * 		cdef int implicit 	     = boolean(kargs,'implicit','Tube')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_nnod_input, __pyx_n_s_Tube, __pyx_int_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_nnod_input, __pyx_n_s_Tube, __pyx_int_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_nnod_input);
    __Pyx_GIVEREF(__pyx_n_s_nnod_input);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_nnod_input);
    __Pyx_INCREF(__pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_n_s_Tube);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Tube);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_int_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(3, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nnod_input = __pyx_t_6;

  /* "Tube.pyx":62
 * 		cdef unsigned int ndof 	     = validatePositive(kargs,'ndof','Tube')
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Tube',2)
 * 		kargs['implicit']	     = assignOptional(kargs,'implicit',0)             # <<<<<<<<<<<<<<
 * 		cdef int implicit 	     = boolean(kargs,'implicit','Tube')
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 62, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 62, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_implicit);
    __Pyx_GIVEREF(__pyx_n_s_implicit);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_implicit);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_int_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_kargs, __pyx_n_s_implicit, __pyx_t_1) < 0)) __PYX_ERR(3, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Tube.pyx":63
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Tube',2)
 * 		kargs['implicit']	     = assignOptional(kargs,'implicit',0)
 * 		cdef int implicit 	     = boolean(kargs,'implicit','Tube')             # <<<<<<<<<<<<<<
 * 
 * 		onlyAssert(kargs,'state_ini','Tube')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_boolean); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_n_s_Tube};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 63, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_n_s_Tube};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 63, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_implicit);
    __Pyx_GIVEREF(__pyx_n_s_implicit);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_implicit);
    __Pyx_INCREF(__pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_n_s_Tube);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Tube);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_implicit = __pyx_t_4;

  /* "Tube.pyx":65
 * 		cdef int implicit 	     = boolean(kargs,'implicit','Tube')
 * 
 * 		onlyAssert(kargs,'state_ini','Tube')             # <<<<<<<<<<<<<<
 * 		cdef doublevec state_ini = doublevec_factory(0)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_state_ini, __pyx_n_s_Tube};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 65, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_state_ini, __pyx_n_s_Tube};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 65, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_state_ini);
    __Pyx_GIVEREF(__pyx_n_s_state_ini);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_state_ini);
    __Pyx_INCREF(__pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_n_s_Tube);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Tube);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Tube.pyx":66
 * 
 * 		onlyAssert(kargs,'state_ini','Tube')
 * 		cdef doublevec state_ini = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 
 * 		#print "nnod: ",nnod, "  ndof:",ndof, " - arreglo: ",len(kargs['state_ini'])," x ",len(kargs['state_ini'][0])
 */
  __pyx_v_state_ini = std::vector<double>(0);

  /* "Tube.pyx":69
 * 
 * 		#print "nnod: ",nnod, "  ndof:",ndof, " - arreglo: ",len(kargs['state_ini'])," x ",len(kargs['state_ini'][0])
 * 		for i in range(nnod):             # <<<<<<<<<<<<<<
 * 				for j in range(ndof):
 * 					state_ini.push_back(kargs['state_ini'][i][j])
 */
  __pyx_t_6 = __pyx_v_nnod;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "Tube.pyx":70
 * 		#print "nnod: ",nnod, "  ndof:",ndof, " - arreglo: ",len(kargs['state_ini'])," x ",len(kargs['state_ini'][0])
 * 		for i in range(nnod):
 * 				for j in range(ndof):             # <<<<<<<<<<<<<<
 * 					state_ini.push_back(kargs['state_ini'][i][j])
 * 
 */
    __pyx_t_8 = __pyx_v_ndof;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_j = __pyx_t_9;

      /* "Tube.pyx":71
 * 		for i in range(nnod):
 * 				for j in range(ndof):
 * 					state_ini.push_back(kargs['state_ini'][i][j])             # <<<<<<<<<<<<<<
 * 
 * 		onlyAssert(kargs,'histo','Tube')
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_state_ini); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_j, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 71, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_state_ini.push_back(__pyx_t_10);
    }
  }

  /* "Tube.pyx":73
 * 					state_ini.push_back(kargs['state_ini'][i][j])
 * 
 * 		onlyAssert(kargs,'histo','Tube')             # <<<<<<<<<<<<<<
 * 		cdef intvec histo = intvec_factory(0)
 * 		for i in range(len(kargs['histo'])):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_histo, __pyx_n_s_Tube};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 73, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_histo, __pyx_n_s_Tube};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 73, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_histo);
    __Pyx_GIVEREF(__pyx_n_s_histo);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_histo);
    __Pyx_INCREF(__pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_n_s_Tube);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Tube);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Tube.pyx":74
 * 
 * 		onlyAssert(kargs,'histo','Tube')
 * 		cdef intvec histo = intvec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):
 */
  __pyx_v_histo = std::vector<int>(0);

  /* "Tube.pyx":75
 * 		onlyAssert(kargs,'histo','Tube')
 * 		cdef intvec histo = intvec_factory(0)
 * 		for i in range(len(kargs['histo'])):             # <<<<<<<<<<<<<<
 * 			if(kargs['histo'][i] in range(nnod)):
 * 				histo.push_back(kargs['histo'][i])
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_histo); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(3, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_7; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "Tube.pyx":76
 * 		cdef intvec histo = intvec_factory(0)
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):             # <<<<<<<<<<<<<<
 * 				histo.push_back(kargs['histo'][i])
 * 			else:
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_histo); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nnod); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(3, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_13 = (__pyx_t_12 != 0);
    if (__pyx_t_13) {

      /* "Tube.pyx":77
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):
 * 				histo.push_back(kargs['histo'][i])             # <<<<<<<<<<<<<<
 * 			else:
 * 				print 'Fail inicialitation in [Tube], some node to histo not exists'
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_histo); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 77, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_histo.push_back(__pyx_t_4);

      /* "Tube.pyx":76
 * 		cdef intvec histo = intvec_factory(0)
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):             # <<<<<<<<<<<<<<
 * 				histo.push_back(kargs['histo'][i])
 * 			else:
 */
      goto __pyx_L9;
    }

    /* "Tube.pyx":79
 * 				histo.push_back(kargs['histo'][i])
 * 			else:
 * 				print 'Fail inicialitation in [Tube], some node to histo not exists'             # <<<<<<<<<<<<<<
 * 				sys.exit()
 * 
 */
    /*else*/ {
      if (__Pyx_PrintOne(0, __pyx_kp_s_Fail_inicialitation_in_Tube_some) < 0) __PYX_ERR(3, 79, __pyx_L1_error)

      /* "Tube.pyx":80
 * 			else:
 * 				print 'Fail inicialitation in [Tube], some node to histo not exists'
 * 				sys.exit()             # <<<<<<<<<<<<<<
 * 
 * 		s =  assignOptional(kargs,'label','tube_default')
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (__pyx_t_1) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 80, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 80, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L9:;
  }

  /* "Tube.pyx":82
 * 				sys.exit()
 * 
 * 		s =  assignOptional(kargs,'label','tube_default')             # <<<<<<<<<<<<<<
 * 		cdef char* label =  s
 * 
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_label, __pyx_n_s_tube_default};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 82, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_label, __pyx_n_s_tube_default};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 82, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_label);
    __Pyx_GIVEREF(__pyx_n_s_label);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_label);
    __Pyx_INCREF(__pyx_n_s_tube_default);
    __Pyx_GIVEREF(__pyx_n_s_tube_default);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_tube_default);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_s = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "Tube.pyx":83
 * 
 * 		s =  assignOptional(kargs,'label','tube_default')
 * 		cdef char* label =  s             # <<<<<<<<<<<<<<
 * 
 * 		cdef double longitud = validatePositive(kargs,'longitud','Tube')
 */
  __pyx_t_14 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) __PYX_ERR(3, 83, __pyx_L1_error)
  __pyx_v_label = __pyx_t_14;

  /* "Tube.pyx":85
 * 		cdef char* label =  s
 * 
 * 		cdef double longitud = validatePositive(kargs,'longitud','Tube')             # <<<<<<<<<<<<<<
 * 
 * 		validateSize(kargs,'xnod','Tube',nnod)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_longitud, __pyx_n_s_Tube};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 85, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_longitud, __pyx_n_s_Tube};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 85, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_longitud);
    __Pyx_GIVEREF(__pyx_n_s_longitud);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_longitud);
    __Pyx_INCREF(__pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_n_s_Tube);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_n_s_Tube);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_longitud = __pyx_t_10;

  /* "Tube.pyx":87
 * 		cdef double longitud = validatePositive(kargs,'longitud','Tube')
 * 
 * 		validateSize(kargs,'xnod','Tube',nnod)             # <<<<<<<<<<<<<<
 * 		cdef doublevec xnod = doublevec_factory(0)
 * 		for i in range(nnod):
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateSize); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nnod); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_xnod, __pyx_n_s_Tube, __pyx_t_1};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 87, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_xnod, __pyx_n_s_Tube, __pyx_t_1};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 87, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_15 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_xnod);
    __Pyx_GIVEREF(__pyx_n_s_xnod);
    PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_4, __pyx_n_s_xnod);
    __Pyx_INCREF(__pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_n_s_Tube);
    PyTuple_SET_ITEM(__pyx_t_15, 2+__pyx_t_4, __pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_15, 3+__pyx_t_4, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Tube.pyx":88
 * 
 * 		validateSize(kargs,'xnod','Tube',nnod)
 * 		cdef doublevec xnod = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(nnod):
 * 			xnod.push_back(kargs['xnod'][i])
 */
  __pyx_v_xnod = std::vector<double>(0);

  /* "Tube.pyx":89
 * 		validateSize(kargs,'xnod','Tube',nnod)
 * 		cdef doublevec xnod = doublevec_factory(0)
 * 		for i in range(nnod):             # <<<<<<<<<<<<<<
 * 			xnod.push_back(kargs['xnod'][i])
 * 
 */
  __pyx_t_6 = __pyx_v_nnod;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "Tube.pyx":90
 * 		cdef doublevec xnod = doublevec_factory(0)
 * 		for i in range(nnod):
 * 			xnod.push_back(kargs['xnod'][i])             # <<<<<<<<<<<<<<
 * 
 * 		if not('Area' in kargs.keys()):
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_xnod); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_xnod.push_back(__pyx_t_10);
  }

  /* "Tube.pyx":92
 * 			xnod.push_back(kargs['xnod'][i])
 * 
 * 		if not('Area' in kargs.keys()):             # <<<<<<<<<<<<<<
 * 			if not('diameter' in kargs.keys()):
 * 				print 'Fail inicialitation in Tube, area and diameter not exists'
 */
  __pyx_t_5 = __Pyx_PyDict_Keys(__pyx_v_kargs); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_13 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_Area, __pyx_t_5, Py_NE)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(3, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_12 = (__pyx_t_13 != 0);
  if (__pyx_t_12) {

    /* "Tube.pyx":93
 * 
 * 		if not('Area' in kargs.keys()):
 * 			if not('diameter' in kargs.keys()):             # <<<<<<<<<<<<<<
 * 				print 'Fail inicialitation in Tube, area and diameter not exists'
 * 				sys.exit()
 */
    __pyx_t_5 = __Pyx_PyDict_Keys(__pyx_v_kargs); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_diameter, __pyx_t_5, Py_NE)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(3, 93, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_13 = (__pyx_t_12 != 0);
    if (__pyx_t_13) {

      /* "Tube.pyx":94
 * 		if not('Area' in kargs.keys()):
 * 			if not('diameter' in kargs.keys()):
 * 				print 'Fail inicialitation in Tube, area and diameter not exists'             # <<<<<<<<<<<<<<
 * 				sys.exit()
 * 			else:
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_Fail_inicialitation_in_Tube_area) < 0) __PYX_ERR(3, 94, __pyx_L1_error)

      /* "Tube.pyx":95
 * 			if not('diameter' in kargs.keys()):
 * 				print 'Fail inicialitation in Tube, area and diameter not exists'
 * 				sys.exit()             # <<<<<<<<<<<<<<
 * 			else:
 * 				validateSize(kargs,'diameter','Tube',nnod)
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_15);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_15, function);
        }
      }
      if (__pyx_t_2) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 95, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 95, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "Tube.pyx":93
 * 
 * 		if not('Area' in kargs.keys()):
 * 			if not('diameter' in kargs.keys()):             # <<<<<<<<<<<<<<
 * 				print 'Fail inicialitation in Tube, area and diameter not exists'
 * 				sys.exit()
 */
      goto __pyx_L13;
    }

    /* "Tube.pyx":97
 * 				sys.exit()
 * 			else:
 * 				validateSize(kargs,'diameter','Tube',nnod)             # <<<<<<<<<<<<<<
 * 				kargs['Area'] = []
 * 				for d in kargs['diameter']:
 */
    /*else*/ {
      __pyx_t_15 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateSize); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nnod); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_15);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_15, function);
          __pyx_t_4 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_15)) {
        PyObject *__pyx_temp[5] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_diameter, __pyx_n_s_Tube, __pyx_t_2};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 97, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {
        PyObject *__pyx_temp[5] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_diameter, __pyx_n_s_Tube, __pyx_t_2};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 97, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 97, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_INCREF(__pyx_v_kargs);
        __Pyx_GIVEREF(__pyx_v_kargs);
        PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
        __Pyx_INCREF(__pyx_n_s_diameter);
        __Pyx_GIVEREF(__pyx_n_s_diameter);
        PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_diameter);
        __Pyx_INCREF(__pyx_n_s_Tube);
        __Pyx_GIVEREF(__pyx_n_s_Tube);
        PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Tube);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_4, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 97, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "Tube.pyx":98
 * 			else:
 * 				validateSize(kargs,'diameter','Tube',nnod)
 * 				kargs['Area'] = []             # <<<<<<<<<<<<<<
 * 				for d in kargs['diameter']:
 * 					kargs['Area'].append(3.14159*(d/2.0)**2)
 */
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(PyDict_SetItem(__pyx_v_kargs, __pyx_n_s_Area, __pyx_t_5) < 0)) __PYX_ERR(3, 98, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "Tube.pyx":99
 * 				validateSize(kargs,'diameter','Tube',nnod)
 * 				kargs['Area'] = []
 * 				for d in kargs['diameter']:             # <<<<<<<<<<<<<<
 * 					kargs['Area'].append(3.14159*(d/2.0)**2)
 * 		validateSize(kargs,'Area','Tube',nnod)
 */
      __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_diameter); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_15 = __pyx_t_5; __Pyx_INCREF(__pyx_t_15); __pyx_t_7 = 0;
        __pyx_t_16 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 99, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_16 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(3, 99, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_16)) {
          if (likely(PyList_CheckExact(__pyx_t_15))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_15)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(3, 99, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_15, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 99, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(3, 99, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_15, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 99, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_16(__pyx_t_15);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(3, 99, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF_SET(__pyx_v_d, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "Tube.pyx":100
 * 				kargs['Area'] = []
 * 				for d in kargs['diameter']:
 * 					kargs['Area'].append(3.14159*(d/2.0)**2)             # <<<<<<<<<<<<<<
 * 		validateSize(kargs,'Area','Tube',nnod)
 * 		cdef doublevec Area = doublevec_factory(0)
 */
        __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_Area); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = __Pyx_PyFloat_DivideObjC(__pyx_v_d, __pyx_float_2_0, 2.0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PyNumber_Power(__pyx_t_3, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Multiply(__pyx_float_3_14159, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_17 = __Pyx_PyObject_Append(__pyx_t_5, __pyx_t_3); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(3, 100, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "Tube.pyx":99
 * 				validateSize(kargs,'diameter','Tube',nnod)
 * 				kargs['Area'] = []
 * 				for d in kargs['diameter']:             # <<<<<<<<<<<<<<
 * 					kargs['Area'].append(3.14159*(d/2.0)**2)
 * 		validateSize(kargs,'Area','Tube',nnod)
 */
      }
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
    __pyx_L13:;

    /* "Tube.pyx":92
 * 			xnod.push_back(kargs['xnod'][i])
 * 
 * 		if not('Area' in kargs.keys()):             # <<<<<<<<<<<<<<
 * 			if not('diameter' in kargs.keys()):
 * 				print 'Fail inicialitation in Tube, area and diameter not exists'
 */
  }

  /* "Tube.pyx":101
 * 				for d in kargs['diameter']:
 * 					kargs['Area'].append(3.14159*(d/2.0)**2)
 * 		validateSize(kargs,'Area','Tube',nnod)             # <<<<<<<<<<<<<<
 * 		cdef doublevec Area = doublevec_factory(0)
 * 		for i in range(nnod):
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateSize); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nnod); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_kargs, __pyx_n_s_Area, __pyx_n_s_Tube, __pyx_t_5};
    __pyx_t_15 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 101, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_kargs, __pyx_n_s_Area, __pyx_n_s_Tube, __pyx_t_5};
    __pyx_t_15 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 101, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_Area);
    __Pyx_GIVEREF(__pyx_n_s_Area);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_Area);
    __Pyx_INCREF(__pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_n_s_Tube);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_4, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "Tube.pyx":102
 * 					kargs['Area'].append(3.14159*(d/2.0)**2)
 * 		validateSize(kargs,'Area','Tube',nnod)
 * 		cdef doublevec Area = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(nnod):
 * 			Area.push_back(kargs['Area'][i])
 */
  __pyx_v_Area = std::vector<double>(0);

  /* "Tube.pyx":103
 * 		validateSize(kargs,'Area','Tube',nnod)
 * 		cdef doublevec Area = doublevec_factory(0)
 * 		for i in range(nnod):             # <<<<<<<<<<<<<<
 * 			Area.push_back(kargs['Area'][i])
 * 
 */
  __pyx_t_6 = __pyx_v_nnod;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "Tube.pyx":104
 * 		cdef doublevec Area = doublevec_factory(0)
 * 		for i in range(nnod):
 * 			Area.push_back(kargs['Area'][i])             # <<<<<<<<<<<<<<
 * 
 * 		validateSize(kargs,'twall','Tube',nnod)
 */
    __pyx_t_15 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_Area); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_15, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 104, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_Area.push_back(__pyx_t_10);
  }

  /* "Tube.pyx":106
 * 			Area.push_back(kargs['Area'][i])
 * 
 * 		validateSize(kargs,'twall','Tube',nnod)             # <<<<<<<<<<<<<<
 * 		cdef doublevec twall = doublevec_factory(0)
 * 		for i in range(nnod):
 */
  __pyx_t_15 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateSize); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nnod); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_15)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_twall, __pyx_n_s_Tube, __pyx_t_1};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 106, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_twall, __pyx_n_s_Tube, __pyx_t_1};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 106, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_twall);
    __Pyx_GIVEREF(__pyx_n_s_twall);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_twall);
    __Pyx_INCREF(__pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_n_s_Tube);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 3+__pyx_t_4, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "Tube.pyx":107
 * 
 * 		validateSize(kargs,'twall','Tube',nnod)
 * 		cdef doublevec twall = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(nnod):
 * 			twall.push_back(kargs['twall'][i])
 */
  __pyx_v_twall = std::vector<double>(0);

  /* "Tube.pyx":108
 * 		validateSize(kargs,'twall','Tube',nnod)
 * 		cdef doublevec twall = doublevec_factory(0)
 * 		for i in range(nnod):             # <<<<<<<<<<<<<<
 * 			twall.push_back(kargs['twall'][i])
 * 
 */
  __pyx_t_6 = __pyx_v_nnod;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "Tube.pyx":109
 * 		cdef doublevec twall = doublevec_factory(0)
 * 		for i in range(nnod):
 * 			twall.push_back(kargs['twall'][i])             # <<<<<<<<<<<<<<
 * 
 * 		cdef doublevec dAreax = doublevec_factory(0)
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_twall); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_15); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_v_twall.push_back(__pyx_t_10);
  }

  /* "Tube.pyx":111
 * 			twall.push_back(kargs['twall'][i])
 * 
 * 		cdef doublevec dAreax = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		kargs['dAreax'] = assignOptional(kargs, 'dAreax', []);
 * 		if(len(kargs['dAreax'])>0):
 */
  __pyx_v_dAreax = std::vector<double>(0);

  /* "Tube.pyx":112
 * 
 * 		cdef doublevec dAreax = doublevec_factory(0)
 * 		kargs['dAreax'] = assignOptional(kargs, 'dAreax', []);             # <<<<<<<<<<<<<<
 * 		if(len(kargs['dAreax'])>0):
 * 			validateSize(kargs,'dAreax','Tube',nnod)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_dAreax, __pyx_t_2};
    __pyx_t_15 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 112, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_dAreax, __pyx_t_2};
    __pyx_t_15 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 112, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_dAreax);
    __Pyx_GIVEREF(__pyx_n_s_dAreax);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_dAreax);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_kargs, __pyx_n_s_dAreax, __pyx_t_15) < 0)) __PYX_ERR(3, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "Tube.pyx":113
 * 		cdef doublevec dAreax = doublevec_factory(0)
 * 		kargs['dAreax'] = assignOptional(kargs, 'dAreax', []);
 * 		if(len(kargs['dAreax'])>0):             # <<<<<<<<<<<<<<
 * 			validateSize(kargs,'dAreax','Tube',nnod)
 * 			for i in range(nnod):
 */
  __pyx_t_15 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_dAreax); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_7 = PyObject_Length(__pyx_t_15); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(3, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_13 = ((__pyx_t_7 > 0) != 0);
  if (__pyx_t_13) {

    /* "Tube.pyx":114
 * 		kargs['dAreax'] = assignOptional(kargs, 'dAreax', []);
 * 		if(len(kargs['dAreax'])>0):
 * 			validateSize(kargs,'dAreax','Tube',nnod)             # <<<<<<<<<<<<<<
 * 			for i in range(nnod):
 * 				dAreax.push_back(kargs['dAreax'][i])
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateSize); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nnod); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_kargs, __pyx_n_s_dAreax, __pyx_n_s_Tube, __pyx_t_5};
      __pyx_t_15 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 114, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_kargs, __pyx_n_s_dAreax, __pyx_n_s_Tube, __pyx_t_5};
      __pyx_t_15 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 114, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_dAreax);
      __Pyx_GIVEREF(__pyx_n_s_dAreax);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_dAreax);
      __Pyx_INCREF(__pyx_n_s_Tube);
      __Pyx_GIVEREF(__pyx_n_s_Tube);
      PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_n_s_Tube);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_4, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "Tube.pyx":115
 * 		if(len(kargs['dAreax'])>0):
 * 			validateSize(kargs,'dAreax','Tube',nnod)
 * 			for i in range(nnod):             # <<<<<<<<<<<<<<
 * 				dAreax.push_back(kargs['dAreax'][i])
 * 
 */
    __pyx_t_6 = __pyx_v_nnod;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "Tube.pyx":116
 * 			validateSize(kargs,'dAreax','Tube',nnod)
 * 			for i in range(nnod):
 * 				dAreax.push_back(kargs['dAreax'][i])             # <<<<<<<<<<<<<<
 * 
 * 		if (not(hasattr(kargs,'curvature'))):
 */
      __pyx_t_15 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_dAreax); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_15, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 116, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_dAreax.push_back(__pyx_t_10);
    }

    /* "Tube.pyx":113
 * 		cdef doublevec dAreax = doublevec_factory(0)
 * 		kargs['dAreax'] = assignOptional(kargs, 'dAreax', []);
 * 		if(len(kargs['dAreax'])>0):             # <<<<<<<<<<<<<<
 * 			validateSize(kargs,'dAreax','Tube',nnod)
 * 			for i in range(nnod):
 */
  }

  /* "Tube.pyx":118
 * 				dAreax.push_back(kargs['dAreax'][i])
 * 
 * 		if (not(hasattr(kargs,'curvature'))):             # <<<<<<<<<<<<<<
 * 			kargs['curvature'] = zeros(nnod)
 * 		cdef doublevec curvature = doublevec_factory(0)
 */
  __pyx_t_13 = PyObject_HasAttr(__pyx_v_kargs, __pyx_n_s_curvature); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(3, 118, __pyx_L1_error)
  __pyx_t_12 = ((!(__pyx_t_13 != 0)) != 0);
  if (__pyx_t_12) {

    /* "Tube.pyx":119
 * 
 * 		if (not(hasattr(kargs,'curvature'))):
 * 			kargs['curvature'] = zeros(nnod)             # <<<<<<<<<<<<<<
 * 		cdef doublevec curvature = doublevec_factory(0)
 * 		for i in range(nnod):
 */
    __pyx_t_15 = __Pyx_GetModuleGlobalName(__pyx_n_s_zeros); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nnod); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 119, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_15)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_1};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 119, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_1};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 119, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 119, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 119, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(PyDict_SetItem(__pyx_v_kargs, __pyx_n_s_curvature, __pyx_t_3) < 0)) __PYX_ERR(3, 119, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "Tube.pyx":118
 * 				dAreax.push_back(kargs['dAreax'][i])
 * 
 * 		if (not(hasattr(kargs,'curvature'))):             # <<<<<<<<<<<<<<
 * 			kargs['curvature'] = zeros(nnod)
 * 		cdef doublevec curvature = doublevec_factory(0)
 */
  }

  /* "Tube.pyx":120
 * 		if (not(hasattr(kargs,'curvature'))):
 * 			kargs['curvature'] = zeros(nnod)
 * 		cdef doublevec curvature = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(nnod):
 * 			curvature.push_back(kargs['curvature'][i])
 */
  __pyx_v_curvature = std::vector<double>(0);

  /* "Tube.pyx":121
 * 			kargs['curvature'] = zeros(nnod)
 * 		cdef doublevec curvature = doublevec_factory(0)
 * 		for i in range(nnod):             # <<<<<<<<<<<<<<
 * 			curvature.push_back(kargs['curvature'][i])
 * 
 */
  __pyx_t_6 = __pyx_v_nnod;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "Tube.pyx":122
 * 		cdef doublevec curvature = doublevec_factory(0)
 * 		for i in range(nnod):
 * 			curvature.push_back(kargs['curvature'][i])             # <<<<<<<<<<<<<<
 * 
 * 		s = onlyAssert(kargs,'tleft','Tubes')
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_curvature); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_15); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 122, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_v_curvature.push_back(__pyx_t_10);
  }

  /* "Tube.pyx":124
 * 			curvature.push_back(kargs['curvature'][i])
 * 
 * 		s = onlyAssert(kargs,'tleft','Tubes')             # <<<<<<<<<<<<<<
 * 		cdef char* tleft = s
 * 		s = onlyAssert(kargs,'tright','Tubes')
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_kargs, __pyx_n_s_tleft, __pyx_n_s_Tubes};
    __pyx_t_15 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 124, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_15);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_kargs, __pyx_n_s_tleft, __pyx_n_s_Tubes};
    __pyx_t_15 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 124, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_15);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_tleft);
    __Pyx_GIVEREF(__pyx_n_s_tleft);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_tleft);
    __Pyx_INCREF(__pyx_n_s_Tubes);
    __Pyx_GIVEREF(__pyx_n_s_Tubes);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_n_s_Tubes);
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_15);
  __pyx_t_15 = 0;

  /* "Tube.pyx":125
 * 
 * 		s = onlyAssert(kargs,'tleft','Tubes')
 * 		cdef char* tleft = s             # <<<<<<<<<<<<<<
 * 		s = onlyAssert(kargs,'tright','Tubes')
 * 		cdef char* tright = s
 */
  __pyx_t_14 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) __PYX_ERR(3, 125, __pyx_L1_error)
  __pyx_v_tleft = __pyx_t_14;

  /* "Tube.pyx":126
 * 		s = onlyAssert(kargs,'tleft','Tubes')
 * 		cdef char* tleft = s
 * 		s = onlyAssert(kargs,'tright','Tubes')             # <<<<<<<<<<<<<<
 * 		cdef char* tright = s
 * 		cdef unsigned int nleft  = onlyAssert(kargs,'nleft','Tube')
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_tright, __pyx_n_s_Tubes};
    __pyx_t_15 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 126, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_15);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_tright, __pyx_n_s_Tubes};
    __pyx_t_15 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 126, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_15);
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_tright);
    __Pyx_GIVEREF(__pyx_n_s_tright);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_tright);
    __Pyx_INCREF(__pyx_n_s_Tubes);
    __Pyx_GIVEREF(__pyx_n_s_Tubes);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_n_s_Tubes);
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_15);
  __pyx_t_15 = 0;

  /* "Tube.pyx":127
 * 		cdef char* tleft = s
 * 		s = onlyAssert(kargs,'tright','Tubes')
 * 		cdef char* tright = s             # <<<<<<<<<<<<<<
 * 		cdef unsigned int nleft  = onlyAssert(kargs,'nleft','Tube')
 * 		cdef unsigned int nright = onlyAssert(kargs,'nright','Tube')
 */
  __pyx_t_14 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) __PYX_ERR(3, 127, __pyx_L1_error)
  __pyx_v_tright = __pyx_t_14;

  /* "Tube.pyx":128
 * 		s = onlyAssert(kargs,'tright','Tubes')
 * 		cdef char* tright = s
 * 		cdef unsigned int nleft  = onlyAssert(kargs,'nleft','Tube')             # <<<<<<<<<<<<<<
 * 		cdef unsigned int nright = onlyAssert(kargs,'nright','Tube')
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_kargs, __pyx_n_s_nleft, __pyx_n_s_Tube};
    __pyx_t_15 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 128, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_15);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_kargs, __pyx_n_s_nleft, __pyx_n_s_Tube};
    __pyx_t_15 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 128, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_15);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_nleft);
    __Pyx_GIVEREF(__pyx_n_s_nleft);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_nleft);
    __Pyx_INCREF(__pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_n_s_Tube);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_n_s_Tube);
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_15); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(3, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_v_nleft = __pyx_t_6;

  /* "Tube.pyx":129
 * 		cdef char* tright = s
 * 		cdef unsigned int nleft  = onlyAssert(kargs,'nleft','Tube')
 * 		cdef unsigned int nright = onlyAssert(kargs,'nright','Tube')             # <<<<<<<<<<<<<<
 * 
 * 		cdef int type
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_nright, __pyx_n_s_Tube};
    __pyx_t_15 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 129, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_15);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_nright, __pyx_n_s_Tube};
    __pyx_t_15 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 129, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_15);
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_nright);
    __Pyx_GIVEREF(__pyx_n_s_nright);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_4, __pyx_n_s_nright);
    __Pyx_INCREF(__pyx_n_s_Tube);
    __Pyx_GIVEREF(__pyx_n_s_Tube);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_4, __pyx_n_s_Tube);
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_15); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(3, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_v_nright = __pyx_t_6;

  /* "Tube.pyx":132
 * 
 * 		cdef int type
 * 		if('type' in kargs.keys()):             # <<<<<<<<<<<<<<
 * 			validateInList(kargs,'type','Tube', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):
 */
  __pyx_t_15 = __Pyx_PyDict_Keys(__pyx_v_kargs); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_type, __pyx_t_15, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(3, 132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_13 = (__pyx_t_12 != 0);
  if (__pyx_t_13) {

    /* "Tube.pyx":133
 * 		cdef int type
 * 		if('type' in kargs.keys()):
 * 			validateInList(kargs,'type','Tube', ['intake', 'exhaust'], 'none')             # <<<<<<<<<<<<<<
 * 			if(kargs['type']=='intake'):
 * 				type = 1
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateInList); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_intake);
    __Pyx_GIVEREF(__pyx_n_s_intake);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_intake);
    __Pyx_INCREF(__pyx_n_s_exhaust);
    __Pyx_GIVEREF(__pyx_n_s_exhaust);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_exhaust);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[6] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_type, __pyx_n_s_Tube, __pyx_t_2, __pyx_n_s_none};
      __pyx_t_15 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 133, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[6] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_type, __pyx_n_s_Tube, __pyx_t_2, __pyx_n_s_none};
      __pyx_t_15 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 133, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(5+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_type);
      __Pyx_GIVEREF(__pyx_n_s_type);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_type);
      __Pyx_INCREF(__pyx_n_s_Tube);
      __Pyx_GIVEREF(__pyx_n_s_Tube);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Tube);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_none);
      __Pyx_GIVEREF(__pyx_n_s_none);
      PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_n_s_none);
      __pyx_t_2 = 0;
      __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "Tube.pyx":134
 * 		if('type' in kargs.keys()):
 * 			validateInList(kargs,'type','Tube', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):             # <<<<<<<<<<<<<<
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):
 */
    __pyx_t_15 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_type); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_15, __pyx_n_s_intake, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(3, 134, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (__pyx_t_13) {

      /* "Tube.pyx":135
 * 			validateInList(kargs,'type','Tube', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):
 * 				type = 1             # <<<<<<<<<<<<<<
 * 			elif(kargs['type']=='exhaust'):
 * 				type = -1
 */
      __pyx_v_type = 1;

      /* "Tube.pyx":134
 * 		if('type' in kargs.keys()):
 * 			validateInList(kargs,'type','Tube', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):             # <<<<<<<<<<<<<<
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):
 */
      goto __pyx_L27;
    }

    /* "Tube.pyx":136
 * 			if(kargs['type']=='intake'):
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):             # <<<<<<<<<<<<<<
 * 				type = -1
 * 		else:
 */
    __pyx_t_15 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_type); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_15, __pyx_n_s_exhaust, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(3, 136, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (__pyx_t_13) {

      /* "Tube.pyx":137
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):
 * 				type = -1             # <<<<<<<<<<<<<<
 * 		else:
 * 			print 'It is not indicated the type of tube'
 */
      __pyx_v_type = -1;

      /* "Tube.pyx":136
 * 			if(kargs['type']=='intake'):
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):             # <<<<<<<<<<<<<<
 * 				type = -1
 * 		else:
 */
    }
    __pyx_L27:;

    /* "Tube.pyx":132
 * 
 * 		cdef int type
 * 		if('type' in kargs.keys()):             # <<<<<<<<<<<<<<
 * 			validateInList(kargs,'type','Tube', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):
 */
    goto __pyx_L26;
  }

  /* "Tube.pyx":139
 * 				type = -1
 * 		else:
 * 			print 'It is not indicated the type of tube'             # <<<<<<<<<<<<<<
 * 			print 'Options are: intake or exhaust'
 * 			# raise ValueError
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_It_is_not_indicated_the_type_of_2) < 0) __PYX_ERR(3, 139, __pyx_L1_error)

    /* "Tube.pyx":140
 * 		else:
 * 			print 'It is not indicated the type of tube'
 * 			print 'Options are: intake or exhaust'             # <<<<<<<<<<<<<<
 * 			# raise ValueError
 * 			type = 1
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Options_are_intake_or_exhaust) < 0) __PYX_ERR(3, 140, __pyx_L1_error)

    /* "Tube.pyx":142
 * 			print 'Options are: intake or exhaust'
 * 			# raise ValueError
 * 			type = 1             # <<<<<<<<<<<<<<
 * 
 * 		self.thisptr = new_Tube(nnod, ndof, nnod_input, implicit,
 */
    __pyx_v_type = 1;
  }
  __pyx_L26:;

  /* "Tube.pyx":144
 * 			type = 1
 * 
 * 		self.thisptr = new_Tube(nnod, ndof, nnod_input, implicit,             # <<<<<<<<<<<<<<
 * 					state_ini,histo, label, longitud,
 * 					xnod, Area, twall, curvature, dAreax,
 */
  __pyx_v_self->thisptr = new Tube(__pyx_v_nnod, __pyx_v_ndof, __pyx_v_nnod_input, __pyx_v_implicit, __pyx_v_state_ini, __pyx_v_histo, __pyx_v_label, __pyx_v_longitud, __pyx_v_xnod, __pyx_v_Area, __pyx_v_twall, __pyx_v_curvature, __pyx_v_dAreax, __pyx_v_tleft, __pyx_v_nleft, __pyx_v_tright, __pyx_v_nright, __pyx_v_type);

  /* "Tube.pyx":57
 * 	cdef c_Tube *thisptr
 * 
 * 	def __cinit__(self, **kargs):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Tube')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("simCythonCPP.Tube.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Tube.pyx":149
 * 					tleft, nleft, tright, nright, type)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del_Tube(self.thisptr)
 * 
 */

/* Python wrapper */
static void __pyx_pw_12simCythonCPP_4Tube_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_12simCythonCPP_4Tube_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_12simCythonCPP_4Tube_2__dealloc__(((struct __pyx_obj_12simCythonCPP_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_12simCythonCPP_4Tube_2__dealloc__(struct __pyx_obj_12simCythonCPP_Tube *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "Tube.pyx":150
 * 
 * 	def __dealloc__(self):
 * 		del_Tube(self.thisptr)             # <<<<<<<<<<<<<<
 * 
 */
  delete(__pyx_v_self->thisptr);

  /* "Tube.pyx":149
 * 					tleft, nleft, tright, nright, type)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del_Tube(self.thisptr)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Tank.pyx":54
 * 	cdef c_Tank *thisptr
 * 
 * 	def __cinit__(self, **kargs):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Tank')
 */

/* Python wrapper */
static int __pyx_pw_12simCythonCPP_4Tank_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_12simCythonCPP_4Tank_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kargs);
  __pyx_r = __pyx_pf_12simCythonCPP_4Tank___cinit__(((struct __pyx_obj_12simCythonCPP_Tank *)__pyx_v_self), __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_12simCythonCPP_4Tank___cinit__(struct __pyx_obj_12simCythonCPP_Tank *__pyx_v_self, PyObject *__pyx_v_kargs) {
  unsigned int __pyx_v_nnod;
  unsigned int __pyx_v_ndof;
  unsigned int __pyx_v_nnod_input;
  int __pyx_v_implicit;
  std::vector<double> __pyx_v_state_ini;
  Py_ssize_t __pyx_v_i;
  unsigned int __pyx_v_j;
  std::vector<int> __pyx_v_histo;
  PyObject *__pyx_v_s = NULL;
  char *__pyx_v_label;
  double __pyx_v_Volume;
  double __pyx_v_mass;
  double __pyx_v_h_film;
  double __pyx_v_Area_wall;
  double __pyx_v_T_wall;
  std::vector<int> __pyx_v_type_end;
  std::vector<double> __pyx_v_Cd_ports;
  CYTHON_UNUSED int __pyx_v_l;
  std::vector<int> __pyx_v_int2tube;
  std::vector<int> __pyx_v_exh2tube;
  int __pyx_v_extras;
  int __pyx_v_type;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  unsigned int __pyx_t_9;
  unsigned int __pyx_t_10;
  double __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  char *__pyx_t_15;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "Tank.pyx":56
 * 	def __cinit__(self, **kargs):
 * 
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Tank')             # <<<<<<<<<<<<<<
 * 		cdef unsigned int ndof 	     = validatePositive(kargs,'ndof','Tank')
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Tank',nnod-1)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_nnod, __pyx_n_s_Tank};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 56, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_nnod, __pyx_n_s_Tank};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 56, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_nnod);
    __Pyx_GIVEREF(__pyx_n_s_nnod);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_nnod);
    __Pyx_INCREF(__pyx_n_s_Tank);
    __Pyx_GIVEREF(__pyx_n_s_Tank);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Tank);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(4, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nnod = __pyx_t_6;

  /* "Tank.pyx":57
 * 
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Tank')
 * 		cdef unsigned int ndof 	     = validatePositive(kargs,'ndof','Tank')             # <<<<<<<<<<<<<<
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Tank',nnod-1)
 * 		kargs['implicit']	     = assignOptional(kargs,'implicit',1)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_ndof, __pyx_n_s_Tank};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 57, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_ndof, __pyx_n_s_Tank};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 57, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_ndof);
    __Pyx_GIVEREF(__pyx_n_s_ndof);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_ndof);
    __Pyx_INCREF(__pyx_n_s_Tank);
    __Pyx_GIVEREF(__pyx_n_s_Tank);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Tank);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(4, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ndof = __pyx_t_6;

  /* "Tank.pyx":58
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Tank')
 * 		cdef unsigned int ndof 	     = validatePositive(kargs,'ndof','Tank')
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Tank',nnod-1)             # <<<<<<<<<<<<<<
 * 		kargs['implicit']	     = assignOptional(kargs,'implicit',1)
 * 		cdef int implicit 	     = boolean(kargs,'implicit','Tank')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_nnod - 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_nnod_input, __pyx_n_s_Tank, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 58, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_nnod_input, __pyx_n_s_Tank, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 58, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_nnod_input);
    __Pyx_GIVEREF(__pyx_n_s_nnod_input);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_4, __pyx_n_s_nnod_input);
    __Pyx_INCREF(__pyx_n_s_Tank);
    __Pyx_GIVEREF(__pyx_n_s_Tank);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_4, __pyx_n_s_Tank);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 3+__pyx_t_4, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(4, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nnod_input = __pyx_t_6;

  /* "Tank.pyx":59
 * 		cdef unsigned int ndof 	     = validatePositive(kargs,'ndof','Tank')
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Tank',nnod-1)
 * 		kargs['implicit']	     = assignOptional(kargs,'implicit',1)             # <<<<<<<<<<<<<<
 * 		cdef int implicit 	     = boolean(kargs,'implicit','Tank')
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 59, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 59, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_implicit);
    __Pyx_GIVEREF(__pyx_n_s_implicit);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_implicit);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_int_1);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_kargs, __pyx_n_s_implicit, __pyx_t_1) < 0)) __PYX_ERR(4, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Tank.pyx":60
 * 		cdef unsigned int nnod_input = validatePositive(kargs,'nnod_input','Tank',nnod-1)
 * 		kargs['implicit']	     = assignOptional(kargs,'implicit',1)
 * 		cdef int implicit 	     = boolean(kargs,'implicit','Tank')             # <<<<<<<<<<<<<<
 * 
 * 		onlyAssert(kargs,'state_ini','Tank')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_boolean); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_n_s_Tank};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 60, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_n_s_Tank};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 60, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_implicit);
    __Pyx_GIVEREF(__pyx_n_s_implicit);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_4, __pyx_n_s_implicit);
    __Pyx_INCREF(__pyx_n_s_Tank);
    __Pyx_GIVEREF(__pyx_n_s_Tank);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_4, __pyx_n_s_Tank);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_implicit = __pyx_t_4;

  /* "Tank.pyx":62
 * 		cdef int implicit 	     = boolean(kargs,'implicit','Tank')
 * 
 * 		onlyAssert(kargs,'state_ini','Tank')             # <<<<<<<<<<<<<<
 * 		cdef doublevec state_ini = doublevec_factory(0)
 * 		for i in range(nnod):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_kargs, __pyx_n_s_state_ini, __pyx_n_s_Tank};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 62, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_kargs, __pyx_n_s_state_ini, __pyx_n_s_Tank};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 62, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_state_ini);
    __Pyx_GIVEREF(__pyx_n_s_state_ini);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_state_ini);
    __Pyx_INCREF(__pyx_n_s_Tank);
    __Pyx_GIVEREF(__pyx_n_s_Tank);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Tank);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Tank.pyx":63
 * 
 * 		onlyAssert(kargs,'state_ini','Tank')
 * 		cdef doublevec state_ini = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(nnod):
 * 			for j in range(ndof):
 */
  __pyx_v_state_ini = std::vector<double>(0);

  /* "Tank.pyx":64
 * 		onlyAssert(kargs,'state_ini','Tank')
 * 		cdef doublevec state_ini = doublevec_factory(0)
 * 		for i in range(nnod):             # <<<<<<<<<<<<<<
 * 			for j in range(ndof):
 * 				state_ini.push_back(kargs['state_ini'][i][j])
 */
  __pyx_t_6 = __pyx_v_nnod;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_6; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "Tank.pyx":65
 * 		cdef doublevec state_ini = doublevec_factory(0)
 * 		for i in range(nnod):
 * 			for j in range(ndof):             # <<<<<<<<<<<<<<
 * 				state_ini.push_back(kargs['state_ini'][i][j])
 * 
 */
    __pyx_t_9 = __pyx_v_ndof;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_j = __pyx_t_10;

      /* "Tank.pyx":66
 * 		for i in range(nnod):
 * 			for j in range(ndof):
 * 				state_ini.push_back(kargs['state_ini'][i][j])             # <<<<<<<<<<<<<<
 * 
 * 		onlyAssert(kargs,'histo','Tank')
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_state_ini); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 66, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 66, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_j, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 66, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 66, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_state_ini.push_back(__pyx_t_11);
    }
  }

  /* "Tank.pyx":68
 * 				state_ini.push_back(kargs['state_ini'][i][j])
 * 
 * 		onlyAssert(kargs,'histo','Tank')             # <<<<<<<<<<<<<<
 * 		cdef intvec histo = intvec_factory(0)
 * 		for i in range(len(kargs['histo'])):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_histo, __pyx_n_s_Tank};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 68, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_histo, __pyx_n_s_Tank};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 68, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_histo);
    __Pyx_GIVEREF(__pyx_n_s_histo);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_4, __pyx_n_s_histo);
    __Pyx_INCREF(__pyx_n_s_Tank);
    __Pyx_GIVEREF(__pyx_n_s_Tank);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_4, __pyx_n_s_Tank);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Tank.pyx":69
 * 
 * 		onlyAssert(kargs,'histo','Tank')
 * 		cdef intvec histo = intvec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):
 */
  __pyx_v_histo = std::vector<int>(0);

  /* "Tank.pyx":70
 * 		onlyAssert(kargs,'histo','Tank')
 * 		cdef intvec histo = intvec_factory(0)
 * 		for i in range(len(kargs['histo'])):             # <<<<<<<<<<<<<<
 * 			if(kargs['histo'][i] in range(nnod)):
 * 				histo.push_back(kargs['histo'][i])
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_histo); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(4, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_8; __pyx_t_12+=1) {
    __pyx_v_i = __pyx_t_12;

    /* "Tank.pyx":71
 * 		cdef intvec histo = intvec_factory(0)
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):             # <<<<<<<<<<<<<<
 * 				histo.push_back(kargs['histo'][i])
 * 			else:
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_histo); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nnod); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_13 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(4, 71, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_14 = (__pyx_t_13 != 0);
    if (__pyx_t_14) {

      /* "Tank.pyx":72
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):
 * 				histo.push_back(kargs['histo'][i])             # <<<<<<<<<<<<<<
 * 			else:
 * 				print 'Fail inicialitation in [Tank], some node to histo not exists'
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_histo); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 72, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 72, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 72, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_histo.push_back(__pyx_t_4);

      /* "Tank.pyx":71
 * 		cdef intvec histo = intvec_factory(0)
 * 		for i in range(len(kargs['histo'])):
 * 			if(kargs['histo'][i] in range(nnod)):             # <<<<<<<<<<<<<<
 * 				histo.push_back(kargs['histo'][i])
 * 			else:
 */
      goto __pyx_L9;
    }

    /* "Tank.pyx":74
 * 				histo.push_back(kargs['histo'][i])
 * 			else:
 * 				print 'Fail inicialitation in [Tank], some node to histo not exists'             # <<<<<<<<<<<<<<
 * 				sys.exit()
 * 
 */
    /*else*/ {
      if (__Pyx_PrintOne(0, __pyx_kp_s_Fail_inicialitation_in_Tank_some) < 0) __PYX_ERR(4, 74, __pyx_L1_error)

      /* "Tank.pyx":75
 * 			else:
 * 				print 'Fail inicialitation in [Tank], some node to histo not exists'
 * 				sys.exit()             # <<<<<<<<<<<<<<
 * 
 * 		s =  assignOptional(kargs,'label','tank_default')
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (__pyx_t_1) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 75, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 75, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L9:;
  }

  /* "Tank.pyx":77
 * 				sys.exit()
 * 
 * 		s =  assignOptional(kargs,'label','tank_default')             # <<<<<<<<<<<<<<
 * 		cdef char* label =  s
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_label, __pyx_n_s_tank_default};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 77, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_label, __pyx_n_s_tank_default};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 77, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_label);
    __Pyx_GIVEREF(__pyx_n_s_label);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_label);
    __Pyx_INCREF(__pyx_n_s_tank_default);
    __Pyx_GIVEREF(__pyx_n_s_tank_default);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_tank_default);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_s = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "Tank.pyx":78
 * 
 * 		s =  assignOptional(kargs,'label','tank_default')
 * 		cdef char* label =  s             # <<<<<<<<<<<<<<
 * 
 * 		cdef double Volume = validatePositive(kargs,'Volume','Tank')
 */
  __pyx_t_15 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(4, 78, __pyx_L1_error)
  __pyx_v_label = __pyx_t_15;

  /* "Tank.pyx":80
 * 		cdef char* label =  s
 * 
 * 		cdef double Volume = validatePositive(kargs,'Volume','Tank')             # <<<<<<<<<<<<<<
 * 		cdef double mass   = validatePositive(kargs,'mass','Tank',0.0) #inicio masa en cero??
 * 		cdef double h_film = assignOptional(kargs,'h_film',0.0)
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_Volume, __pyx_n_s_Tank};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 80, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_Volume, __pyx_n_s_Tank};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 80, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_Volume);
    __Pyx_GIVEREF(__pyx_n_s_Volume);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_Volume);
    __Pyx_INCREF(__pyx_n_s_Tank);
    __Pyx_GIVEREF(__pyx_n_s_Tank);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_n_s_Tank);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Volume = __pyx_t_11;

  /* "Tank.pyx":81
 * 
 * 		cdef double Volume = validatePositive(kargs,'Volume','Tank')
 * 		cdef double mass   = validatePositive(kargs,'mass','Tank',0.0) #inicio masa en cero??             # <<<<<<<<<<<<<<
 * 		cdef double h_film = assignOptional(kargs,'h_film',0.0)
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[5] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_mass, __pyx_n_s_Tank, __pyx_float_0_0};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 81, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[5] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_mass, __pyx_n_s_Tank, __pyx_float_0_0};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 81, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_mass);
    __Pyx_GIVEREF(__pyx_n_s_mass);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_mass);
    __Pyx_INCREF(__pyx_n_s_Tank);
    __Pyx_GIVEREF(__pyx_n_s_Tank);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Tank);
    __Pyx_INCREF(__pyx_float_0_0);
    __Pyx_GIVEREF(__pyx_float_0_0);
    PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_4, __pyx_float_0_0);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mass = __pyx_t_11;

  /* "Tank.pyx":82
 * 		cdef double Volume = validatePositive(kargs,'Volume','Tank')
 * 		cdef double mass   = validatePositive(kargs,'mass','Tank',0.0) #inicio masa en cero??
 * 		cdef double h_film = assignOptional(kargs,'h_film',0.0)             # <<<<<<<<<<<<<<
 * 
 * 		cdef double Area_wall = 0
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_h_film, __pyx_float_0_0};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 82, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_h_film, __pyx_float_0_0};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 82, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_h_film);
    __Pyx_GIVEREF(__pyx_n_s_h_film);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_h_film);
    __Pyx_INCREF(__pyx_float_0_0);
    __Pyx_GIVEREF(__pyx_float_0_0);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_float_0_0);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_h_film = __pyx_t_11;

  /* "Tank.pyx":84
 * 		cdef double h_film = assignOptional(kargs,'h_film',0.0)
 * 
 * 		cdef double Area_wall = 0             # <<<<<<<<<<<<<<
 * 		cdef double T_wall    = 0
 * 		if(h_film>0.0):
 */
  __pyx_v_Area_wall = 0.0;

  /* "Tank.pyx":85
 * 
 * 		cdef double Area_wall = 0
 * 		cdef double T_wall    = 0             # <<<<<<<<<<<<<<
 * 		if(h_film>0.0):
 * 			Area_wall = validatePositive(kargs,'Area_wall','Tank')
 */
  __pyx_v_T_wall = 0.0;

  /* "Tank.pyx":86
 * 		cdef double Area_wall = 0
 * 		cdef double T_wall    = 0
 * 		if(h_film>0.0):             # <<<<<<<<<<<<<<
 * 			Area_wall = validatePositive(kargs,'Area_wall','Tank')
 * 			T_wall    = validatePositive(kargs,'T_wall','Tank')
 */
  __pyx_t_14 = ((__pyx_v_h_film > 0.0) != 0);
  if (__pyx_t_14) {

    /* "Tank.pyx":87
 * 		cdef double T_wall    = 0
 * 		if(h_film>0.0):
 * 			Area_wall = validatePositive(kargs,'Area_wall','Tank')             # <<<<<<<<<<<<<<
 * 			T_wall    = validatePositive(kargs,'T_wall','Tank')
 * 
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_Area_wall, __pyx_n_s_Tank};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 87, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_Area_wall, __pyx_n_s_Tank};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 87, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_Area_wall);
      __Pyx_GIVEREF(__pyx_n_s_Area_wall);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_Area_wall);
      __Pyx_INCREF(__pyx_n_s_Tank);
      __Pyx_GIVEREF(__pyx_n_s_Tank);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Tank);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 87, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_Area_wall = __pyx_t_11;

    /* "Tank.pyx":88
 * 		if(h_film>0.0):
 * 			Area_wall = validatePositive(kargs,'Area_wall','Tank')
 * 			T_wall    = validatePositive(kargs,'T_wall','Tank')             # <<<<<<<<<<<<<<
 * 
 * 		# asignacion que puede ser mejorada, la mejor??
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_T_wall, __pyx_n_s_Tank};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 88, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_T_wall, __pyx_n_s_Tank};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 88, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_T_wall);
      __Pyx_GIVEREF(__pyx_n_s_T_wall);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_T_wall);
      __Pyx_INCREF(__pyx_n_s_Tank);
      __Pyx_GIVEREF(__pyx_n_s_Tank);
      PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_n_s_Tank);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_T_wall = __pyx_t_11;

    /* "Tank.pyx":86
 * 		cdef double Area_wall = 0
 * 		cdef double T_wall    = 0
 * 		if(h_film>0.0):             # <<<<<<<<<<<<<<
 * 			Area_wall = validatePositive(kargs,'Area_wall','Tank')
 * 			T_wall    = validatePositive(kargs,'T_wall','Tank')
 */
  }

  /* "Tank.pyx":91
 * 
 * 		# asignacion que puede ser mejorada, la mejor??
 * 		cdef intvec type_end = intvec_factory(0)             # <<<<<<<<<<<<<<
 * 		#for i in range(len(kargs['type_end'])):
 * 		#	type_end.push_back(kargs['type_end'][i])
 */
  __pyx_v_type_end = std::vector<int>(0);

  /* "Tank.pyx":94
 * 		#for i in range(len(kargs['type_end'])):
 * 		#	type_end.push_back(kargs['type_end'][i])
 * 		for i in range(len(kargs['int2tube'])):             # <<<<<<<<<<<<<<
 * 			type_end.push_back(1)
 * 		for i in range(len(kargs['exh2tube'])):
 */
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_int2tube); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(4, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_8; __pyx_t_12+=1) {
    __pyx_v_i = __pyx_t_12;

    /* "Tank.pyx":95
 * 		#	type_end.push_back(kargs['type_end'][i])
 * 		for i in range(len(kargs['int2tube'])):
 * 			type_end.push_back(1)             # <<<<<<<<<<<<<<
 * 		for i in range(len(kargs['exh2tube'])):
 * 			type_end.push_back(-1)
 */
    __pyx_v_type_end.push_back(1);
  }

  /* "Tank.pyx":96
 * 		for i in range(len(kargs['int2tube'])):
 * 			type_end.push_back(1)
 * 		for i in range(len(kargs['exh2tube'])):             # <<<<<<<<<<<<<<
 * 			type_end.push_back(-1)
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_exh2tube); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(4, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_8; __pyx_t_12+=1) {
    __pyx_v_i = __pyx_t_12;

    /* "Tank.pyx":97
 * 			type_end.push_back(1)
 * 		for i in range(len(kargs['exh2tube'])):
 * 			type_end.push_back(-1)             # <<<<<<<<<<<<<<
 * 
 * 		cdef doublevec Cd_ports = doublevec_factory(0)
 */
    __pyx_v_type_end.push_back(-1);
  }

  /* "Tank.pyx":99
 * 			type_end.push_back(-1)
 * 
 * 		cdef doublevec Cd_ports = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(len(kargs['Cd_ports'])):
 * 			Cd_ports.push_back(kargs['Cd_ports'][i])
 */
  __pyx_v_Cd_ports = std::vector<double>(0);

  /* "Tank.pyx":100
 * 
 * 		cdef doublevec Cd_ports = doublevec_factory(0)
 * 		for i in range(len(kargs['Cd_ports'])):             # <<<<<<<<<<<<<<
 * 			Cd_ports.push_back(kargs['Cd_ports'][i])
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_Cd_ports); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(4, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_8; __pyx_t_12+=1) {
    __pyx_v_i = __pyx_t_12;

    /* "Tank.pyx":101
 * 		cdef doublevec Cd_ports = doublevec_factory(0)
 * 		for i in range(len(kargs['Cd_ports'])):
 * 			Cd_ports.push_back(kargs['Cd_ports'][i])             # <<<<<<<<<<<<<<
 * 
 * 		onlyAssert(kargs,'int2tube','Tank')
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_Cd_ports); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_Cd_ports.push_back(__pyx_t_11);
  }

  /* "Tank.pyx":103
 * 			Cd_ports.push_back(kargs['Cd_ports'][i])
 * 
 * 		onlyAssert(kargs,'int2tube','Tank')             # <<<<<<<<<<<<<<
 * 		onlyAssert(kargs,'exh2tube','Tank')
 * 		cdef int l = len(kargs['int2tube'])+len(kargs['exh2tube'])
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_int2tube, __pyx_n_s_Tank};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 103, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_int2tube, __pyx_n_s_Tank};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 103, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_int2tube);
    __Pyx_GIVEREF(__pyx_n_s_int2tube);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_int2tube);
    __Pyx_INCREF(__pyx_n_s_Tank);
    __Pyx_GIVEREF(__pyx_n_s_Tank);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Tank);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Tank.pyx":104
 * 
 * 		onlyAssert(kargs,'int2tube','Tank')
 * 		onlyAssert(kargs,'exh2tube','Tank')             # <<<<<<<<<<<<<<
 * 		cdef int l = len(kargs['int2tube'])+len(kargs['exh2tube'])
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_exh2tube, __pyx_n_s_Tank};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 104, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_exh2tube, __pyx_n_s_Tank};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 104, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_exh2tube);
    __Pyx_GIVEREF(__pyx_n_s_exh2tube);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_4, __pyx_n_s_exh2tube);
    __Pyx_INCREF(__pyx_n_s_Tank);
    __Pyx_GIVEREF(__pyx_n_s_Tank);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_4, __pyx_n_s_Tank);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Tank.pyx":105
 * 		onlyAssert(kargs,'int2tube','Tank')
 * 		onlyAssert(kargs,'exh2tube','Tank')
 * 		cdef int l = len(kargs['int2tube'])+len(kargs['exh2tube'])             # <<<<<<<<<<<<<<
 * 
 * 		cdef intvec int2tube = intvec_factory(0)
 */
  __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_int2tube); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(4, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_exh2tube); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_12 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(4, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_l = (__pyx_t_8 + __pyx_t_12);

  /* "Tank.pyx":107
 * 		cdef int l = len(kargs['int2tube'])+len(kargs['exh2tube'])
 * 
 * 		cdef intvec int2tube = intvec_factory(0)             # <<<<<<<<<<<<<<
 * 		cdef intvec exh2tube = intvec_factory(0)
 * 
 */
  __pyx_v_int2tube = std::vector<int>(0);

  /* "Tank.pyx":108
 * 
 * 		cdef intvec int2tube = intvec_factory(0)
 * 		cdef intvec exh2tube = intvec_factory(0)             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(len(kargs['int2tube'])):
 */
  __pyx_v_exh2tube = std::vector<int>(0);

  /* "Tank.pyx":110
 * 		cdef intvec exh2tube = intvec_factory(0)
 * 
 * 		for i in range(len(kargs['int2tube'])):             # <<<<<<<<<<<<<<
 * 			int2tube.push_back(kargs['int2tube'][i])
 * 
 */
  __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_int2tube); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_12 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(4, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_12; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "Tank.pyx":111
 * 
 * 		for i in range(len(kargs['int2tube'])):
 * 			int2tube.push_back(kargs['int2tube'][i])             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(len(kargs['exh2tube'])):
 */
    __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_int2tube); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_7, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 111, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_int2tube.push_back(__pyx_t_4);
  }

  /* "Tank.pyx":113
 * 			int2tube.push_back(kargs['int2tube'][i])
 * 
 * 		for i in range(len(kargs['exh2tube'])):             # <<<<<<<<<<<<<<
 * 			exh2tube.push_back(kargs['exh2tube'][i])
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_exh2tube); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_12 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(4, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_12; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "Tank.pyx":114
 * 
 * 		for i in range(len(kargs['exh2tube'])):
 * 			exh2tube.push_back(kargs['exh2tube'][i])             # <<<<<<<<<<<<<<
 * 
 * 		cdef int extras	= boolean(kargs,'extras','Tank',0)
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_exh2tube); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 114, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_exh2tube.push_back(__pyx_t_4);
  }

  /* "Tank.pyx":116
 * 			exh2tube.push_back(kargs['exh2tube'][i])
 * 
 * 		cdef int extras	= boolean(kargs,'extras','Tank',0)             # <<<<<<<<<<<<<<
 * 
 * 		cdef int type
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_boolean); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_extras, __pyx_n_s_Tank, __pyx_int_0};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 116, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_extras, __pyx_n_s_Tank, __pyx_int_0};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 116, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_extras);
    __Pyx_GIVEREF(__pyx_n_s_extras);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_extras);
    __Pyx_INCREF(__pyx_n_s_Tank);
    __Pyx_GIVEREF(__pyx_n_s_Tank);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Tank);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_4, __pyx_int_0);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_extras = __pyx_t_4;

  /* "Tank.pyx":119
 * 
 * 		cdef int type
 * 		if('type' in kargs.keys()):             # <<<<<<<<<<<<<<
 * 			validateInList(kargs,'type','Tank', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):
 */
  __pyx_t_7 = __Pyx_PyDict_Keys(__pyx_v_kargs); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_14 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_type, __pyx_t_7, Py_EQ)); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(4, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_13 = (__pyx_t_14 != 0);
  if (__pyx_t_13) {

    /* "Tank.pyx":120
 * 		cdef int type
 * 		if('type' in kargs.keys()):
 * 			validateInList(kargs,'type','Tank', ['intake', 'exhaust'], 'none')             # <<<<<<<<<<<<<<
 * 			if(kargs['type']=='intake'):
 * 				type = 1
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateInList); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_intake);
    __Pyx_GIVEREF(__pyx_n_s_intake);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_intake);
    __Pyx_INCREF(__pyx_n_s_exhaust);
    __Pyx_GIVEREF(__pyx_n_s_exhaust);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_exhaust);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[6] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_type, __pyx_n_s_Tank, __pyx_t_3, __pyx_n_s_none};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 120, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[6] = {__pyx_t_1, __pyx_v_kargs, __pyx_n_s_type, __pyx_n_s_Tank, __pyx_t_3, __pyx_n_s_none};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 120, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(5+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 120, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_kargs);
      __Pyx_GIVEREF(__pyx_v_kargs);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
      __Pyx_INCREF(__pyx_n_s_type);
      __Pyx_GIVEREF(__pyx_n_s_type);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_type);
      __Pyx_INCREF(__pyx_n_s_Tank);
      __Pyx_GIVEREF(__pyx_n_s_Tank);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Tank);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_none);
      __Pyx_GIVEREF(__pyx_n_s_none);
      PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_n_s_none);
      __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 120, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "Tank.pyx":121
 * 		if('type' in kargs.keys()):
 * 			validateInList(kargs,'type','Tank', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):             # <<<<<<<<<<<<<<
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):
 */
    __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_type); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_7, __pyx_n_s_intake, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(4, 121, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_13) {

      /* "Tank.pyx":122
 * 			validateInList(kargs,'type','Tank', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):
 * 				type = 1             # <<<<<<<<<<<<<<
 * 			elif(kargs['type']=='exhaust'):
 * 				type = -1
 */
      __pyx_v_type = 1;

      /* "Tank.pyx":121
 * 		if('type' in kargs.keys()):
 * 			validateInList(kargs,'type','Tank', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):             # <<<<<<<<<<<<<<
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):
 */
      goto __pyx_L22;
    }

    /* "Tank.pyx":123
 * 			if(kargs['type']=='intake'):
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):             # <<<<<<<<<<<<<<
 * 				type = -1
 * 		else:
 */
    __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_type); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_7, __pyx_n_s_exhaust, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(4, 123, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_13) {

      /* "Tank.pyx":124
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):
 * 				type = -1             # <<<<<<<<<<<<<<
 * 		else:
 * 			print 'It is not indicated the type of tank'
 */
      __pyx_v_type = -1;

      /* "Tank.pyx":123
 * 			if(kargs['type']=='intake'):
 * 				type = 1
 * 			elif(kargs['type']=='exhaust'):             # <<<<<<<<<<<<<<
 * 				type = -1
 * 		else:
 */
    }
    __pyx_L22:;

    /* "Tank.pyx":119
 * 
 * 		cdef int type
 * 		if('type' in kargs.keys()):             # <<<<<<<<<<<<<<
 * 			validateInList(kargs,'type','Tank', ['intake', 'exhaust'], 'none')
 * 			if(kargs['type']=='intake'):
 */
    goto __pyx_L21;
  }

  /* "Tank.pyx":126
 * 				type = -1
 * 		else:
 * 			print 'It is not indicated the type of tank'             # <<<<<<<<<<<<<<
 * 			print 'Options are: intake or exhaust'
 * 			# raise ValueError
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_It_is_not_indicated_the_type_of_3) < 0) __PYX_ERR(4, 126, __pyx_L1_error)

    /* "Tank.pyx":127
 * 		else:
 * 			print 'It is not indicated the type of tank'
 * 			print 'Options are: intake or exhaust'             # <<<<<<<<<<<<<<
 * 			# raise ValueError
 * 			type = 1
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Options_are_intake_or_exhaust) < 0) __PYX_ERR(4, 127, __pyx_L1_error)

    /* "Tank.pyx":129
 * 			print 'Options are: intake or exhaust'
 * 			# raise ValueError
 * 			type = 1             # <<<<<<<<<<<<<<
 * 
 * 		self.thisptr = new_Tank(nnod, ndof, nnod_input, implicit,
 */
    __pyx_v_type = 1;
  }
  __pyx_L21:;

  /* "Tank.pyx":131
 * 			type = 1
 * 
 * 		self.thisptr = new_Tank(nnod, ndof, nnod_input, implicit,             # <<<<<<<<<<<<<<
 * 					state_ini, histo, label, Volume,
 * 					mass, h_film, Area_wall, T_wall,
 */
  __pyx_v_self->thisptr = new Tank(__pyx_v_nnod, __pyx_v_ndof, __pyx_v_nnod_input, __pyx_v_implicit, __pyx_v_state_ini, __pyx_v_histo, __pyx_v_label, __pyx_v_Volume, __pyx_v_mass, __pyx_v_h_film, __pyx_v_Area_wall, __pyx_v_T_wall, __pyx_v_type_end, __pyx_v_Cd_ports, __pyx_v_int2tube, __pyx_v_exh2tube, __pyx_v_extras, __pyx_v_type);

  /* "Tank.pyx":54
 * 	cdef c_Tank *thisptr
 * 
 * 	def __cinit__(self, **kargs):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nnod 	     = validatePositive(kargs,'nnod','Tank')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("simCythonCPP.Tank.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Tank.pyx":137
 * 					exh2tube, extras, type)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del_Tank(self.thisptr)
 * 
 */

/* Python wrapper */
static void __pyx_pw_12simCythonCPP_4Tank_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_12simCythonCPP_4Tank_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_12simCythonCPP_4Tank_2__dealloc__(((struct __pyx_obj_12simCythonCPP_Tank *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_12simCythonCPP_4Tank_2__dealloc__(struct __pyx_obj_12simCythonCPP_Tank *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "Tank.pyx":138
 * 
 * 	def __dealloc__(self):
 * 		del_Tank(self.thisptr)             # <<<<<<<<<<<<<<
 * 
 */
  delete(__pyx_v_self->thisptr);

  /* "Tank.pyx":137
 * 					exh2tube, extras, type)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del_Tank(self.thisptr)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Atmosphere.pyx":36
 * 	cdef c_Atmosphere *thisptr
 * 
 * 	def __cinit__(self, **kargs):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nnod 			= assignOptional(kargs,'nnod_input',1)
 */

/* Python wrapper */
static int __pyx_pw_12simCythonCPP_10Atmosphere_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_12simCythonCPP_10Atmosphere_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kargs);
  __pyx_r = __pyx_pf_12simCythonCPP_10Atmosphere___cinit__(((struct __pyx_obj_12simCythonCPP_Atmosphere *)__pyx_v_self), __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_12simCythonCPP_10Atmosphere___cinit__(struct __pyx_obj_12simCythonCPP_Atmosphere *__pyx_v_self, PyObject *__pyx_v_kargs) {
  unsigned int __pyx_v_nnod;
  unsigned int __pyx_v_ndof;
  unsigned int __pyx_v_nnod_input;
  int __pyx_v_implicit;
  std::vector<double> __pyx_v_state_ini;
  unsigned int __pyx_v_j;
  std::vector<int> __pyx_v_histo;
  PyObject *__pyx_v_s = NULL;
  char *__pyx_v_label;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  unsigned int __pyx_t_9;
  double __pyx_t_10;
  char *__pyx_t_11;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "Atmosphere.pyx":38
 * 	def __cinit__(self, **kargs):
 * 
 * 		cdef unsigned int nnod 			= assignOptional(kargs,'nnod_input',1)             # <<<<<<<<<<<<<<
 * 		cdef unsigned int ndof 			= validatePositive(kargs,'ndof','Atmosphere')
 * 		cdef unsigned int nnod_input 	= assignOptional(kargs,'nnod_input',0)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_nnod_input, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 38, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_nnod_input, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 38, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_nnod_input);
    __Pyx_GIVEREF(__pyx_n_s_nnod_input);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_nnod_input);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_int_1);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(5, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nnod = __pyx_t_6;

  /* "Atmosphere.pyx":39
 * 
 * 		cdef unsigned int nnod 			= assignOptional(kargs,'nnod_input',1)
 * 		cdef unsigned int ndof 			= validatePositive(kargs,'ndof','Atmosphere')             # <<<<<<<<<<<<<<
 * 		cdef unsigned int nnod_input 	= assignOptional(kargs,'nnod_input',0)
 * 		kargs['implicit']				= assignOptional(kargs,'implicit',0)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_ndof, __pyx_n_s_Atmosphere};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 39, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_ndof, __pyx_n_s_Atmosphere};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 39, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_ndof);
    __Pyx_GIVEREF(__pyx_n_s_ndof);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_ndof);
    __Pyx_INCREF(__pyx_n_s_Atmosphere);
    __Pyx_GIVEREF(__pyx_n_s_Atmosphere);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Atmosphere);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(5, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ndof = __pyx_t_6;

  /* "Atmosphere.pyx":40
 * 		cdef unsigned int nnod 			= assignOptional(kargs,'nnod_input',1)
 * 		cdef unsigned int ndof 			= validatePositive(kargs,'ndof','Atmosphere')
 * 		cdef unsigned int nnod_input 	= assignOptional(kargs,'nnod_input',0)             # <<<<<<<<<<<<<<
 * 		kargs['implicit']				= assignOptional(kargs,'implicit',0)
 * 		cdef int implicit 				= boolean(kargs,'implicit','Atmosphere')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_nnod_input, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 40, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_nnod_input, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 40, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_nnod_input);
    __Pyx_GIVEREF(__pyx_n_s_nnod_input);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_nnod_input);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_int_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(5, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nnod_input = __pyx_t_6;

  /* "Atmosphere.pyx":41
 * 		cdef unsigned int ndof 			= validatePositive(kargs,'ndof','Atmosphere')
 * 		cdef unsigned int nnod_input 	= assignOptional(kargs,'nnod_input',0)
 * 		kargs['implicit']				= assignOptional(kargs,'implicit',0)             # <<<<<<<<<<<<<<
 * 		cdef int implicit 				= boolean(kargs,'implicit','Atmosphere')
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 41, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 41, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_implicit);
    __Pyx_GIVEREF(__pyx_n_s_implicit);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_implicit);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_int_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_kargs, __pyx_n_s_implicit, __pyx_t_1) < 0)) __PYX_ERR(5, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Atmosphere.pyx":42
 * 		cdef unsigned int nnod_input 	= assignOptional(kargs,'nnod_input',0)
 * 		kargs['implicit']				= assignOptional(kargs,'implicit',0)
 * 		cdef int implicit 				= boolean(kargs,'implicit','Atmosphere')             # <<<<<<<<<<<<<<
 * 
 * 		onlyAssert(kargs,'state_ini','Atmosphere')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_boolean); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_n_s_Atmosphere};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 42, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_implicit, __pyx_n_s_Atmosphere};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 42, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_implicit);
    __Pyx_GIVEREF(__pyx_n_s_implicit);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_implicit);
    __Pyx_INCREF(__pyx_n_s_Atmosphere);
    __Pyx_GIVEREF(__pyx_n_s_Atmosphere);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Atmosphere);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_implicit = __pyx_t_4;

  /* "Atmosphere.pyx":44
 * 		cdef int implicit 				= boolean(kargs,'implicit','Atmosphere')
 * 
 * 		onlyAssert(kargs,'state_ini','Atmosphere')             # <<<<<<<<<<<<<<
 * 		cdef doublevec state_ini = doublevec_factory(0)
 * 		#siempre solo 1 nodo?? asi por la interfaz.. se podria cambiar
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_state_ini, __pyx_n_s_Atmosphere};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 44, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_kargs, __pyx_n_s_state_ini, __pyx_n_s_Atmosphere};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 44, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_state_ini);
    __Pyx_GIVEREF(__pyx_n_s_state_ini);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_state_ini);
    __Pyx_INCREF(__pyx_n_s_Atmosphere);
    __Pyx_GIVEREF(__pyx_n_s_Atmosphere);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Atmosphere);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Atmosphere.pyx":45
 * 
 * 		onlyAssert(kargs,'state_ini','Atmosphere')
 * 		cdef doublevec state_ini = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		#siempre solo 1 nodo?? asi por la interfaz.. se podria cambiar
 * 		#for i in range(nnod):
 */
  __pyx_v_state_ini = std::vector<double>(0);

  /* "Atmosphere.pyx":50
 * 		#	for j in range(ndof):
 * 		#		state_ini.push_back(kargs['state_ini'][i][j])
 * 		if isinstance(kargs['state_ini'][0],list):             # <<<<<<<<<<<<<<
 * 			kargs['state_ini'] = kargs['state_ini'][0]
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_state_ini); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = PyList_Check(__pyx_t_2); 
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "Atmosphere.pyx":51
 * 		#		state_ini.push_back(kargs['state_ini'][i][j])
 * 		if isinstance(kargs['state_ini'][0],list):
 * 			kargs['state_ini'] = kargs['state_ini'][0]             # <<<<<<<<<<<<<<
 * 
 * 		for j in range(ndof):
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_state_ini); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyDict_SetItem(__pyx_v_kargs, __pyx_n_s_state_ini, __pyx_t_1) < 0)) __PYX_ERR(5, 51, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "Atmosphere.pyx":50
 * 		#	for j in range(ndof):
 * 		#		state_ini.push_back(kargs['state_ini'][i][j])
 * 		if isinstance(kargs['state_ini'][0],list):             # <<<<<<<<<<<<<<
 * 			kargs['state_ini'] = kargs['state_ini'][0]
 * 
 */
  }

  /* "Atmosphere.pyx":53
 * 			kargs['state_ini'] = kargs['state_ini'][0]
 * 
 * 		for j in range(ndof):             # <<<<<<<<<<<<<<
 * 			state_ini.push_back(kargs['state_ini'][j])
 * 
 */
  __pyx_t_6 = __pyx_v_ndof;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_6; __pyx_t_9+=1) {
    __pyx_v_j = __pyx_t_9;

    /* "Atmosphere.pyx":54
 * 
 * 		for j in range(ndof):
 * 			state_ini.push_back(kargs['state_ini'][j])             # <<<<<<<<<<<<<<
 * 
 * 		#ATMOSPHERE SIN HISTO!!
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_state_ini); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_j, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 54, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_state_ini.push_back(__pyx_t_10);
  }

  /* "Atmosphere.pyx":58
 * 		#ATMOSPHERE SIN HISTO!!
 * 		#onlyAssert(kargs,'histo','Atmosphere')
 * 		cdef intvec histo = intvec_factory(0)             # <<<<<<<<<<<<<<
 * 		#for i in range(len(kargs['histo'])):
 * 		#	if(kargs['histo'][i] in range(nnod)):
 */
  __pyx_v_histo = std::vector<int>(0);

  /* "Atmosphere.pyx":66
 * 		#		sys.exit()
 * 
 * 		s =  assignOptional(kargs,'label','atm_default')             # <<<<<<<<<<<<<<
 * 		cdef char* label =  s
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_label, __pyx_n_s_atm_default};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 66, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_kargs, __pyx_n_s_label, __pyx_n_s_atm_default};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 66, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_kargs);
    __Pyx_GIVEREF(__pyx_v_kargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_kargs);
    __Pyx_INCREF(__pyx_n_s_label);
    __Pyx_GIVEREF(__pyx_n_s_label);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_label);
    __Pyx_INCREF(__pyx_n_s_atm_default);
    __Pyx_GIVEREF(__pyx_n_s_atm_default);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_atm_default);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_s = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "Atmosphere.pyx":67
 * 
 * 		s =  assignOptional(kargs,'label','atm_default')
 * 		cdef char* label =  s             # <<<<<<<<<<<<<<
 * 
 * 		self.thisptr = new_Atmosphere(nnod, ndof, nnod_input, implicit, state_ini,histo, label)
 */
  __pyx_t_11 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) __PYX_ERR(5, 67, __pyx_L1_error)
  __pyx_v_label = __pyx_t_11;

  /* "Atmosphere.pyx":69
 * 		cdef char* label =  s
 * 
 * 		self.thisptr = new_Atmosphere(nnod, ndof, nnod_input, implicit, state_ini,histo, label)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr = new Atmosphere(__pyx_v_nnod, __pyx_v_ndof, __pyx_v_nnod_input, __pyx_v_implicit, __pyx_v_state_ini, __pyx_v_histo, __pyx_v_label);

  /* "Atmosphere.pyx":36
 * 	cdef c_Atmosphere *thisptr
 * 
 * 	def __cinit__(self, **kargs):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nnod 			= assignOptional(kargs,'nnod_input',1)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("simCythonCPP.Atmosphere.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Atmosphere.pyx":72
 * 
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del_Atmosphere(self.thisptr)
 * 
 */

/* Python wrapper */
static void __pyx_pw_12simCythonCPP_10Atmosphere_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_12simCythonCPP_10Atmosphere_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_12simCythonCPP_10Atmosphere_2__dealloc__(((struct __pyx_obj_12simCythonCPP_Atmosphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_12simCythonCPP_10Atmosphere_2__dealloc__(struct __pyx_obj_12simCythonCPP_Atmosphere *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "Atmosphere.pyx":73
 * 
 * 	def __dealloc__(self):
 * 		del_Atmosphere(self.thisptr)             # <<<<<<<<<<<<<<
 * 
 */
  delete(__pyx_v_self->thisptr);

  /* "Atmosphere.pyx":72
 * 
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del_Atmosphere(self.thisptr)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Simulator.pyx":131
 * 	cdef c_Simulator *thisptr
 * 
 * 	def __cinit__(self,**kargs):             # <<<<<<<<<<<<<<
 * 
 * 		dataCylinders 	= kargs['Cylinders']
 */

/* Python wrapper */
static int __pyx_pw_12simCythonCPP_9Simulator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_12simCythonCPP_9Simulator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kargs);
  __pyx_r = __pyx_pf_12simCythonCPP_9Simulator___cinit__(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self), __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_12simCythonCPP_9Simulator___cinit__(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self, PyObject *__pyx_v_kargs) {
  PyObject *__pyx_v_dataCylinders = NULL;
  PyObject *__pyx_v_dataTubes = NULL;
  PyObject *__pyx_v_dataJunctions = NULL;
  PyObject *__pyx_v_dataTanks = NULL;
  PyObject *__pyx_v_dataAtmospheres = NULL;
  PyObject *__pyx_v_sargs = NULL;
  double __pyx_v_dt;
  double __pyx_v_tf;
  int __pyx_v_ntubes;
  int __pyx_v_ncyl;
  int __pyx_v_ntank;
  int __pyx_v_njunc;
  int __pyx_v_natm;
  int __pyx_v_iter_sim1d;
  int __pyx_v_nsave;
  int __pyx_v_nappend;
  int __pyx_v_get_state;
  std::vector<double> __pyx_v_Xn;
  std::vector<double> __pyx_v_Xn1;
  std::vector<double> __pyx_v_rpms;
  Py_ssize_t __pyx_v_i;
  int __pyx_v_nrpms;
  double __pyx_v_dtheta_rpm;
  int __pyx_v_inicia;
  double __pyx_v_Courant;
  double __pyx_v_ga;
  int __pyx_v_viscous_flow;
  int __pyx_v_heat_flow;
  double __pyx_v_R_gas;
  int __pyx_v_nstroke;
  int __pyx_v_ncycles;
  std::vector<int> __pyx_v_ig_order;
  int __pyx_v_engine_type;
  PyObject *__pyx_v_s = NULL;
  char *__pyx_v_filein_state;
  char *__pyx_v_filesave_state;
  char *__pyx_v_filein_spd;
  char *__pyx_v_filesave_spd;
  char *__pyx_v_folder_name;
  int __pyx_v_calc_engine_data;
  int __pyx_v_use_global_gas_prop;
  double __pyx_v_ga_intake;
  double __pyx_v_ga_exhaust;
  std::vector<Tube> __pyx_v_tubes;
  struct __pyx_obj_12simCythonCPP_Tube *__pyx_v_auxTube = 0;
  int __pyx_v_k;
  double __pyx_v_theta_cycle;
  double __pyx_v_delta_encendido;
  double __pyx_v_theta_start;
  std::vector<Cylinder> __pyx_v_cylinders;
  struct __pyx_obj_12simCythonCPP_Cylinder *__pyx_v_auxCyl = 0;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_v_icyl = NULL;
  PyObject *__pyx_v_theta_0 = NULL;
  std::vector<Tank> __pyx_v_tanks;
  struct __pyx_obj_12simCythonCPP_Tank *__pyx_v_auxTank = 0;
  std::vector<Junction> __pyx_v_junctions;
  struct __pyx_obj_12simCythonCPP_Junction *__pyx_v_auxJunc = 0;
  std::vector<Atmosphere> __pyx_v_atmospheres;
  struct __pyx_obj_12simCythonCPP_Atmosphere *__pyx_v_auxAtm = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "Simulator.pyx":133
 * 	def __cinit__(self,**kargs):
 * 
 * 		dataCylinders 	= kargs['Cylinders']             # <<<<<<<<<<<<<<
 * 		dataTubes 	= kargs['Tubes']
 * 		dataJunctions 	= kargs['Junctions']
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_Cylinders); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dataCylinders = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "Simulator.pyx":134
 * 
 * 		dataCylinders 	= kargs['Cylinders']
 * 		dataTubes 	= kargs['Tubes']             # <<<<<<<<<<<<<<
 * 		dataJunctions 	= kargs['Junctions']
 * 		dataTanks	= kargs['Tanks']
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_Tubes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dataTubes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "Simulator.pyx":135
 * 		dataCylinders 	= kargs['Cylinders']
 * 		dataTubes 	= kargs['Tubes']
 * 		dataJunctions 	= kargs['Junctions']             # <<<<<<<<<<<<<<
 * 		dataTanks	= kargs['Tanks']
 * 		dataAtmospheres	= kargs['Atmospheres']
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_Junctions); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dataJunctions = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "Simulator.pyx":136
 * 		dataTubes 	= kargs['Tubes']
 * 		dataJunctions 	= kargs['Junctions']
 * 		dataTanks	= kargs['Tanks']             # <<<<<<<<<<<<<<
 * 		dataAtmospheres	= kargs['Atmospheres']
 * 		sargs		= kargs['Simulator']
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_Tanks); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dataTanks = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "Simulator.pyx":137
 * 		dataJunctions 	= kargs['Junctions']
 * 		dataTanks	= kargs['Tanks']
 * 		dataAtmospheres	= kargs['Atmospheres']             # <<<<<<<<<<<<<<
 * 		sargs		= kargs['Simulator']
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_Atmospheres); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dataAtmospheres = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "Simulator.pyx":138
 * 		dataTanks	= kargs['Tanks']
 * 		dataAtmospheres	= kargs['Atmospheres']
 * 		sargs		= kargs['Simulator']             # <<<<<<<<<<<<<<
 * 
 * 		cdef double dt	= assignOptional(sargs,'dt',0.001)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kargs, __pyx_n_s_Simulator); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sargs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "Simulator.pyx":140
 * 		sargs		= kargs['Simulator']
 * 
 * 		cdef double dt	= assignOptional(sargs,'dt',0.001)             # <<<<<<<<<<<<<<
 * 		cdef double tf	= assignOptional(sargs,'tf',1.0)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_dt, __pyx_float_0_001};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 140, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_dt, __pyx_float_0_001};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 140, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_dt);
    __Pyx_GIVEREF(__pyx_n_s_dt);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_dt);
    __Pyx_INCREF(__pyx_float_0_001);
    __Pyx_GIVEREF(__pyx_float_0_001);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_float_0_001);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dt = __pyx_t_6;

  /* "Simulator.pyx":141
 * 
 * 		cdef double dt	= assignOptional(sargs,'dt',0.001)
 * 		cdef double tf	= assignOptional(sargs,'tf',1.0)             # <<<<<<<<<<<<<<
 * 
 * 		cdef int ntubes	= len(dataTubes)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_tf, __pyx_float_1_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_tf, __pyx_float_1_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_tf);
    __Pyx_GIVEREF(__pyx_n_s_tf);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_tf);
    __Pyx_INCREF(__pyx_float_1_0);
    __Pyx_GIVEREF(__pyx_float_1_0);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_float_1_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_tf = __pyx_t_6;

  /* "Simulator.pyx":143
 * 		cdef double tf	= assignOptional(sargs,'tf',1.0)
 * 
 * 		cdef int ntubes	= len(dataTubes)             # <<<<<<<<<<<<<<
 * 		cdef int ncyl	= len(dataCylinders)
 * 		cdef int ntank	= len(dataTanks)
 */
  __pyx_t_7 = PyObject_Length(__pyx_v_dataTubes); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(1, 143, __pyx_L1_error)
  __pyx_v_ntubes = __pyx_t_7;

  /* "Simulator.pyx":144
 * 
 * 		cdef int ntubes	= len(dataTubes)
 * 		cdef int ncyl	= len(dataCylinders)             # <<<<<<<<<<<<<<
 * 		cdef int ntank	= len(dataTanks)
 * 		cdef int njunc	= len(dataJunctions)
 */
  __pyx_t_7 = PyObject_Length(__pyx_v_dataCylinders); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(1, 144, __pyx_L1_error)
  __pyx_v_ncyl = __pyx_t_7;

  /* "Simulator.pyx":145
 * 		cdef int ntubes	= len(dataTubes)
 * 		cdef int ncyl	= len(dataCylinders)
 * 		cdef int ntank	= len(dataTanks)             # <<<<<<<<<<<<<<
 * 		cdef int njunc	= len(dataJunctions)
 * 		cdef int natm	= len(dataAtmospheres)
 */
  __pyx_t_7 = PyObject_Length(__pyx_v_dataTanks); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(1, 145, __pyx_L1_error)
  __pyx_v_ntank = __pyx_t_7;

  /* "Simulator.pyx":146
 * 		cdef int ncyl	= len(dataCylinders)
 * 		cdef int ntank	= len(dataTanks)
 * 		cdef int njunc	= len(dataJunctions)             # <<<<<<<<<<<<<<
 * 		cdef int natm	= len(dataAtmospheres)
 * 
 */
  __pyx_t_7 = PyObject_Length(__pyx_v_dataJunctions); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(1, 146, __pyx_L1_error)
  __pyx_v_njunc = __pyx_t_7;

  /* "Simulator.pyx":147
 * 		cdef int ntank	= len(dataTanks)
 * 		cdef int njunc	= len(dataJunctions)
 * 		cdef int natm	= len(dataAtmospheres)             # <<<<<<<<<<<<<<
 * 
 * 		cdef int iter_sim1d = assignOptional(sargs,'iter_sim1d',1)
 */
  __pyx_t_7 = PyObject_Length(__pyx_v_dataAtmospheres); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_v_natm = __pyx_t_7;

  /* "Simulator.pyx":149
 * 		cdef int natm	= len(dataAtmospheres)
 * 
 * 		cdef int iter_sim1d = assignOptional(sargs,'iter_sim1d',1)             # <<<<<<<<<<<<<<
 * 		cdef int nsave	    = validatePositive(sargs,'nsave','Simulator',0)
 * 		cdef int nappend    = validatePositive(sargs,'nappend','Simulator',0)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_iter_sim1d, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 149, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_iter_sim1d, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 149, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_iter_sim1d);
    __Pyx_GIVEREF(__pyx_n_s_iter_sim1d);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_iter_sim1d);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_int_1);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_iter_sim1d = __pyx_t_4;

  /* "Simulator.pyx":150
 * 
 * 		cdef int iter_sim1d = assignOptional(sargs,'iter_sim1d',1)
 * 		cdef int nsave	    = validatePositive(sargs,'nsave','Simulator',0)             # <<<<<<<<<<<<<<
 * 		cdef int nappend    = validatePositive(sargs,'nappend','Simulator',0)
 * 		cdef int get_state  = assignOptional(sargs,'get_state',0)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_nsave, __pyx_n_s_Simulator, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 150, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_nsave, __pyx_n_s_Simulator, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 150, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_nsave);
    __Pyx_GIVEREF(__pyx_n_s_nsave);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_nsave);
    __Pyx_INCREF(__pyx_n_s_Simulator);
    __Pyx_GIVEREF(__pyx_n_s_Simulator);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Simulator);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_4, __pyx_int_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nsave = __pyx_t_4;

  /* "Simulator.pyx":151
 * 		cdef int iter_sim1d = assignOptional(sargs,'iter_sim1d',1)
 * 		cdef int nsave	    = validatePositive(sargs,'nsave','Simulator',0)
 * 		cdef int nappend    = validatePositive(sargs,'nappend','Simulator',0)             # <<<<<<<<<<<<<<
 * 		cdef int get_state  = assignOptional(sargs,'get_state',0)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_nappend, __pyx_n_s_Simulator, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_nappend, __pyx_n_s_Simulator, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_nappend);
    __Pyx_GIVEREF(__pyx_n_s_nappend);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_nappend);
    __Pyx_INCREF(__pyx_n_s_Simulator);
    __Pyx_GIVEREF(__pyx_n_s_Simulator);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Simulator);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_int_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nappend = __pyx_t_4;

  /* "Simulator.pyx":152
 * 		cdef int nsave	    = validatePositive(sargs,'nsave','Simulator',0)
 * 		cdef int nappend    = validatePositive(sargs,'nappend','Simulator',0)
 * 		cdef int get_state  = assignOptional(sargs,'get_state',0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_get_state, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_get_state, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_get_state);
    __Pyx_GIVEREF(__pyx_n_s_get_state);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_get_state);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_int_0);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_get_state = __pyx_t_4;

  /* "Simulator.pyx":155
 * 
 * 
 * 		cdef doublevec Xn = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		# ahora hecho en c++!!!
 * 		# el estado global se lee de un archivo
 */
  __pyx_v_Xn = std::vector<double>(0);

  /* "Simulator.pyx":164
 * 		#		Xn.push_back(stateAnt[i])
 * 
 * 		cdef doublevec Xn1 = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 
 * 		onlyAssert(sargs,'rpms','Simulator')
 */
  __pyx_v_Xn1 = std::vector<double>(0);

  /* "Simulator.pyx":166
 * 		cdef doublevec Xn1 = doublevec_factory(0)
 * 
 * 		onlyAssert(sargs,'rpms','Simulator')             # <<<<<<<<<<<<<<
 * 		cdef doublevec rpms = doublevec_factory(0)
 * 		for i in range(len(sargs['rpms'])):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_rpms, __pyx_n_s_Simulator};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 166, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_rpms, __pyx_n_s_Simulator};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 166, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_rpms);
    __Pyx_GIVEREF(__pyx_n_s_rpms);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_rpms);
    __Pyx_INCREF(__pyx_n_s_Simulator);
    __Pyx_GIVEREF(__pyx_n_s_Simulator);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Simulator);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Simulator.pyx":167
 * 
 * 		onlyAssert(sargs,'rpms','Simulator')
 * 		cdef doublevec rpms = doublevec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(len(sargs['rpms'])):
 * 			rpms.push_back(sargs['rpms'][i])
 */
  __pyx_v_rpms = std::vector<double>(0);

  /* "Simulator.pyx":168
 * 		onlyAssert(sargs,'rpms','Simulator')
 * 		cdef doublevec rpms = doublevec_factory(0)
 * 		for i in range(len(sargs['rpms'])):             # <<<<<<<<<<<<<<
 * 			rpms.push_back(sargs['rpms'][i])
 * 		cdef int nrpms = len(sargs['rpms'])
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_sargs, __pyx_n_s_rpms); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(1, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "Simulator.pyx":169
 * 		cdef doublevec rpms = doublevec_factory(0)
 * 		for i in range(len(sargs['rpms'])):
 * 			rpms.push_back(sargs['rpms'][i])             # <<<<<<<<<<<<<<
 * 		cdef int nrpms = len(sargs['rpms'])
 * 
 */
    __pyx_t_1 = PyObject_GetItem(__pyx_v_sargs, __pyx_n_s_rpms); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 169, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_rpms.push_back(__pyx_t_6);
  }

  /* "Simulator.pyx":170
 * 		for i in range(len(sargs['rpms'])):
 * 			rpms.push_back(sargs['rpms'][i])
 * 		cdef int nrpms = len(sargs['rpms'])             # <<<<<<<<<<<<<<
 * 
 * 		cdef double dtheta_rpm = validatePositive(sargs,'dtheta_rpm','Simulator')
 */
  __pyx_t_2 = PyObject_GetItem(__pyx_v_sargs, __pyx_n_s_rpms); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(1, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_nrpms = __pyx_t_7;

  /* "Simulator.pyx":172
 * 		cdef int nrpms = len(sargs['rpms'])
 * 
 * 		cdef double dtheta_rpm = validatePositive(sargs,'dtheta_rpm','Simulator')             # <<<<<<<<<<<<<<
 * 		cdef int inicia	       = assignOptional(sargs, 'inicia', 1)
 * 		cdef double Courant    = validatePositive(sargs,'Courant','Simulator')
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_dtheta_rpm, __pyx_n_s_Simulator};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 172, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_dtheta_rpm, __pyx_n_s_Simulator};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 172, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_dtheta_rpm);
    __Pyx_GIVEREF(__pyx_n_s_dtheta_rpm);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_dtheta_rpm);
    __Pyx_INCREF(__pyx_n_s_Simulator);
    __Pyx_GIVEREF(__pyx_n_s_Simulator);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Simulator);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dtheta_rpm = __pyx_t_6;

  /* "Simulator.pyx":173
 * 
 * 		cdef double dtheta_rpm = validatePositive(sargs,'dtheta_rpm','Simulator')
 * 		cdef int inicia	       = assignOptional(sargs, 'inicia', 1)             # <<<<<<<<<<<<<<
 * 		cdef double Courant    = validatePositive(sargs,'Courant','Simulator')
 * 		cdef double ga	       = validatePositive(sargs,'ga','Simulator')
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_inicia, __pyx_int_1};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 173, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_inicia, __pyx_int_1};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 173, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_inicia);
    __Pyx_GIVEREF(__pyx_n_s_inicia);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_inicia);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_int_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_inicia = __pyx_t_4;

  /* "Simulator.pyx":174
 * 		cdef double dtheta_rpm = validatePositive(sargs,'dtheta_rpm','Simulator')
 * 		cdef int inicia	       = assignOptional(sargs, 'inicia', 1)
 * 		cdef double Courant    = validatePositive(sargs,'Courant','Simulator')             # <<<<<<<<<<<<<<
 * 		cdef double ga	       = validatePositive(sargs,'ga','Simulator')
 * 		cdef int viscous_flow  = onlyAssert(sargs,'viscous_flow','Simulator')
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_Courant, __pyx_n_s_Simulator};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 174, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_Courant, __pyx_n_s_Simulator};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 174, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_Courant);
    __Pyx_GIVEREF(__pyx_n_s_Courant);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_Courant);
    __Pyx_INCREF(__pyx_n_s_Simulator);
    __Pyx_GIVEREF(__pyx_n_s_Simulator);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Simulator);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Courant = __pyx_t_6;

  /* "Simulator.pyx":175
 * 		cdef int inicia	       = assignOptional(sargs, 'inicia', 1)
 * 		cdef double Courant    = validatePositive(sargs,'Courant','Simulator')
 * 		cdef double ga	       = validatePositive(sargs,'ga','Simulator')             # <<<<<<<<<<<<<<
 * 		cdef int viscous_flow  = onlyAssert(sargs,'viscous_flow','Simulator')
 * 		cdef int heat_flow     = onlyAssert(sargs,'heat_flow','Simulator')
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_ga, __pyx_n_s_Simulator};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_ga, __pyx_n_s_Simulator};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_ga);
    __Pyx_GIVEREF(__pyx_n_s_ga);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_ga);
    __Pyx_INCREF(__pyx_n_s_Simulator);
    __Pyx_GIVEREF(__pyx_n_s_Simulator);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Simulator);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ga = __pyx_t_6;

  /* "Simulator.pyx":176
 * 		cdef double Courant    = validatePositive(sargs,'Courant','Simulator')
 * 		cdef double ga	       = validatePositive(sargs,'ga','Simulator')
 * 		cdef int viscous_flow  = onlyAssert(sargs,'viscous_flow','Simulator')             # <<<<<<<<<<<<<<
 * 		cdef int heat_flow     = onlyAssert(sargs,'heat_flow','Simulator')
 * 		cdef double R_gas      = assignOptional(sargs,'R_gas',286.9)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_viscous_flow, __pyx_n_s_Simulator};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 176, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_viscous_flow, __pyx_n_s_Simulator};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 176, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_viscous_flow);
    __Pyx_GIVEREF(__pyx_n_s_viscous_flow);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_viscous_flow);
    __Pyx_INCREF(__pyx_n_s_Simulator);
    __Pyx_GIVEREF(__pyx_n_s_Simulator);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Simulator);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_viscous_flow = __pyx_t_4;

  /* "Simulator.pyx":177
 * 		cdef double ga	       = validatePositive(sargs,'ga','Simulator')
 * 		cdef int viscous_flow  = onlyAssert(sargs,'viscous_flow','Simulator')
 * 		cdef int heat_flow     = onlyAssert(sargs,'heat_flow','Simulator')             # <<<<<<<<<<<<<<
 * 		cdef double R_gas      = assignOptional(sargs,'R_gas',286.9)
 * 		cdef int nstroke       = validatePositive(sargs,'nstroke','Simulator',4)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_onlyAssert); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_heat_flow, __pyx_n_s_Simulator};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 177, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_heat_flow, __pyx_n_s_Simulator};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 177, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_heat_flow);
    __Pyx_GIVEREF(__pyx_n_s_heat_flow);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_heat_flow);
    __Pyx_INCREF(__pyx_n_s_Simulator);
    __Pyx_GIVEREF(__pyx_n_s_Simulator);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Simulator);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_heat_flow = __pyx_t_4;

  /* "Simulator.pyx":178
 * 		cdef int viscous_flow  = onlyAssert(sargs,'viscous_flow','Simulator')
 * 		cdef int heat_flow     = onlyAssert(sargs,'heat_flow','Simulator')
 * 		cdef double R_gas      = assignOptional(sargs,'R_gas',286.9)             # <<<<<<<<<<<<<<
 * 		cdef int nstroke       = validatePositive(sargs,'nstroke','Simulator',4)
 * 		cdef int ncycles       = validatePositive(sargs,'ncycles','Simulator')
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_R_gas, __pyx_float_286_9};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 178, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_R_gas, __pyx_float_286_9};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 178, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_R_gas);
    __Pyx_GIVEREF(__pyx_n_s_R_gas);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_R_gas);
    __Pyx_INCREF(__pyx_float_286_9);
    __Pyx_GIVEREF(__pyx_float_286_9);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_float_286_9);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_R_gas = __pyx_t_6;

  /* "Simulator.pyx":179
 * 		cdef int heat_flow     = onlyAssert(sargs,'heat_flow','Simulator')
 * 		cdef double R_gas      = assignOptional(sargs,'R_gas',286.9)
 * 		cdef int nstroke       = validatePositive(sargs,'nstroke','Simulator',4)             # <<<<<<<<<<<<<<
 * 		cdef int ncycles       = validatePositive(sargs,'ncycles','Simulator')
 * 		cdef intvec ig_order   = intvec_factory(0)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_nstroke, __pyx_n_s_Simulator, __pyx_int_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 179, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_nstroke, __pyx_n_s_Simulator, __pyx_int_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 179, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_nstroke);
    __Pyx_GIVEREF(__pyx_n_s_nstroke);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_nstroke);
    __Pyx_INCREF(__pyx_n_s_Simulator);
    __Pyx_GIVEREF(__pyx_n_s_Simulator);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_s_Simulator);
    __Pyx_INCREF(__pyx_int_4);
    __Pyx_GIVEREF(__pyx_int_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_int_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_nstroke = __pyx_t_4;

  /* "Simulator.pyx":180
 * 		cdef double R_gas      = assignOptional(sargs,'R_gas',286.9)
 * 		cdef int nstroke       = validatePositive(sargs,'nstroke','Simulator',4)
 * 		cdef int ncycles       = validatePositive(sargs,'ncycles','Simulator')             # <<<<<<<<<<<<<<
 * 		cdef intvec ig_order   = intvec_factory(0)
 * 		for i in range(ncyl):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_validatePositive); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_ncycles, __pyx_n_s_Simulator};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 180, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_ncycles, __pyx_n_s_Simulator};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 180, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_ncycles);
    __Pyx_GIVEREF(__pyx_n_s_ncycles);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_ncycles);
    __Pyx_INCREF(__pyx_n_s_Simulator);
    __Pyx_GIVEREF(__pyx_n_s_Simulator);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Simulator);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ncycles = __pyx_t_4;

  /* "Simulator.pyx":181
 * 		cdef int nstroke       = validatePositive(sargs,'nstroke','Simulator',4)
 * 		cdef int ncycles       = validatePositive(sargs,'ncycles','Simulator')
 * 		cdef intvec ig_order   = intvec_factory(0)             # <<<<<<<<<<<<<<
 * 		for i in range(ncyl):
 * 			ig_order.push_back(sargs['ig_order'][i])
 */
  __pyx_v_ig_order = std::vector<int>(0);

  /* "Simulator.pyx":182
 * 		cdef int ncycles       = validatePositive(sargs,'ncycles','Simulator')
 * 		cdef intvec ig_order   = intvec_factory(0)
 * 		for i in range(ncyl):             # <<<<<<<<<<<<<<
 * 			ig_order.push_back(sargs['ig_order'][i])
 * 
 */
  __pyx_t_4 = __pyx_v_ncyl;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_4; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "Simulator.pyx":183
 * 		cdef intvec ig_order   = intvec_factory(0)
 * 		for i in range(ncyl):
 * 			ig_order.push_back(sargs['ig_order'][i])             # <<<<<<<<<<<<<<
 * 
 * 		cdef int engine_type = validateInList(sargs,'engine_type','Simulator',[0,1,2],0)
 */
    __pyx_t_2 = PyObject_GetItem(__pyx_v_sargs, __pyx_n_s_ig_order); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 183, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_ig_order.push_back(__pyx_t_9);
  }

  /* "Simulator.pyx":185
 * 			ig_order.push_back(sargs['ig_order'][i])
 * 
 * 		cdef int engine_type = validateInList(sargs,'engine_type','Simulator',[0,1,2],0)             # <<<<<<<<<<<<<<
 * 
 * 		s = assignOptional(sargs, 'filein_state', '')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_validateInList); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_int_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_engine_type, __pyx_n_s_Simulator, __pyx_t_3, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 185, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_5, __pyx_v_sargs, __pyx_n_s_engine_type, __pyx_n_s_Simulator, __pyx_t_3, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 185, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(5+__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_engine_type);
    __Pyx_GIVEREF(__pyx_n_s_engine_type);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_4, __pyx_n_s_engine_type);
    __Pyx_INCREF(__pyx_n_s_Simulator);
    __Pyx_GIVEREF(__pyx_n_s_Simulator);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_4, __pyx_n_s_Simulator);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_4, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_4, __pyx_int_0);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_engine_type = __pyx_t_4;

  /* "Simulator.pyx":187
 * 		cdef int engine_type = validateInList(sargs,'engine_type','Simulator',[0,1,2],0)
 * 
 * 		s = assignOptional(sargs, 'filein_state', '')             # <<<<<<<<<<<<<<
 * 		cdef char* filein_state = s
 * 		s = assignOptional(sargs, 'filesave_state', '')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_sargs, __pyx_n_s_filein_state, __pyx_kp_s_};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 187, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_sargs, __pyx_n_s_filein_state, __pyx_kp_s_};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 187, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_filein_state);
    __Pyx_GIVEREF(__pyx_n_s_filein_state);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_filein_state);
    __Pyx_INCREF(__pyx_kp_s_);
    __Pyx_GIVEREF(__pyx_kp_s_);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_kp_s_);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "Simulator.pyx":188
 * 
 * 		s = assignOptional(sargs, 'filein_state', '')
 * 		cdef char* filein_state = s             # <<<<<<<<<<<<<<
 * 		s = assignOptional(sargs, 'filesave_state', '')
 * 		cdef char* filesave_state = s
 */
  __pyx_t_11 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) __PYX_ERR(1, 188, __pyx_L1_error)
  __pyx_v_filein_state = __pyx_t_11;

  /* "Simulator.pyx":189
 * 		s = assignOptional(sargs, 'filein_state', '')
 * 		cdef char* filein_state = s
 * 		s = assignOptional(sargs, 'filesave_state', '')             # <<<<<<<<<<<<<<
 * 		cdef char* filesave_state = s
 * 		s = assignOptional(sargs, 'filesin_spd', '')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_filesave_state, __pyx_kp_s_};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 189, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_filesave_state, __pyx_kp_s_};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 189, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_filesave_state);
    __Pyx_GIVEREF(__pyx_n_s_filesave_state);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_4, __pyx_n_s_filesave_state);
    __Pyx_INCREF(__pyx_kp_s_);
    __Pyx_GIVEREF(__pyx_kp_s_);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_4, __pyx_kp_s_);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "Simulator.pyx":190
 * 		cdef char* filein_state = s
 * 		s = assignOptional(sargs, 'filesave_state', '')
 * 		cdef char* filesave_state = s             # <<<<<<<<<<<<<<
 * 		s = assignOptional(sargs, 'filesin_spd', '')
 * 		cdef char* filein_spd = s
 */
  __pyx_t_11 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) __PYX_ERR(1, 190, __pyx_L1_error)
  __pyx_v_filesave_state = __pyx_t_11;

  /* "Simulator.pyx":191
 * 		s = assignOptional(sargs, 'filesave_state', '')
 * 		cdef char* filesave_state = s
 * 		s = assignOptional(sargs, 'filesin_spd', '')             # <<<<<<<<<<<<<<
 * 		cdef char* filein_spd = s
 * 		s = assignOptional(sargs, 'filesave_spd', '')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_sargs, __pyx_n_s_filesin_spd, __pyx_kp_s_};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_sargs, __pyx_n_s_filesin_spd, __pyx_kp_s_};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_filesin_spd);
    __Pyx_GIVEREF(__pyx_n_s_filesin_spd);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_filesin_spd);
    __Pyx_INCREF(__pyx_kp_s_);
    __Pyx_GIVEREF(__pyx_kp_s_);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_kp_s_);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "Simulator.pyx":192
 * 		cdef char* filesave_state = s
 * 		s = assignOptional(sargs, 'filesin_spd', '')
 * 		cdef char* filein_spd = s             # <<<<<<<<<<<<<<
 * 		s = assignOptional(sargs, 'filesave_spd', '')
 * 		cdef char* filesave_spd = s
 */
  __pyx_t_11 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) __PYX_ERR(1, 192, __pyx_L1_error)
  __pyx_v_filein_spd = __pyx_t_11;

  /* "Simulator.pyx":193
 * 		s = assignOptional(sargs, 'filesin_spd', '')
 * 		cdef char* filein_spd = s
 * 		s = assignOptional(sargs, 'filesave_spd', '')             # <<<<<<<<<<<<<<
 * 		cdef char* filesave_spd = s
 * 		s = assignOptional(sargs, 'folder_name', 'testDefault')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_filesave_spd, __pyx_kp_s_};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 193, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_filesave_spd, __pyx_kp_s_};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 193, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_filesave_spd);
    __Pyx_GIVEREF(__pyx_n_s_filesave_spd);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_4, __pyx_n_s_filesave_spd);
    __Pyx_INCREF(__pyx_kp_s_);
    __Pyx_GIVEREF(__pyx_kp_s_);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_4, __pyx_kp_s_);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "Simulator.pyx":194
 * 		cdef char* filein_spd = s
 * 		s = assignOptional(sargs, 'filesave_spd', '')
 * 		cdef char* filesave_spd = s             # <<<<<<<<<<<<<<
 * 		s = assignOptional(sargs, 'folder_name', 'testDefault')
 * 		cdef char* folder_name  = s
 */
  __pyx_t_11 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) __PYX_ERR(1, 194, __pyx_L1_error)
  __pyx_v_filesave_spd = __pyx_t_11;

  /* "Simulator.pyx":195
 * 		s = assignOptional(sargs, 'filesave_spd', '')
 * 		cdef char* filesave_spd = s
 * 		s = assignOptional(sargs, 'folder_name', 'testDefault')             # <<<<<<<<<<<<<<
 * 		cdef char* folder_name  = s
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_sargs, __pyx_n_s_folder_name, __pyx_n_s_testDefault};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 195, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_sargs, __pyx_n_s_folder_name, __pyx_n_s_testDefault};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 195, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_folder_name);
    __Pyx_GIVEREF(__pyx_n_s_folder_name);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_folder_name);
    __Pyx_INCREF(__pyx_n_s_testDefault);
    __Pyx_GIVEREF(__pyx_n_s_testDefault);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_testDefault);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "Simulator.pyx":196
 * 		cdef char* filesave_spd = s
 * 		s = assignOptional(sargs, 'folder_name', 'testDefault')
 * 		cdef char* folder_name  = s             # <<<<<<<<<<<<<<
 * 
 * 		cdef int calc_engine_data = boolean(sargs,'calc_engine_data','Simulator',1)
 */
  __pyx_t_11 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) __PYX_ERR(1, 196, __pyx_L1_error)
  __pyx_v_folder_name = __pyx_t_11;

  /* "Simulator.pyx":198
 * 		cdef char* folder_name  = s
 * 
 * 		cdef int calc_engine_data = boolean(sargs,'calc_engine_data','Simulator',1)             # <<<<<<<<<<<<<<
 * 		cdef int use_global_gas_prop = boolean(sargs,'use_global_gas_properties','Simulator',1)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_boolean); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_calc_engine_data, __pyx_n_s_Simulator, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 198, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_calc_engine_data, __pyx_n_s_Simulator, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 198, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_calc_engine_data);
    __Pyx_GIVEREF(__pyx_n_s_calc_engine_data);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_4, __pyx_n_s_calc_engine_data);
    __Pyx_INCREF(__pyx_n_s_Simulator);
    __Pyx_GIVEREF(__pyx_n_s_Simulator);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_4, __pyx_n_s_Simulator);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_4, __pyx_int_1);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_calc_engine_data = __pyx_t_4;

  /* "Simulator.pyx":199
 * 
 * 		cdef int calc_engine_data = boolean(sargs,'calc_engine_data','Simulator',1)
 * 		cdef int use_global_gas_prop = boolean(sargs,'use_global_gas_properties','Simulator',1)             # <<<<<<<<<<<<<<
 * 
 * 		cdef double ga_intake
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_boolean); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_10, __pyx_v_sargs, __pyx_n_s_use_global_gas_properties, __pyx_n_s_Simulator, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 199, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_10, __pyx_v_sargs, __pyx_n_s_use_global_gas_properties, __pyx_n_s_Simulator, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 199, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sargs);
    __Pyx_GIVEREF(__pyx_v_sargs);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_sargs);
    __Pyx_INCREF(__pyx_n_s_use_global_gas_properties);
    __Pyx_GIVEREF(__pyx_n_s_use_global_gas_properties);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_use_global_gas_properties);
    __Pyx_INCREF(__pyx_n_s_Simulator);
    __Pyx_GIVEREF(__pyx_n_s_Simulator);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_s_Simulator);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_4, __pyx_int_1);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_use_global_gas_prop = __pyx_t_4;

  /* "Simulator.pyx":203
 * 		cdef double ga_intake
 * 		cdef double ga_exhaust
 * 		if(use_global_gas_prop):             # <<<<<<<<<<<<<<
 * 			ga_intake  = ga
 * 			ga_exhaust = ga
 */
  __pyx_t_12 = (__pyx_v_use_global_gas_prop != 0);
  if (__pyx_t_12) {

    /* "Simulator.pyx":204
 * 		cdef double ga_exhaust
 * 		if(use_global_gas_prop):
 * 			ga_intake  = ga             # <<<<<<<<<<<<<<
 * 			ga_exhaust = ga
 * 		else:
 */
    __pyx_v_ga_intake = __pyx_v_ga;

    /* "Simulator.pyx":205
 * 		if(use_global_gas_prop):
 * 			ga_intake  = ga
 * 			ga_exhaust = ga             # <<<<<<<<<<<<<<
 * 		else:
 * 			# initializes the gas properties at intake and exhaust
 */
    __pyx_v_ga_exhaust = __pyx_v_ga;

    /* "Simulator.pyx":203
 * 		cdef double ga_intake
 * 		cdef double ga_exhaust
 * 		if(use_global_gas_prop):             # <<<<<<<<<<<<<<
 * 			ga_intake  = ga
 * 			ga_exhaust = ga
 */
    goto __pyx_L7;
  }

  /* "Simulator.pyx":209
 * 			# initializes the gas properties at intake and exhaust
 * 			# systems
 * 			ga_intake  = assignOptional(sargs,'ga_intake', 1.36)             # <<<<<<<<<<<<<<
 * 			ga_exhaust = assignOptional(sargs,'ga_exhaust', 1.36)
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_ga_intake, __pyx_float_1_36};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 209, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_sargs, __pyx_n_s_ga_intake, __pyx_float_1_36};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 209, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_sargs);
      __Pyx_GIVEREF(__pyx_v_sargs);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_4, __pyx_v_sargs);
      __Pyx_INCREF(__pyx_n_s_ga_intake);
      __Pyx_GIVEREF(__pyx_n_s_ga_intake);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_4, __pyx_n_s_ga_intake);
      __Pyx_INCREF(__pyx_float_1_36);
      __Pyx_GIVEREF(__pyx_float_1_36);
      PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_4, __pyx_float_1_36);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 209, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_ga_intake = __pyx_t_6;

    /* "Simulator.pyx":210
 * 			# systems
 * 			ga_intake  = assignOptional(sargs,'ga_intake', 1.36)
 * 			ga_exhaust = assignOptional(sargs,'ga_exhaust', 1.36)             # <<<<<<<<<<<<<<
 * 
 * 		#creo los tubos
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_assignOptional); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_sargs, __pyx_n_s_ga_exhaust, __pyx_float_1_36};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 210, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_sargs, __pyx_n_s_ga_exhaust, __pyx_float_1_36};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 210, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 210, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_10) {
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_10); __pyx_t_10 = NULL;
      }
      __Pyx_INCREF(__pyx_v_sargs);
      __Pyx_GIVEREF(__pyx_v_sargs);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_sargs);
      __Pyx_INCREF(__pyx_n_s_ga_exhaust);
      __Pyx_GIVEREF(__pyx_n_s_ga_exhaust);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_ga_exhaust);
      __Pyx_INCREF(__pyx_float_1_36);
      __Pyx_GIVEREF(__pyx_float_1_36);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_float_1_36);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 210, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 210, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_ga_exhaust = __pyx_t_6;
  }
  __pyx_L7:;

  /* "Simulator.pyx":213
 * 
 * 		#creo los tubos
 * 		cdef tubevec tubes = tubevec_factory(0)             # <<<<<<<<<<<<<<
 * 		cdef Tube auxTube
 * 		for k in range(ntubes):
 */
  __pyx_v_tubes = std::vector<Tube>(0);

  /* "Simulator.pyx":215
 * 		cdef tubevec tubes = tubevec_factory(0)
 * 		cdef Tube auxTube
 * 		for k in range(ntubes):             # <<<<<<<<<<<<<<
 * 			auxTube = Tube(**dataTubes[k])
 * 			tubes.push_back(copyTube(auxTube.thisptr))
 */
  __pyx_t_4 = __pyx_v_ntubes;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_4; __pyx_t_9+=1) {
    __pyx_v_k = __pyx_t_9;

    /* "Simulator.pyx":216
 * 		cdef Tube auxTube
 * 		for k in range(ntubes):
 * 			auxTube = Tube(**dataTubes[k])             # <<<<<<<<<<<<<<
 * 			tubes.push_back(copyTube(auxTube.thisptr))
 * 
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_dataTubes, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(1, 216, __pyx_L1_error)
    }
    if (likely(PyDict_CheckExact(__pyx_t_2))) {
      __pyx_t_1 = PyDict_Copy(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 216, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_1 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 216, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_12simCythonCPP_Tube), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_auxTube, ((struct __pyx_obj_12simCythonCPP_Tube *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "Simulator.pyx":217
 * 		for k in range(ntubes):
 * 			auxTube = Tube(**dataTubes[k])
 * 			tubes.push_back(copyTube(auxTube.thisptr))             # <<<<<<<<<<<<<<
 * 
 * 		cdef double theta_cycle = nstroke*pi
 */
    __pyx_v_tubes.push_back(new Tube(__pyx_v_auxTube->thisptr));
  }

  /* "Simulator.pyx":219
 * 			tubes.push_back(copyTube(auxTube.thisptr))
 * 
 * 		cdef double theta_cycle = nstroke*pi             # <<<<<<<<<<<<<<
 * 
 * 		if(engine_type==2):   # MRCVC
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_nstroke); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pi); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_theta_cycle = __pyx_t_6;

  /* "Simulator.pyx":221
 * 		cdef double theta_cycle = nstroke*pi
 * 
 * 		if(engine_type==2):   # MRCVC             # <<<<<<<<<<<<<<
 * 			# Defining the cycle duration
 * 			theta_cycle = 2.*pi*(dataCylinders[0]['nvanes']+2.)/dataCylinders[0]['nvanes']
 */
  __pyx_t_12 = ((__pyx_v_engine_type == 2) != 0);
  if (__pyx_t_12) {

    /* "Simulator.pyx":223
 * 		if(engine_type==2):   # MRCVC
 * 			# Defining the cycle duration
 * 			theta_cycle = 2.*pi*(dataCylinders[0]['nvanes']+2.)/dataCylinders[0]['nvanes']             # <<<<<<<<<<<<<<
 * 			# Checking the number of chambers
 * 			if(ncyl!=dataCylinders[0]['nvanes']+2):
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pi); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Multiply(__pyx_float_2_, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_dataCylinders, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_nvanes); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyFloat_AddObjC(__pyx_t_2, __pyx_float_2_, 2., 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_dataCylinders, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_nvanes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_theta_cycle = __pyx_t_6;

    /* "Simulator.pyx":225
 * 			theta_cycle = 2.*pi*(dataCylinders[0]['nvanes']+2.)/dataCylinders[0]['nvanes']
 * 			# Checking the number of chambers
 * 			if(ncyl!=dataCylinders[0]['nvanes']+2):             # <<<<<<<<<<<<<<
 * 				print 'Incorrect number of chambers for the MRCVC engine'
 * 				print 'Entered %d - Must be %d' %(ncyl, dataCylinders[0]['nvanes']+2)
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_ncyl); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_dataCylinders, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_nvanes); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 225, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(1, 225, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_12) {

      /* "Simulator.pyx":226
 * 			# Checking the number of chambers
 * 			if(ncyl!=dataCylinders[0]['nvanes']+2):
 * 				print 'Incorrect number of chambers for the MRCVC engine'             # <<<<<<<<<<<<<<
 * 				print 'Entered %d - Must be %d' %(ncyl, dataCylinders[0]['nvanes']+2)
 * 				raise ValueError
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_Incorrect_number_of_chambers_for) < 0) __PYX_ERR(1, 226, __pyx_L1_error)

      /* "Simulator.pyx":227
 * 			if(ncyl!=dataCylinders[0]['nvanes']+2):
 * 				print 'Incorrect number of chambers for the MRCVC engine'
 * 				print 'Entered %d - Must be %d' %(ncyl, dataCylinders[0]['nvanes']+2)             # <<<<<<<<<<<<<<
 * 				raise ValueError
 * 			# Checking the ignition order
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ncyl); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_dataCylinders, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_nvanes); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
      __pyx_t_2 = 0;
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Entered_d_Must_be_d, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(1, 227, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "Simulator.pyx":228
 * 				print 'Incorrect number of chambers for the MRCVC engine'
 * 				print 'Entered %d - Must be %d' %(ncyl, dataCylinders[0]['nvanes']+2)
 * 				raise ValueError             # <<<<<<<<<<<<<<
 * 			# Checking the ignition order
 * 			for k in range(ncyl):
 */
      __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
      __PYX_ERR(1, 228, __pyx_L1_error)

      /* "Simulator.pyx":225
 * 			theta_cycle = 2.*pi*(dataCylinders[0]['nvanes']+2.)/dataCylinders[0]['nvanes']
 * 			# Checking the number of chambers
 * 			if(ncyl!=dataCylinders[0]['nvanes']+2):             # <<<<<<<<<<<<<<
 * 				print 'Incorrect number of chambers for the MRCVC engine'
 * 				print 'Entered %d - Must be %d' %(ncyl, dataCylinders[0]['nvanes']+2)
 */
    }

    /* "Simulator.pyx":230
 * 				raise ValueError
 * 			# Checking the ignition order
 * 			for k in range(ncyl):             # <<<<<<<<<<<<<<
 * 				if(not(sargs['ig_order'][k]==k)):
 * 					print 'Chamber numbering must be consecutive for the MRCVC engine'
 */
    __pyx_t_4 = __pyx_v_ncyl;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_4; __pyx_t_9+=1) {
      __pyx_v_k = __pyx_t_9;

      /* "Simulator.pyx":231
 * 			# Checking the ignition order
 * 			for k in range(ncyl):
 * 				if(not(sargs['ig_order'][k]==k)):             # <<<<<<<<<<<<<<
 * 					print 'Chamber numbering must be consecutive for the MRCVC engine'
 * 					raise ValueError
 */
      __pyx_t_1 = PyObject_GetItem(__pyx_v_sargs, __pyx_n_s_ig_order); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 231, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(1, 231, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_13 = ((!__pyx_t_12) != 0);
      if (__pyx_t_13) {

        /* "Simulator.pyx":232
 * 			for k in range(ncyl):
 * 				if(not(sargs['ig_order'][k]==k)):
 * 					print 'Chamber numbering must be consecutive for the MRCVC engine'             # <<<<<<<<<<<<<<
 * 					raise ValueError
 * 
 */
        if (__Pyx_PrintOne(0, __pyx_kp_s_Chamber_numbering_must_be_consec) < 0) __PYX_ERR(1, 232, __pyx_L1_error)

        /* "Simulator.pyx":233
 * 				if(not(sargs['ig_order'][k]==k)):
 * 					print 'Chamber numbering must be consecutive for the MRCVC engine'
 * 					raise ValueError             # <<<<<<<<<<<<<<
 * 
 * 		#creo los cilindros
 */
        __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
        __PYX_ERR(1, 233, __pyx_L1_error)

        /* "Simulator.pyx":231
 * 			# Checking the ignition order
 * 			for k in range(ncyl):
 * 				if(not(sargs['ig_order'][k]==k)):             # <<<<<<<<<<<<<<
 * 					print 'Chamber numbering must be consecutive for the MRCVC engine'
 * 					raise ValueError
 */
      }
    }

    /* "Simulator.pyx":221
 * 		cdef double theta_cycle = nstroke*pi
 * 
 * 		if(engine_type==2):   # MRCVC             # <<<<<<<<<<<<<<
 * 			# Defining the cycle duration
 * 			theta_cycle = 2.*pi*(dataCylinders[0]['nvanes']+2.)/dataCylinders[0]['nvanes']
 */
  }

  /* "Simulator.pyx":237
 * 		#creo los cilindros
 * 		cdef double delta_encendido
 * 		if(ncyl == 0):             # <<<<<<<<<<<<<<
 * 			delta_encendido = 0.0
 * 		else:
 */
  __pyx_t_13 = ((__pyx_v_ncyl == 0) != 0);
  if (__pyx_t_13) {

    /* "Simulator.pyx":238
 * 		cdef double delta_encendido
 * 		if(ncyl == 0):
 * 			delta_encendido = 0.0             # <<<<<<<<<<<<<<
 * 		else:
 * 			delta_encendido = theta_cycle/ncyl
 */
    __pyx_v_delta_encendido = 0.0;

    /* "Simulator.pyx":237
 * 		#creo los cilindros
 * 		cdef double delta_encendido
 * 		if(ncyl == 0):             # <<<<<<<<<<<<<<
 * 			delta_encendido = 0.0
 * 		else:
 */
    goto __pyx_L15;
  }

  /* "Simulator.pyx":240
 * 			delta_encendido = 0.0
 * 		else:
 * 			delta_encendido = theta_cycle/ncyl             # <<<<<<<<<<<<<<
 * 
 * 		cdef double theta_start    = 0.0
 */
  /*else*/ {
    if (unlikely(__pyx_v_ncyl == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(1, 240, __pyx_L1_error)
    }
    __pyx_v_delta_encendido = (__pyx_v_theta_cycle / __pyx_v_ncyl);
  }
  __pyx_L15:;

  /* "Simulator.pyx":242
 * 			delta_encendido = theta_cycle/ncyl
 * 
 * 		cdef double theta_start    = 0.0             # <<<<<<<<<<<<<<
 * 		cdef cylindervec cylinders = cylindervec_factory(0)
 * 		cdef Cylinder auxCyl
 */
  __pyx_v_theta_start = 0.0;

  /* "Simulator.pyx":243
 * 
 * 		cdef double theta_start    = 0.0
 * 		cdef cylindervec cylinders = cylindervec_factory(0)             # <<<<<<<<<<<<<<
 * 		cdef Cylinder auxCyl
 * 		for k in range(ncyl):
 */
  __pyx_v_cylinders = std::vector<Cylinder>(0);

  /* "Simulator.pyx":245
 * 		cdef cylindervec cylinders = cylindervec_factory(0)
 * 		cdef Cylinder auxCyl
 * 		for k in range(ncyl):             # <<<<<<<<<<<<<<
 * 			for l in range(ncyl):
 * 				icyl = sargs['ig_order'][l]
 */
  __pyx_t_4 = __pyx_v_ncyl;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_4; __pyx_t_9+=1) {
    __pyx_v_k = __pyx_t_9;

    /* "Simulator.pyx":246
 * 		cdef Cylinder auxCyl
 * 		for k in range(ncyl):
 * 			for l in range(ncyl):             # <<<<<<<<<<<<<<
 * 				icyl = sargs['ig_order'][l]
 * 				if(icyl==k): break
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ncyl); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_14 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 246, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 246, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 246, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 246, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 246, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_14(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 246, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "Simulator.pyx":247
 * 		for k in range(ncyl):
 * 			for l in range(ncyl):
 * 				icyl = sargs['ig_order'][l]             # <<<<<<<<<<<<<<
 * 				if(icyl==k): break
 * 			theta_0			    = theta_start-l*delta_encendido
 */
      __pyx_t_2 = PyObject_GetItem(__pyx_v_sargs, __pyx_n_s_ig_order); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 247, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_GetItem(__pyx_t_2, __pyx_v_l); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 247, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_icyl, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "Simulator.pyx":248
 * 			for l in range(ncyl):
 * 				icyl = sargs['ig_order'][l]
 * 				if(icyl==k): break             # <<<<<<<<<<<<<<
 * 			theta_0			    = theta_start-l*delta_encendido
 * 			theta_0                     = mod(theta_0,theta_cycle)
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_icyl, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 248, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(1, 248, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_13) {
        goto __pyx_L19_break;
      }

      /* "Simulator.pyx":246
 * 		cdef Cylinder auxCyl
 * 		for k in range(ncyl):
 * 			for l in range(ncyl):             # <<<<<<<<<<<<<<
 * 				icyl = sargs['ig_order'][l]
 * 				if(icyl==k): break
 */
    }
    __pyx_L19_break:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "Simulator.pyx":249
 * 				icyl = sargs['ig_order'][l]
 * 				if(icyl==k): break
 * 			theta_0			    = theta_start-l*delta_encendido             # <<<<<<<<<<<<<<
 * 			theta_0                     = mod(theta_0,theta_cycle)
 * 			dataCylinders[k]['theta_0'] = theta_0
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_theta_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(!__pyx_v_l)) { __Pyx_RaiseUnboundLocalError("l"); __PYX_ERR(1, 249, __pyx_L1_error) }
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_delta_encendido); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_l, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_theta_0, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "Simulator.pyx":250
 * 				if(icyl==k): break
 * 			theta_0			    = theta_start-l*delta_encendido
 * 			theta_0                     = mod(theta_0,theta_cycle)             # <<<<<<<<<<<<<<
 * 			dataCylinders[k]['theta_0'] = theta_0
 * 			# I inform to the cylinders the engine type, in order to
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_mod); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_theta_cycle); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = NULL;
    __pyx_t_15 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_15 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_theta_0, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 250, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_theta_0, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 250, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_10) {
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_10); __pyx_t_10 = NULL;
      }
      __Pyx_INCREF(__pyx_v_theta_0);
      __Pyx_GIVEREF(__pyx_v_theta_0);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_15, __pyx_v_theta_0);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_15, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_theta_0, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "Simulator.pyx":251
 * 			theta_0			    = theta_start-l*delta_encendido
 * 			theta_0                     = mod(theta_0,theta_cycle)
 * 			dataCylinders[k]['theta_0'] = theta_0             # <<<<<<<<<<<<<<
 * 			# I inform to the cylinders the engine type, in order to
 * 			# redefine some internal variables for the MRCVC engine
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_dataCylinders, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_n_s_theta_0, __pyx_v_theta_0) < 0)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "Simulator.pyx":254
 * 			# I inform to the cylinders the engine type, in order to
 * 			# redefine some internal variables for the MRCVC engine
 * 			dataCylinders[k]['engine_type'] = engine_type             # <<<<<<<<<<<<<<
 * 			auxCyl			    = Cylinder(**dataCylinders[k])
 * 			cylinders.push_back(copyCylinder(auxCyl.thisptr))
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_engine_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_dataCylinders, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyObject_SetItem(__pyx_t_3, __pyx_n_s_engine_type, __pyx_t_2) < 0)) __PYX_ERR(1, 254, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "Simulator.pyx":255
 * 			# redefine some internal variables for the MRCVC engine
 * 			dataCylinders[k]['engine_type'] = engine_type
 * 			auxCyl			    = Cylinder(**dataCylinders[k])             # <<<<<<<<<<<<<<
 * 			cylinders.push_back(copyCylinder(auxCyl.thisptr))
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_dataCylinders, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(1, 255, __pyx_L1_error)
    }
    if (likely(PyDict_CheckExact(__pyx_t_3))) {
      __pyx_t_2 = PyDict_Copy(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 255, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_2 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 255, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_12simCythonCPP_Cylinder), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_auxCyl, ((struct __pyx_obj_12simCythonCPP_Cylinder *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "Simulator.pyx":256
 * 			dataCylinders[k]['engine_type'] = engine_type
 * 			auxCyl			    = Cylinder(**dataCylinders[k])
 * 			cylinders.push_back(copyCylinder(auxCyl.thisptr))             # <<<<<<<<<<<<<<
 * 
 * 		#creo los tanques
 */
    __pyx_v_cylinders.push_back(new Cylinder(__pyx_v_auxCyl->thisptr));
  }

  /* "Simulator.pyx":259
 * 
 * 		#creo los tanques
 * 		cdef tankvec tanks = tankvec_factory(0)             # <<<<<<<<<<<<<<
 * 		cdef Tank auxTank
 * 		for k in range(ntank):
 */
  __pyx_v_tanks = std::vector<Tank>(0);

  /* "Simulator.pyx":261
 * 		cdef tankvec tanks = tankvec_factory(0)
 * 		cdef Tank auxTank
 * 		for k in range(ntank):             # <<<<<<<<<<<<<<
 * 			auxTank = Tank(**dataTanks[k])
 * 			tanks.push_back(copyTank(auxTank.thisptr))
 */
  __pyx_t_4 = __pyx_v_ntank;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_4; __pyx_t_9+=1) {
    __pyx_v_k = __pyx_t_9;

    /* "Simulator.pyx":262
 * 		cdef Tank auxTank
 * 		for k in range(ntank):
 * 			auxTank = Tank(**dataTanks[k])             # <<<<<<<<<<<<<<
 * 			tanks.push_back(copyTank(auxTank.thisptr))
 * 
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_dataTanks, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(1, 262, __pyx_L1_error)
    }
    if (likely(PyDict_CheckExact(__pyx_t_2))) {
      __pyx_t_3 = PyDict_Copy(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 262, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_3 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 262, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_12simCythonCPP_Tank), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_auxTank, ((struct __pyx_obj_12simCythonCPP_Tank *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "Simulator.pyx":263
 * 		for k in range(ntank):
 * 			auxTank = Tank(**dataTanks[k])
 * 			tanks.push_back(copyTank(auxTank.thisptr))             # <<<<<<<<<<<<<<
 * 
 * 		#creo las uniones
 */
    __pyx_v_tanks.push_back(new Tank(__pyx_v_auxTank->thisptr));
  }

  /* "Simulator.pyx":266
 * 
 * 		#creo las uniones
 * 		cdef junctionvec junctions = junctionvec_factory(0)             # <<<<<<<<<<<<<<
 * 		cdef Junction auxJunc
 * 		for k in range(njunc):
 */
  __pyx_v_junctions = std::vector<Junction>(0);

  /* "Simulator.pyx":268
 * 		cdef junctionvec junctions = junctionvec_factory(0)
 * 		cdef Junction auxJunc
 * 		for k in range(njunc):             # <<<<<<<<<<<<<<
 * 			auxJunc = Junction(**dataJunctions[k])
 * 			junctions.push_back(copyJunction(auxJunc.thisptr))
 */
  __pyx_t_4 = __pyx_v_njunc;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_4; __pyx_t_9+=1) {
    __pyx_v_k = __pyx_t_9;

    /* "Simulator.pyx":269
 * 		cdef Junction auxJunc
 * 		for k in range(njunc):
 * 			auxJunc = Junction(**dataJunctions[k])             # <<<<<<<<<<<<<<
 * 			junctions.push_back(copyJunction(auxJunc.thisptr))
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_dataJunctions, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(1, 269, __pyx_L1_error)
    }
    if (likely(PyDict_CheckExact(__pyx_t_3))) {
      __pyx_t_2 = PyDict_Copy(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 269, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_2 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 269, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_12simCythonCPP_Junction), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_auxJunc, ((struct __pyx_obj_12simCythonCPP_Junction *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "Simulator.pyx":270
 * 		for k in range(njunc):
 * 			auxJunc = Junction(**dataJunctions[k])
 * 			junctions.push_back(copyJunction(auxJunc.thisptr))             # <<<<<<<<<<<<<<
 * 
 * 		#creo las atmospheras
 */
    __pyx_v_junctions.push_back(new Junction(__pyx_v_auxJunc->thisptr));
  }

  /* "Simulator.pyx":273
 * 
 * 		#creo las atmospheras
 * 		cdef atmvec atmospheres = atmvec_factory(0)             # <<<<<<<<<<<<<<
 * 		cdef Atmosphere auxAtm
 * 		for k in range(natm):
 */
  __pyx_v_atmospheres = std::vector<Atmosphere>(0);

  /* "Simulator.pyx":275
 * 		cdef atmvec atmospheres = atmvec_factory(0)
 * 		cdef Atmosphere auxAtm
 * 		for k in range(natm):             # <<<<<<<<<<<<<<
 * 			auxAtm = Atmosphere(**dataAtmospheres[k])
 * 			atmospheres.push_back(copyAtmosphere(auxAtm.thisptr))
 */
  __pyx_t_4 = __pyx_v_natm;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_4; __pyx_t_9+=1) {
    __pyx_v_k = __pyx_t_9;

    /* "Simulator.pyx":276
 * 		cdef Atmosphere auxAtm
 * 		for k in range(natm):
 * 			auxAtm = Atmosphere(**dataAtmospheres[k])             # <<<<<<<<<<<<<<
 * 			atmospheres.push_back(copyAtmosphere(auxAtm.thisptr))
 * 
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_dataAtmospheres, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(1, 276, __pyx_L1_error)
    }
    if (likely(PyDict_CheckExact(__pyx_t_2))) {
      __pyx_t_3 = PyDict_Copy(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_3 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_12simCythonCPP_Atmosphere), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_auxAtm, ((struct __pyx_obj_12simCythonCPP_Atmosphere *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "Simulator.pyx":277
 * 		for k in range(natm):
 * 			auxAtm = Atmosphere(**dataAtmospheres[k])
 * 			atmospheres.push_back(copyAtmosphere(auxAtm.thisptr))             # <<<<<<<<<<<<<<
 * 
 * 		self.thisptr = new_Simulator(dt,tf,nrpms,rpms,Xn,Xn1,ntubes,
 */
    __pyx_v_atmospheres.push_back(new Atmosphere(__pyx_v_auxAtm->thisptr));
  }

  /* "Simulator.pyx":279
 * 			atmospheres.push_back(copyAtmosphere(auxAtm.thisptr))
 * 
 * 		self.thisptr = new_Simulator(dt,tf,nrpms,rpms,Xn,Xn1,ntubes,             # <<<<<<<<<<<<<<
 * 					     ncyl,ntank,njunc,iter_sim1d,nsave,
 * 					     nappend,dtheta_rpm,inicia,Courant,
 */
  __pyx_v_self->thisptr = new Simulator(__pyx_v_dt, __pyx_v_tf, __pyx_v_nrpms, __pyx_v_rpms, __pyx_v_Xn, __pyx_v_Xn1, __pyx_v_ntubes, __pyx_v_ncyl, __pyx_v_ntank, __pyx_v_njunc, __pyx_v_iter_sim1d, __pyx_v_nsave, __pyx_v_nappend, __pyx_v_dtheta_rpm, __pyx_v_inicia, __pyx_v_Courant, __pyx_v_ga, __pyx_v_viscous_flow, __pyx_v_heat_flow, __pyx_v_R_gas, __pyx_v_theta_cycle, __pyx_v_ncycles, __pyx_v_engine_type, __pyx_v_filein_state, __pyx_v_filesave_state, __pyx_v_filein_spd, __pyx_v_filesave_spd, __pyx_v_folder_name, __pyx_v_ig_order, __pyx_v_cylinders, __pyx_v_tubes, __pyx_v_junctions, __pyx_v_tanks, __pyx_v_natm, __pyx_v_atmospheres, __pyx_v_get_state, __pyx_v_calc_engine_data, __pyx_v_use_global_gas_prop, __pyx_v_ga_intake, __pyx_v_ga_exhaust);

  /* "Simulator.pyx":131
 * 	cdef c_Simulator *thisptr
 * 
 * 	def __cinit__(self,**kargs):             # <<<<<<<<<<<<<<
 * 
 * 		dataCylinders 	= kargs['Cylinders']
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("simCythonCPP.Simulator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dataCylinders);
  __Pyx_XDECREF(__pyx_v_dataTubes);
  __Pyx_XDECREF(__pyx_v_dataJunctions);
  __Pyx_XDECREF(__pyx_v_dataTanks);
  __Pyx_XDECREF(__pyx_v_dataAtmospheres);
  __Pyx_XDECREF(__pyx_v_sargs);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF((PyObject *)__pyx_v_auxTube);
  __Pyx_XDECREF((PyObject *)__pyx_v_auxCyl);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XDECREF(__pyx_v_icyl);
  __Pyx_XDECREF(__pyx_v_theta_0);
  __Pyx_XDECREF((PyObject *)__pyx_v_auxTank);
  __Pyx_XDECREF((PyObject *)__pyx_v_auxJunc);
  __Pyx_XDECREF((PyObject *)__pyx_v_auxAtm);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Simulator.pyx":293
 * 					     ga_intake, ga_exhaust)
 * 
 * 	def solver(self):             # <<<<<<<<<<<<<<
 * 		self.thisptr.solver()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_3solver(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_3solver(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solver (wrapper)", 0);
  __pyx_r = __pyx_pf_12simCythonCPP_9Simulator_2solver(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12simCythonCPP_9Simulator_2solver(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solver", 0);

  /* "Simulator.pyx":294
 * 
 * 	def solver(self):
 * 		self.thisptr.solver()             # <<<<<<<<<<<<<<
 * 
 * 	def solve_step(self):
 */
  __pyx_v_self->thisptr->solver();

  /* "Simulator.pyx":293
 * 					     ga_intake, ga_exhaust)
 * 
 * 	def solver(self):             # <<<<<<<<<<<<<<
 * 		self.thisptr.solver()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Simulator.pyx":296
 * 		self.thisptr.solver()
 * 
 * 	def solve_step(self):             # <<<<<<<<<<<<<<
 * 		self.thisptr.solveStep()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_5solve_step(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_5solve_step(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve_step (wrapper)", 0);
  __pyx_r = __pyx_pf_12simCythonCPP_9Simulator_4solve_step(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12simCythonCPP_9Simulator_4solve_step(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve_step", 0);

  /* "Simulator.pyx":297
 * 
 * 	def solve_step(self):
 * 		self.thisptr.solveStep()             # <<<<<<<<<<<<<<
 * 
 * 	def printData(self):
 */
  __pyx_v_self->thisptr->solveStep();

  /* "Simulator.pyx":296
 * 		self.thisptr.solver()
 * 
 * 	def solve_step(self):             # <<<<<<<<<<<<<<
 * 		self.thisptr.solveStep()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Simulator.pyx":299
 * 		self.thisptr.solveStep()
 * 
 * 	def printData(self):             # <<<<<<<<<<<<<<
 * 		self.thisptr.printData()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_7printData(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_7printData(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printData (wrapper)", 0);
  __pyx_r = __pyx_pf_12simCythonCPP_9Simulator_6printData(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12simCythonCPP_9Simulator_6printData(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printData", 0);

  /* "Simulator.pyx":300
 * 
 * 	def printData(self):
 * 		self.thisptr.printData()             # <<<<<<<<<<<<<<
 * 
 * 	def ActualizeGlobalState(self):
 */
  __pyx_v_self->thisptr->printData();

  /* "Simulator.pyx":299
 * 		self.thisptr.solveStep()
 * 
 * 	def printData(self):             # <<<<<<<<<<<<<<
 * 		self.thisptr.printData()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Simulator.pyx":302
 * 		self.thisptr.printData()
 * 
 * 	def ActualizeGlobalState(self):             # <<<<<<<<<<<<<<
 * 		self.thisptr.actualizeState()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_9ActualizeGlobalState(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_9ActualizeGlobalState(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ActualizeGlobalState (wrapper)", 0);
  __pyx_r = __pyx_pf_12simCythonCPP_9Simulator_8ActualizeGlobalState(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12simCythonCPP_9Simulator_8ActualizeGlobalState(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ActualizeGlobalState", 0);

  /* "Simulator.pyx":303
 * 
 * 	def ActualizeGlobalState(self):
 * 		self.thisptr.actualizeState()             # <<<<<<<<<<<<<<
 * 
 * 	def actualizeDt(self):
 */
  __pyx_v_self->thisptr->actualizeState();

  /* "Simulator.pyx":302
 * 		self.thisptr.printData()
 * 
 * 	def ActualizeGlobalState(self):             # <<<<<<<<<<<<<<
 * 		self.thisptr.actualizeState()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Simulator.pyx":305
 * 		self.thisptr.actualizeState()
 * 
 * 	def actualizeDt(self):             # <<<<<<<<<<<<<<
 * 		self.thisptr.actualizeDt()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_11actualizeDt(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_11actualizeDt(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("actualizeDt (wrapper)", 0);
  __pyx_r = __pyx_pf_12simCythonCPP_9Simulator_10actualizeDt(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12simCythonCPP_9Simulator_10actualizeDt(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("actualizeDt", 0);

  /* "Simulator.pyx":306
 * 
 * 	def actualizeDt(self):
 * 		self.thisptr.actualizeDt()             # <<<<<<<<<<<<<<
 * 
 * 	def GetTimeStep(self):
 */
  __pyx_v_self->thisptr->actualizeDt();

  /* "Simulator.pyx":305
 * 		self.thisptr.actualizeState()
 * 
 * 	def actualizeDt(self):             # <<<<<<<<<<<<<<
 * 		self.thisptr.actualizeDt()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Simulator.pyx":308
 * 		self.thisptr.actualizeDt()
 * 
 * 	def GetTimeStep(self):             # <<<<<<<<<<<<<<
 * 		return float(self.thisptr.GetTimeStep())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_13GetTimeStep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_13GetTimeStep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetTimeStep (wrapper)", 0);
  __pyx_r = __pyx_pf_12simCythonCPP_9Simulator_12GetTimeStep(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12simCythonCPP_9Simulator_12GetTimeStep(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetTimeStep", 0);

  /* "Simulator.pyx":309
 * 
 * 	def GetTimeStep(self):
 * 		return float(self.thisptr.GetTimeStep())             # <<<<<<<<<<<<<<
 * 
 * 	def SetTimeStep(self, dT):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetTimeStep()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Simulator.pyx":308
 * 		self.thisptr.actualizeDt()
 * 
 * 	def GetTimeStep(self):             # <<<<<<<<<<<<<<
 * 		return float(self.thisptr.GetTimeStep())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("simCythonCPP.Simulator.GetTimeStep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Simulator.pyx":311
 * 		return float(self.thisptr.GetTimeStep())
 * 
 * 	def SetTimeStep(self, dT):             # <<<<<<<<<<<<<<
 * 		self.thisptr.SetTimeStep(dT)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_15SetTimeStep(PyObject *__pyx_v_self, PyObject *__pyx_v_dT); /*proto*/
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_15SetTimeStep(PyObject *__pyx_v_self, PyObject *__pyx_v_dT) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetTimeStep (wrapper)", 0);
  __pyx_r = __pyx_pf_12simCythonCPP_9Simulator_14SetTimeStep(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self), ((PyObject *)__pyx_v_dT));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12simCythonCPP_9Simulator_14SetTimeStep(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self, PyObject *__pyx_v_dT) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("SetTimeStep", 0);

  /* "Simulator.pyx":312
 * 
 * 	def SetTimeStep(self, dT):
 * 		self.thisptr.SetTimeStep(dT)             # <<<<<<<<<<<<<<
 * 
 * 	def SetTime(self, t, irpm=0):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_dT); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 312, __pyx_L1_error)
  __pyx_v_self->thisptr->SetTimeStep(__pyx_t_1);

  /* "Simulator.pyx":311
 * 		return float(self.thisptr.GetTimeStep())
 * 
 * 	def SetTimeStep(self, dT):             # <<<<<<<<<<<<<<
 * 		self.thisptr.SetTimeStep(dT)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("simCythonCPP.Simulator.SetTimeStep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Simulator.pyx":314
 * 		self.thisptr.SetTimeStep(dT)
 * 
 * 	def SetTime(self, t, irpm=0):             # <<<<<<<<<<<<<<
 * 		self.thisptr.SetTime(t, irpm)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_17SetTime(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_17SetTime(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_irpm = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetTime (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_irpm,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_irpm);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "SetTime") < 0)) __PYX_ERR(1, 314, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = values[0];
    __pyx_v_irpm = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetTime", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 314, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("simCythonCPP.Simulator.SetTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12simCythonCPP_9Simulator_16SetTime(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self), __pyx_v_t, __pyx_v_irpm);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12simCythonCPP_9Simulator_16SetTime(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self, PyObject *__pyx_v_t, PyObject *__pyx_v_irpm) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("SetTime", 0);

  /* "Simulator.pyx":315
 * 
 * 	def SetTime(self, t, irpm=0):
 * 		self.thisptr.SetTime(t, irpm)             # <<<<<<<<<<<<<<
 * 
 * 	def GetNewState(self):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 315, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_irpm); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 315, __pyx_L1_error)
  __pyx_v_self->thisptr->SetTime(__pyx_t_1, __pyx_t_2);

  /* "Simulator.pyx":314
 * 		self.thisptr.SetTimeStep(dT)
 * 
 * 	def SetTime(self, t, irpm=0):             # <<<<<<<<<<<<<<
 * 		self.thisptr.SetTime(t, irpm)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("simCythonCPP.Simulator.SetTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Simulator.pyx":317
 * 		self.thisptr.SetTime(t, irpm)
 * 
 * 	def GetNewState(self):             # <<<<<<<<<<<<<<
 * 		cdef doublevec a = self.thisptr.GetNewState()
 * 		cdef int l = self.thisptr.GetNewStateSize()
 */

/* Python wrapper */
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_19GetNewState(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_19GetNewState(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNewState (wrapper)", 0);
  __pyx_r = __pyx_pf_12simCythonCPP_9Simulator_18GetNewState(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12simCythonCPP_9Simulator_18GetNewState(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self) {
  std::vector<double> __pyx_v_a;
  int __pyx_v_l;
  PyObject *__pyx_v_aPython = NULL;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("GetNewState", 0);

  /* "Simulator.pyx":318
 * 
 * 	def GetNewState(self):
 * 		cdef doublevec a = self.thisptr.GetNewState()             # <<<<<<<<<<<<<<
 * 		cdef int l = self.thisptr.GetNewStateSize()
 * 		aPython = []
 */
  __pyx_v_a = __pyx_v_self->thisptr->GetNewState();

  /* "Simulator.pyx":319
 * 	def GetNewState(self):
 * 		cdef doublevec a = self.thisptr.GetNewState()
 * 		cdef int l = self.thisptr.GetNewStateSize()             # <<<<<<<<<<<<<<
 * 		aPython = []
 * 		for i in range(l):
 */
  __pyx_v_l = __pyx_v_self->thisptr->GetNewStateSize();

  /* "Simulator.pyx":320
 * 		cdef doublevec a = self.thisptr.GetNewState()
 * 		cdef int l = self.thisptr.GetNewStateSize()
 * 		aPython = []             # <<<<<<<<<<<<<<
 * 		for i in range(l):
 * 			aPython.append(a.at(i))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_aPython = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "Simulator.pyx":321
 * 		cdef int l = self.thisptr.GetNewStateSize()
 * 		aPython = []
 * 		for i in range(l):             # <<<<<<<<<<<<<<
 * 			aPython.append(a.at(i))
 * 		return aPython
 */
  __pyx_t_2 = __pyx_v_l;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "Simulator.pyx":322
 * 		aPython = []
 * 		for i in range(l):
 * 			aPython.append(a.at(i))             # <<<<<<<<<<<<<<
 * 		return aPython
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_a.at(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_aPython, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 322, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "Simulator.pyx":323
 * 		for i in range(l):
 * 			aPython.append(a.at(i))
 * 		return aPython             # <<<<<<<<<<<<<<
 * 
 * 	def GetOldState(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_aPython);
  __pyx_r = __pyx_v_aPython;
  goto __pyx_L0;

  /* "Simulator.pyx":317
 * 		self.thisptr.SetTime(t, irpm)
 * 
 * 	def GetNewState(self):             # <<<<<<<<<<<<<<
 * 		cdef doublevec a = self.thisptr.GetNewState()
 * 		cdef int l = self.thisptr.GetNewStateSize()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("simCythonCPP.Simulator.GetNewState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_aPython);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Simulator.pyx":325
 * 		return aPython
 * 
 * 	def GetOldState(self):             # <<<<<<<<<<<<<<
 * 		cdef doublevec a = self.thisptr.GetOldState()
 * 		cdef int l = self.thisptr.GetOldStateSize()
 */

/* Python wrapper */
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_21GetOldState(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_21GetOldState(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetOldState (wrapper)", 0);
  __pyx_r = __pyx_pf_12simCythonCPP_9Simulator_20GetOldState(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12simCythonCPP_9Simulator_20GetOldState(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self) {
  std::vector<double> __pyx_v_a;
  int __pyx_v_l;
  PyObject *__pyx_v_aPython = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  unsigned int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("GetOldState", 0);

  /* "Simulator.pyx":326
 * 
 * 	def GetOldState(self):
 * 		cdef doublevec a = self.thisptr.GetOldState()             # <<<<<<<<<<<<<<
 * 		cdef int l = self.thisptr.GetOldStateSize()
 * 		aPython = []
 */
  __pyx_v_a = __pyx_v_self->thisptr->GetOldState();

  /* "Simulator.pyx":327
 * 	def GetOldState(self):
 * 		cdef doublevec a = self.thisptr.GetOldState()
 * 		cdef int l = self.thisptr.GetOldStateSize()             # <<<<<<<<<<<<<<
 * 		aPython = []
 * 		for i in range(int(l)):
 */
  __pyx_v_l = __pyx_v_self->thisptr->GetOldStateSize();

  /* "Simulator.pyx":328
 * 		cdef doublevec a = self.thisptr.GetOldState()
 * 		cdef int l = self.thisptr.GetOldStateSize()
 * 		aPython = []             # <<<<<<<<<<<<<<
 * 		for i in range(int(l)):
 * 			aPython.append(a.at(i))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_aPython = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "Simulator.pyx":329
 * 		cdef int l = self.thisptr.GetOldStateSize()
 * 		aPython = []
 * 		for i in range(int(l)):             # <<<<<<<<<<<<<<
 * 			aPython.append(a.at(i))
 * 		return aPython
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_l); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 329, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 329, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 329, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 329, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "Simulator.pyx":330
 * 		aPython = []
 * 		for i in range(int(l)):
 * 			aPython.append(a.at(i))             # <<<<<<<<<<<<<<
 * 		return aPython
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_int(__pyx_v_i); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 330, __pyx_L1_error)
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_a.at(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_aPython, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(1, 330, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "Simulator.pyx":329
 * 		cdef int l = self.thisptr.GetOldStateSize()
 * 		aPython = []
 * 		for i in range(int(l)):             # <<<<<<<<<<<<<<
 * 			aPython.append(a.at(i))
 * 		return aPython
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Simulator.pyx":331
 * 		for i in range(int(l)):
 * 			aPython.append(a.at(i))
 * 		return aPython             # <<<<<<<<<<<<<<
 * 
 * 	def SetState(self, indx, values):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_aPython);
  __pyx_r = __pyx_v_aPython;
  goto __pyx_L0;

  /* "Simulator.pyx":325
 * 		return aPython
 * 
 * 	def GetOldState(self):             # <<<<<<<<<<<<<<
 * 		cdef doublevec a = self.thisptr.GetOldState()
 * 		cdef int l = self.thisptr.GetOldStateSize()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("simCythonCPP.Simulator.GetOldState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_aPython);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Simulator.pyx":333
 * 		return aPython
 * 
 * 	def SetState(self, indx, values):             # <<<<<<<<<<<<<<
 * 		for i in range(len(indx)):
 * 			self.thisptr.SetStateValue(indx[i],values[i])
 */

/* Python wrapper */
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_23SetState(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_23SetState(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_indx = 0;
  PyObject *__pyx_v_values = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetState (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_indx,&__pyx_n_s_values,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_indx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SetState", 1, 2, 2, 1); __PYX_ERR(1, 333, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "SetState") < 0)) __PYX_ERR(1, 333, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_indx = values[0];
    __pyx_v_values = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetState", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 333, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("simCythonCPP.Simulator.SetState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12simCythonCPP_9Simulator_22SetState(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self), __pyx_v_indx, __pyx_v_values);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12simCythonCPP_9Simulator_22SetState(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self, PyObject *__pyx_v_indx, PyObject *__pyx_v_values) {
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("SetState", 0);

  /* "Simulator.pyx":334
 * 
 * 	def SetState(self, indx, values):
 * 		for i in range(len(indx)):             # <<<<<<<<<<<<<<
 * 			self.thisptr.SetStateValue(indx[i],values[i])
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_indx); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(1, 334, __pyx_L1_error)
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "Simulator.pyx":335
 * 	def SetState(self, indx, values):
 * 		for i in range(len(indx)):
 * 			self.thisptr.SetStateValue(indx[i],values[i])             # <<<<<<<<<<<<<<
 * 
 * 	def GetCylinderMass(self, icyl):
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_indx, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_self->thisptr->SetStateValue(__pyx_t_4, __pyx_t_5);
  }

  /* "Simulator.pyx":333
 * 		return aPython
 * 
 * 	def SetState(self, indx, values):             # <<<<<<<<<<<<<<
 * 		for i in range(len(indx)):
 * 			self.thisptr.SetStateValue(indx[i],values[i])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("simCythonCPP.Simulator.SetState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Simulator.pyx":337
 * 			self.thisptr.SetStateValue(indx[i],values[i])
 * 
 * 	def GetCylinderMass(self, icyl):             # <<<<<<<<<<<<<<
 * 		cdef doublevec mass = self.thisptr.getCylinderMass(icyl)
 * 		lmass = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_25GetCylinderMass(PyObject *__pyx_v_self, PyObject *__pyx_v_icyl); /*proto*/
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_25GetCylinderMass(PyObject *__pyx_v_self, PyObject *__pyx_v_icyl) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetCylinderMass (wrapper)", 0);
  __pyx_r = __pyx_pf_12simCythonCPP_9Simulator_24GetCylinderMass(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self), ((PyObject *)__pyx_v_icyl));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12simCythonCPP_9Simulator_24GetCylinderMass(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self, PyObject *__pyx_v_icyl) {
  std::vector<double> __pyx_v_mass;
  PyObject *__pyx_v_lmass = NULL;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("GetCylinderMass", 0);

  /* "Simulator.pyx":338
 * 
 * 	def GetCylinderMass(self, icyl):
 * 		cdef doublevec mass = self.thisptr.getCylinderMass(icyl)             # <<<<<<<<<<<<<<
 * 		lmass = []
 * 		for i in range(6):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_icyl); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 338, __pyx_L1_error)
  __pyx_v_mass = __pyx_v_self->thisptr->getCylinderMass(__pyx_t_1);

  /* "Simulator.pyx":339
 * 	def GetCylinderMass(self, icyl):
 * 		cdef doublevec mass = self.thisptr.getCylinderMass(icyl)
 * 		lmass = []             # <<<<<<<<<<<<<<
 * 		for i in range(6):
 * 			lmass.append(mass.at(i))
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_lmass = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "Simulator.pyx":340
 * 		cdef doublevec mass = self.thisptr.getCylinderMass(icyl)
 * 		lmass = []
 * 		for i in range(6):             # <<<<<<<<<<<<<<
 * 			lmass.append(mass.at(i))
 * 		return lmass
 */
  for (__pyx_t_3 = 0; __pyx_t_3 < 6; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "Simulator.pyx":341
 * 		lmass = []
 * 		for i in range(6):
 * 			lmass.append(mass.at(i))             # <<<<<<<<<<<<<<
 * 		return lmass
 * 
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_mass.at(__pyx_v_i)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_lmass, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 341, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "Simulator.pyx":342
 * 		for i in range(6):
 * 			lmass.append(mass.at(i))
 * 		return lmass             # <<<<<<<<<<<<<<
 * 
 * 	def SetCylinderMass(self, icyl, mass_vec):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_lmass);
  __pyx_r = __pyx_v_lmass;
  goto __pyx_L0;

  /* "Simulator.pyx":337
 * 			self.thisptr.SetStateValue(indx[i],values[i])
 * 
 * 	def GetCylinderMass(self, icyl):             # <<<<<<<<<<<<<<
 * 		cdef doublevec mass = self.thisptr.getCylinderMass(icyl)
 * 		lmass = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("simCythonCPP.Simulator.GetCylinderMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lmass);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Simulator.pyx":344
 * 		return lmass
 * 
 * 	def SetCylinderMass(self, icyl, mass_vec):             # <<<<<<<<<<<<<<
 * 		for i in range(len(mass_vec)):
 * 			self.thisptr.setCylinderMass(icyl, i, mass_vec[i])
 */

/* Python wrapper */
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_27SetCylinderMass(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_12simCythonCPP_9Simulator_27SetCylinderMass(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_icyl = 0;
  PyObject *__pyx_v_mass_vec = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetCylinderMass (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_icyl,&__pyx_n_s_mass_vec,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_icyl)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mass_vec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SetCylinderMass", 1, 2, 2, 1); __PYX_ERR(1, 344, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "SetCylinderMass") < 0)) __PYX_ERR(1, 344, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_icyl = values[0];
    __pyx_v_mass_vec = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetCylinderMass", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 344, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("simCythonCPP.Simulator.SetCylinderMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12simCythonCPP_9Simulator_26SetCylinderMass(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self), __pyx_v_icyl, __pyx_v_mass_vec);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12simCythonCPP_9Simulator_26SetCylinderMass(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self, PyObject *__pyx_v_icyl, PyObject *__pyx_v_mass_vec) {
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("SetCylinderMass", 0);

  /* "Simulator.pyx":345
 * 
 * 	def SetCylinderMass(self, icyl, mass_vec):
 * 		for i in range(len(mass_vec)):             # <<<<<<<<<<<<<<
 * 			self.thisptr.setCylinderMass(icyl, i, mass_vec[i])
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_mass_vec); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(1, 345, __pyx_L1_error)
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "Simulator.pyx":346
 * 	def SetCylinderMass(self, icyl, mass_vec):
 * 		for i in range(len(mass_vec)):
 * 			self.thisptr.setCylinderMass(icyl, i, mass_vec[i])             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_icyl); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 346, __pyx_L1_error)
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_mass_vec, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 346, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_self->thisptr->setCylinderMass(__pyx_t_3, __pyx_v_i, __pyx_t_5);
  }

  /* "Simulator.pyx":344
 * 		return lmass
 * 
 * 	def SetCylinderMass(self, icyl, mass_vec):             # <<<<<<<<<<<<<<
 * 		for i in range(len(mass_vec)):
 * 			self.thisptr.setCylinderMass(icyl, i, mass_vec[i])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("simCythonCPP.Simulator.SetCylinderMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Simulator.pyx":348
 * 			self.thisptr.setCylinderMass(icyl, i, mass_vec[i])
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del_Simulator(self.thisptr)
 */

/* Python wrapper */
static void __pyx_pw_12simCythonCPP_9Simulator_29__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_12simCythonCPP_9Simulator_29__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_12simCythonCPP_9Simulator_28__dealloc__(((struct __pyx_obj_12simCythonCPP_Simulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_12simCythonCPP_9Simulator_28__dealloc__(struct __pyx_obj_12simCythonCPP_Simulator *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "Simulator.pyx":349
 * 
 * 	def __dealloc__(self):
 * 		del_Simulator(self.thisptr)             # <<<<<<<<<<<<<<
 */
  delete(__pyx_v_self->thisptr);

  /* "Simulator.pyx":348
 * 			self.thisptr.setCylinderMass(icyl, i, mass_vec[i])
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del_Simulator(self.thisptr)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static PyObject *__pyx_tp_new_12simCythonCPP_Cylinder(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_12simCythonCPP_8Cylinder_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_12simCythonCPP_Cylinder(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_12simCythonCPP_8Cylinder_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_12simCythonCPP_Cylinder[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_12simCythonCPP_Cylinder = {
  PyVarObject_HEAD_INIT(0, 0)
  "simCythonCPP.Cylinder", /*tp_name*/
  sizeof(struct __pyx_obj_12simCythonCPP_Cylinder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12simCythonCPP_Cylinder, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12simCythonCPP_Cylinder, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12simCythonCPP_Cylinder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_12simCythonCPP_Junction(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_12simCythonCPP_8Junction_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_12simCythonCPP_Junction(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_12simCythonCPP_8Junction_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_12simCythonCPP_Junction[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_12simCythonCPP_Junction = {
  PyVarObject_HEAD_INIT(0, 0)
  "simCythonCPP.Junction", /*tp_name*/
  sizeof(struct __pyx_obj_12simCythonCPP_Junction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12simCythonCPP_Junction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12simCythonCPP_Junction, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12simCythonCPP_Junction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_12simCythonCPP_Tube(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_12simCythonCPP_4Tube_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_12simCythonCPP_Tube(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_12simCythonCPP_4Tube_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_12simCythonCPP_Tube[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_12simCythonCPP_Tube = {
  PyVarObject_HEAD_INIT(0, 0)
  "simCythonCPP.Tube", /*tp_name*/
  sizeof(struct __pyx_obj_12simCythonCPP_Tube), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12simCythonCPP_Tube, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12simCythonCPP_Tube, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12simCythonCPP_Tube, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_12simCythonCPP_Tank(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_12simCythonCPP_4Tank_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_12simCythonCPP_Tank(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_12simCythonCPP_4Tank_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_12simCythonCPP_Tank[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_12simCythonCPP_Tank = {
  PyVarObject_HEAD_INIT(0, 0)
  "simCythonCPP.Tank", /*tp_name*/
  sizeof(struct __pyx_obj_12simCythonCPP_Tank), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12simCythonCPP_Tank, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12simCythonCPP_Tank, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12simCythonCPP_Tank, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_12simCythonCPP_Atmosphere(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_12simCythonCPP_10Atmosphere_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_12simCythonCPP_Atmosphere(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_12simCythonCPP_10Atmosphere_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_12simCythonCPP_Atmosphere[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_12simCythonCPP_Atmosphere = {
  PyVarObject_HEAD_INIT(0, 0)
  "simCythonCPP.Atmosphere", /*tp_name*/
  sizeof(struct __pyx_obj_12simCythonCPP_Atmosphere), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12simCythonCPP_Atmosphere, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12simCythonCPP_Atmosphere, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12simCythonCPP_Atmosphere, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_12simCythonCPP_Simulator(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_12simCythonCPP_9Simulator_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_12simCythonCPP_Simulator(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_12simCythonCPP_9Simulator_29__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_12simCythonCPP_Simulator[] = {
  {"solver", (PyCFunction)__pyx_pw_12simCythonCPP_9Simulator_3solver, METH_NOARGS, 0},
  {"solve_step", (PyCFunction)__pyx_pw_12simCythonCPP_9Simulator_5solve_step, METH_NOARGS, 0},
  {"printData", (PyCFunction)__pyx_pw_12simCythonCPP_9Simulator_7printData, METH_NOARGS, 0},
  {"ActualizeGlobalState", (PyCFunction)__pyx_pw_12simCythonCPP_9Simulator_9ActualizeGlobalState, METH_NOARGS, 0},
  {"actualizeDt", (PyCFunction)__pyx_pw_12simCythonCPP_9Simulator_11actualizeDt, METH_NOARGS, 0},
  {"GetTimeStep", (PyCFunction)__pyx_pw_12simCythonCPP_9Simulator_13GetTimeStep, METH_NOARGS, 0},
  {"SetTimeStep", (PyCFunction)__pyx_pw_12simCythonCPP_9Simulator_15SetTimeStep, METH_O, 0},
  {"SetTime", (PyCFunction)__pyx_pw_12simCythonCPP_9Simulator_17SetTime, METH_VARARGS|METH_KEYWORDS, 0},
  {"GetNewState", (PyCFunction)__pyx_pw_12simCythonCPP_9Simulator_19GetNewState, METH_NOARGS, 0},
  {"GetOldState", (PyCFunction)__pyx_pw_12simCythonCPP_9Simulator_21GetOldState, METH_NOARGS, 0},
  {"SetState", (PyCFunction)__pyx_pw_12simCythonCPP_9Simulator_23SetState, METH_VARARGS|METH_KEYWORDS, 0},
  {"GetCylinderMass", (PyCFunction)__pyx_pw_12simCythonCPP_9Simulator_25GetCylinderMass, METH_O, 0},
  {"SetCylinderMass", (PyCFunction)__pyx_pw_12simCythonCPP_9Simulator_27SetCylinderMass, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_12simCythonCPP_Simulator = {
  PyVarObject_HEAD_INIT(0, 0)
  "simCythonCPP.Simulator", /*tp_name*/
  sizeof(struct __pyx_obj_12simCythonCPP_Simulator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12simCythonCPP_Simulator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12simCythonCPP_Simulator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12simCythonCPP_Simulator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  static const char* internal_type_names[] = {
    "Atmosphere",
    "Cylinder",
    "Junction",
    "Scavenge",
    "Simulator",
    "Tank",
    "Tube",
    "__pyx_ctuple_Py_ssize_t",
    "__pyx_ctuple_Py_ssize_t_struct",
    "__pyx_ctuple_double",
    "__pyx_ctuple_double_struct",
    "__pyx_ctuple_int",
    "__pyx_ctuple_int_struct",
    "__pyx_ctuple_long",
    "__pyx_ctuple_long_struct",
    "__pyx_ctuple_unsigned__space_int",
    "__pyx_ctuple_unsigned__space_int_struct",
    "atmvec",
    "c_Atmosphere",
    "c_Cylinder",
    "c_Junction",
    "c_Simulator",
    "c_Tank",
    "c_Tube",
    "combustion",
    "cylindervec",
    "doublevec",
    "fuel",
    "injection",
    "intvec",
    "junctionvec",
    "tankvec",
    "tubevec",
    "valve",
    "valvevec",
    0
  };
  const char** type_name = internal_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  bad:
  return -1;
}

























































































































static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = PyObject_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;

    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1;
        PyErr_Clear();
        dict = PyObject_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
#if PY_MAJOR_VERSION < 3
        all = PyObject_CallMethod(dict, (char *)"keys", NULL);
#else
        all = PyMapping_Keys(dict);
#endif
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }

    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            PyString_Check(name) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            PyUnicode_Check(name) &&
            PyUnicode_AS_UNICODE(name)[0] == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}


static int __pyx_import_star(PyObject* m) {

    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;

    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;

    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;

bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}



#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "simCythonCPP",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_Area, __pyx_k_Area, sizeof(__pyx_k_Area), 0, 0, 1, 1},
  {&__pyx_n_s_Area_wall, __pyx_k_Area_wall, sizeof(__pyx_k_Area_wall), 0, 0, 1, 1},
  {&__pyx_n_s_Atmosphere, __pyx_k_Atmosphere, sizeof(__pyx_k_Atmosphere), 0, 0, 1, 1},
  {&__pyx_n_s_Atmospheres, __pyx_k_Atmospheres, sizeof(__pyx_k_Atmospheres), 0, 0, 1, 1},
  {&__pyx_n_s_Bore, __pyx_k_Bore, sizeof(__pyx_k_Bore), 0, 0, 1, 1},
  {&__pyx_n_s_Cd, __pyx_k_Cd, sizeof(__pyx_k_Cd), 0, 0, 1, 1},
  {&__pyx_n_s_Cd_ports, __pyx_k_Cd_ports, sizeof(__pyx_k_Cd_ports), 0, 0, 1, 1},
  {&__pyx_kp_s_Chamber_numbering_must_be_consec, __pyx_k_Chamber_numbering_must_be_consec, sizeof(__pyx_k_Chamber_numbering_must_be_consec), 0, 0, 1, 0},
  {&__pyx_kp_s_Combustion_Cylinder, __pyx_k_Combustion_Cylinder, sizeof(__pyx_k_Combustion_Cylinder), 0, 0, 1, 0},
  {&__pyx_n_s_Courant, __pyx_k_Courant, sizeof(__pyx_k_Courant), 0, 0, 1, 1},
  {&__pyx_n_s_Cylinder, __pyx_k_Cylinder, sizeof(__pyx_k_Cylinder), 0, 0, 1, 1},
  {&__pyx_n_s_Cylinders, __pyx_k_Cylinders, sizeof(__pyx_k_Cylinders), 0, 0, 1, 1},
  {&__pyx_n_s_Dv, __pyx_k_Dv, sizeof(__pyx_k_Dv), 0, 0, 1, 1},
  {&__pyx_kp_s_Entered_d_Must_be_d, __pyx_k_Entered_d_Must_be_d, sizeof(__pyx_k_Entered_d_Must_be_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Fail_inicialitation_in_Cylinder, __pyx_k_Fail_inicialitation_in_Cylinder, sizeof(__pyx_k_Fail_inicialitation_in_Cylinder), 0, 0, 1, 0},
  {&__pyx_kp_s_Fail_inicialitation_in_Junction, __pyx_k_Fail_inicialitation_in_Junction, sizeof(__pyx_k_Fail_inicialitation_in_Junction), 0, 0, 1, 0},
  {&__pyx_kp_s_Fail_inicialitation_in_Tank_some, __pyx_k_Fail_inicialitation_in_Tank_some, sizeof(__pyx_k_Fail_inicialitation_in_Tank_some), 0, 0, 1, 0},
  {&__pyx_kp_s_Fail_inicialitation_in_Tube_area, __pyx_k_Fail_inicialitation_in_Tube_area, sizeof(__pyx_k_Fail_inicialitation_in_Tube_area), 0, 0, 1, 0},
  {&__pyx_kp_s_Fail_inicialitation_in_Tube_some, __pyx_k_Fail_inicialitation_in_Tube_some, sizeof(__pyx_k_Fail_inicialitation_in_Tube_some), 0, 0, 1, 0},
  {&__pyx_kp_s_Fuel_Cylinder, __pyx_k_Fuel_Cylinder, sizeof(__pyx_k_Fuel_Cylinder), 0, 0, 1, 0},
  {&__pyx_kp_s_Incorrect_number_of_chambers_for, __pyx_k_Incorrect_number_of_chambers_for, sizeof(__pyx_k_Incorrect_number_of_chambers_for), 0, 0, 1, 0},
  {&__pyx_kp_s_Injection_Cylinder, __pyx_k_Injection_Cylinder, sizeof(__pyx_k_Injection_Cylinder), 0, 0, 1, 0},
  {&__pyx_kp_s_It_is_not_indicated_the_type_of, __pyx_k_It_is_not_indicated_the_type_of, sizeof(__pyx_k_It_is_not_indicated_the_type_of), 0, 0, 1, 0},
  {&__pyx_kp_s_It_is_not_indicated_the_type_of_2, __pyx_k_It_is_not_indicated_the_type_of_2, sizeof(__pyx_k_It_is_not_indicated_the_type_of_2), 0, 0, 1, 0},
  {&__pyx_kp_s_It_is_not_indicated_the_type_of_3, __pyx_k_It_is_not_indicated_the_type_of_3, sizeof(__pyx_k_It_is_not_indicated_the_type_of_3), 0, 0, 1, 0},
  {&__pyx_n_s_Junction, __pyx_k_Junction, sizeof(__pyx_k_Junction), 0, 0, 1, 1},
  {&__pyx_n_s_Junctions, __pyx_k_Junctions, sizeof(__pyx_k_Junctions), 0, 0, 1, 1},
  {&__pyx_n_s_Lv, __pyx_k_Lv, sizeof(__pyx_k_Lv), 0, 0, 1, 1},
  {&__pyx_n_s_Lvmax, __pyx_k_Lvmax, sizeof(__pyx_k_Lvmax), 0, 0, 1, 1},
  {&__pyx_n_s_Mw, __pyx_k_Mw, sizeof(__pyx_k_Mw), 0, 0, 1, 1},
  {&__pyx_n_s_Nval, __pyx_k_Nval, sizeof(__pyx_k_Nval), 0, 0, 1, 1},
  {&__pyx_kp_s_Options_are_intake_or_exhaust, __pyx_k_Options_are_intake_or_exhaust, sizeof(__pyx_k_Options_are_intake_or_exhaust), 0, 0, 1, 0},
  {&__pyx_n_s_Q_fuel, __pyx_k_Q_fuel, sizeof(__pyx_k_Q_fuel), 0, 0, 1, 1},
  {&__pyx_n_s_R_gas, __pyx_k_R_gas, sizeof(__pyx_k_R_gas), 0, 0, 1, 1},
  {&__pyx_n_s_SRv, __pyx_k_SRv, sizeof(__pyx_k_SRv), 0, 0, 1, 1},
  {&__pyx_n_s_Simulator, __pyx_k_Simulator, sizeof(__pyx_k_Simulator), 0, 0, 1, 1},
  {&__pyx_n_s_T_fuel, __pyx_k_T_fuel, sizeof(__pyx_k_T_fuel), 0, 0, 1, 1},
  {&__pyx_n_s_T_wall, __pyx_k_T_wall, sizeof(__pyx_k_T_wall), 0, 0, 1, 1},
  {&__pyx_n_s_Tank, __pyx_k_Tank, sizeof(__pyx_k_Tank), 0, 0, 1, 1},
  {&__pyx_n_s_Tanks, __pyx_k_Tanks, sizeof(__pyx_k_Tanks), 0, 0, 1, 1},
  {&__pyx_n_s_Tube, __pyx_k_Tube, sizeof(__pyx_k_Tube), 0, 0, 1, 1},
  {&__pyx_n_s_Tubes, __pyx_k_Tubes, sizeof(__pyx_k_Tubes), 0, 0, 1, 1},
  {&__pyx_n_s_U_crevice, __pyx_k_U_crevice, sizeof(__pyx_k_U_crevice), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s_Valve_Cylinder, __pyx_k_Valve_Cylinder, sizeof(__pyx_k_Valve_Cylinder), 0, 0, 1, 0},
  {&__pyx_n_s_Vol_clearance, __pyx_k_Vol_clearance, sizeof(__pyx_k_Vol_clearance), 0, 0, 1, 1},
  {&__pyx_n_s_Volume, __pyx_k_Volume, sizeof(__pyx_k_Volume), 0, 0, 1, 1},
  {&__pyx_n_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 1},
  {&__pyx_n_s_a_wiebe, __pyx_k_a_wiebe, sizeof(__pyx_k_a_wiebe), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_angle_V0, __pyx_k_angle_V0, sizeof(__pyx_k_angle_V0), 0, 0, 1, 1},
  {&__pyx_n_s_angle_VC, __pyx_k_angle_VC, sizeof(__pyx_k_angle_VC), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_arange, __pyx_k_arange, sizeof(__pyx_k_arange), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_assignOptional, __pyx_k_assignOptional, sizeof(__pyx_k_assignOptional), 0, 0, 1, 1},
  {&__pyx_n_s_atm_default, __pyx_k_atm_default, sizeof(__pyx_k_atm_default), 0, 0, 1, 1},
  {&__pyx_n_s_beta, __pyx_k_beta, sizeof(__pyx_k_beta), 0, 0, 1, 1},
  {&__pyx_n_s_boolean, __pyx_k_boolean, sizeof(__pyx_k_boolean), 0, 0, 1, 1},
  {&__pyx_n_s_calc_engine_data, __pyx_k_calc_engine_data, sizeof(__pyx_k_calc_engine_data), 0, 0, 1, 1},
  {&__pyx_n_s_chamber_heigh, __pyx_k_chamber_heigh, sizeof(__pyx_k_chamber_heigh), 0, 0, 1, 1},
  {&__pyx_n_s_coef_cp, __pyx_k_coef_cp, sizeof(__pyx_k_coef_cp), 0, 0, 1, 1},
  {&__pyx_n_s_combustion, __pyx_k_combustion, sizeof(__pyx_k_combustion), 0, 0, 1, 1},
  {&__pyx_n_s_combustion_model, __pyx_k_combustion_model, sizeof(__pyx_k_combustion_model), 0, 0, 1, 1},
  {&__pyx_n_s_crank_radius, __pyx_k_crank_radius, sizeof(__pyx_k_crank_radius), 0, 0, 1, 1},
  {&__pyx_n_s_curvature, __pyx_k_curvature, sizeof(__pyx_k_curvature), 0, 0, 1, 1},
  {&__pyx_n_s_cyl_default, __pyx_k_cyl_default, sizeof(__pyx_k_cyl_default), 0, 0, 1, 1},
  {&__pyx_n_s_dAreax, __pyx_k_dAreax, sizeof(__pyx_k_dAreax), 0, 0, 1, 1},
  {&__pyx_n_s_data_crevice, __pyx_k_data_crevice, sizeof(__pyx_k_data_crevice), 0, 0, 1, 1},
  {&__pyx_n_s_data_fuel, __pyx_k_data_fuel, sizeof(__pyx_k_data_fuel), 0, 0, 1, 1},
  {&__pyx_n_s_delta, __pyx_k_delta, sizeof(__pyx_k_delta), 0, 0, 1, 1},
  {&__pyx_n_s_delta_ca, __pyx_k_delta_ca, sizeof(__pyx_k_delta_ca), 0, 0, 1, 1},
  {&__pyx_n_s_diameter, __pyx_k_diameter, sizeof(__pyx_k_diameter), 0, 0, 1, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_dtheta_comb, __pyx_k_dtheta_comb, sizeof(__pyx_k_dtheta_comb), 0, 0, 1, 1},
  {&__pyx_n_s_dtheta_inj, __pyx_k_dtheta_inj, sizeof(__pyx_k_dtheta_inj), 0, 0, 1, 1},
  {&__pyx_n_s_dtheta_rpm, __pyx_k_dtheta_rpm, sizeof(__pyx_k_dtheta_rpm), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_engine_type, __pyx_k_engine_type, sizeof(__pyx_k_engine_type), 0, 0, 1, 1},
  {&__pyx_n_s_equal, __pyx_k_equal, sizeof(__pyx_k_equal), 0, 0, 1, 1},
  {&__pyx_n_s_exh2tube, __pyx_k_exh2tube, sizeof(__pyx_k_exh2tube), 0, 0, 1, 1},
  {&__pyx_n_s_exhaust, __pyx_k_exhaust, sizeof(__pyx_k_exhaust), 0, 0, 1, 1},
  {&__pyx_n_s_exhaust_valves, __pyx_k_exhaust_valves, sizeof(__pyx_k_exhaust_valves), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_extras, __pyx_k_extras, sizeof(__pyx_k_extras), 0, 0, 1, 1},
  {&__pyx_n_s_factor_ht, __pyx_k_factor_ht, sizeof(__pyx_k_factor_ht), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_filein_state, __pyx_k_filein_state, sizeof(__pyx_k_filein_state), 0, 0, 1, 1},
  {&__pyx_n_s_filesave_spd, __pyx_k_filesave_spd, sizeof(__pyx_k_filesave_spd), 0, 0, 1, 1},
  {&__pyx_n_s_filesave_state, __pyx_k_filesave_state, sizeof(__pyx_k_filesave_state), 0, 0, 1, 1},
  {&__pyx_n_s_filesin_spd, __pyx_k_filesin_spd, sizeof(__pyx_k_filesin_spd), 0, 0, 1, 1},
  {&__pyx_n_s_folder_name, __pyx_k_folder_name, sizeof(__pyx_k_folder_name), 0, 0, 1, 1},
  {&__pyx_n_s_fuel, __pyx_k_fuel, sizeof(__pyx_k_fuel), 0, 0, 1, 1},
  {&__pyx_n_s_fuel_lib, __pyx_k_fuel_lib, sizeof(__pyx_k_fuel_lib), 0, 0, 1, 1},
  {&__pyx_n_s_full_implicit, __pyx_k_full_implicit, sizeof(__pyx_k_full_implicit), 0, 0, 1, 1},
  {&__pyx_n_s_ga, __pyx_k_ga, sizeof(__pyx_k_ga), 0, 0, 1, 1},
  {&__pyx_n_s_ga_exhaust, __pyx_k_ga_exhaust, sizeof(__pyx_k_ga_exhaust), 0, 0, 1, 1},
  {&__pyx_n_s_ga_intake, __pyx_k_ga_intake, sizeof(__pyx_k_ga_intake), 0, 0, 1, 1},
  {&__pyx_n_s_gamma, __pyx_k_gamma, sizeof(__pyx_k_gamma), 0, 0, 1, 1},
  {&__pyx_n_s_get_state, __pyx_k_get_state, sizeof(__pyx_k_get_state), 0, 0, 1, 1},
  {&__pyx_n_s_h_film, __pyx_k_h_film, sizeof(__pyx_k_h_film), 0, 0, 1, 1},
  {&__pyx_n_s_head_chamber_area, __pyx_k_head_chamber_area, sizeof(__pyx_k_head_chamber_area), 0, 0, 1, 1},
  {&__pyx_n_s_heat_flow, __pyx_k_heat_flow, sizeof(__pyx_k_heat_flow), 0, 0, 1, 1},
  {&__pyx_n_s_histo, __pyx_k_histo, sizeof(__pyx_k_histo), 0, 0, 1, 1},
  {&__pyx_n_s_hvap_fuel, __pyx_k_hvap_fuel, sizeof(__pyx_k_hvap_fuel), 0, 0, 1, 1},
  {&__pyx_n_s_icyl, __pyx_k_icyl, sizeof(__pyx_k_icyl), 0, 0, 1, 1},
  {&__pyx_n_s_ig_order, __pyx_k_ig_order, sizeof(__pyx_k_ig_order), 0, 0, 1, 1},
  {&__pyx_n_s_ignition_delay_model, __pyx_k_ignition_delay_model, sizeof(__pyx_k_ignition_delay_model), 0, 0, 1, 1},
  {&__pyx_n_s_implicit, __pyx_k_implicit, sizeof(__pyx_k_implicit), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_indx, __pyx_k_indx, sizeof(__pyx_k_indx), 0, 0, 1, 1},
  {&__pyx_n_s_inicia, __pyx_k_inicia, sizeof(__pyx_k_inicia), 0, 0, 1, 1},
  {&__pyx_n_s_injection, __pyx_k_injection, sizeof(__pyx_k_injection), 0, 0, 1, 1},
  {&__pyx_n_s_int2tube, __pyx_k_int2tube, sizeof(__pyx_k_int2tube), 0, 0, 1, 1},
  {&__pyx_n_s_intake, __pyx_k_intake, sizeof(__pyx_k_intake), 0, 0, 1, 1},
  {&__pyx_n_s_intake_valves, __pyx_k_intake_valves, sizeof(__pyx_k_intake_valves), 0, 0, 1, 1},
  {&__pyx_n_s_integral, __pyx_k_integral, sizeof(__pyx_k_integral), 0, 0, 1, 1},
  {&__pyx_n_s_irpm, __pyx_k_irpm, sizeof(__pyx_k_irpm), 0, 0, 1, 1},
  {&__pyx_n_s_iter_sim1d, __pyx_k_iter_sim1d, sizeof(__pyx_k_iter_sim1d), 0, 0, 1, 1},
  {&__pyx_n_s_junc_default, __pyx_k_junc_default, sizeof(__pyx_k_junc_default), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_longitud, __pyx_k_longitud, sizeof(__pyx_k_longitud), 0, 0, 1, 1},
  {&__pyx_n_s_m_inj, __pyx_k_m_inj, sizeof(__pyx_k_m_inj), 0, 0, 1, 1},
  {&__pyx_n_s_m_wiebe, __pyx_k_m_wiebe, sizeof(__pyx_k_m_wiebe), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_major_radius, __pyx_k_major_radius, sizeof(__pyx_k_major_radius), 0, 0, 1, 1},
  {&__pyx_n_s_mass, __pyx_k_mass, sizeof(__pyx_k_mass), 0, 0, 1, 1},
  {&__pyx_n_s_mass_C, __pyx_k_mass_C, sizeof(__pyx_k_mass_C), 0, 0, 1, 1},
  {&__pyx_n_s_mass_vec, __pyx_k_mass_vec, sizeof(__pyx_k_mass_vec), 0, 0, 1, 1},
  {&__pyx_n_s_mfdot_array, __pyx_k_mfdot_array, sizeof(__pyx_k_mfdot_array), 0, 0, 1, 1},
  {&__pyx_n_s_minor_radius, __pyx_k_minor_radius, sizeof(__pyx_k_minor_radius), 0, 0, 1, 1},
  {&__pyx_n_s_mod, __pyx_k_mod, sizeof(__pyx_k_mod), 0, 0, 1, 1},
  {&__pyx_n_s_model_ht, __pyx_k_model_ht, sizeof(__pyx_k_model_ht), 0, 0, 1, 1},
  {&__pyx_n_s_modelo_jun, __pyx_k_modelo_jun, sizeof(__pyx_k_modelo_jun), 0, 0, 1, 1},
  {&__pyx_n_s_myfunction, __pyx_k_myfunction, sizeof(__pyx_k_myfunction), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nappend, __pyx_k_nappend, sizeof(__pyx_k_nappend), 0, 0, 1, 1},
  {&__pyx_n_s_ncycles, __pyx_k_ncycles, sizeof(__pyx_k_ncycles), 0, 0, 1, 1},
  {&__pyx_n_s_ndof, __pyx_k_ndof, sizeof(__pyx_k_ndof), 0, 0, 1, 1},
  {&__pyx_n_s_nleft, __pyx_k_nleft, sizeof(__pyx_k_nleft), 0, 0, 1, 1},
  {&__pyx_n_s_nnod, __pyx_k_nnod, sizeof(__pyx_k_nnod), 0, 0, 1, 1},
  {&__pyx_n_s_nnod_input, __pyx_k_nnod_input, sizeof(__pyx_k_nnod_input), 0, 0, 1, 1},
  {&__pyx_n_s_node2tube, __pyx_k_node2tube, sizeof(__pyx_k_node2tube), 0, 0, 1, 1},
  {&__pyx_n_s_none, __pyx_k_none, sizeof(__pyx_k_none), 0, 0, 1, 1},
  {&__pyx_n_s_nright, __pyx_k_nright, sizeof(__pyx_k_nright), 0, 0, 1, 1},
  {&__pyx_n_s_nsave, __pyx_k_nsave, sizeof(__pyx_k_nsave), 0, 0, 1, 1},
  {&__pyx_n_s_nstroke, __pyx_k_nstroke, sizeof(__pyx_k_nstroke), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_nvanes, __pyx_k_nvanes, sizeof(__pyx_k_nvanes), 0, 0, 1, 1},
  {&__pyx_n_s_onlyAssert, __pyx_k_onlyAssert, sizeof(__pyx_k_onlyAssert), 0, 0, 1, 1},
  {&__pyx_n_s_phi, __pyx_k_phi, sizeof(__pyx_k_phi), 0, 0, 1, 1},
  {&__pyx_n_s_phi_ig, __pyx_k_phi_ig, sizeof(__pyx_k_phi_ig), 0, 0, 1, 1},
  {&__pyx_n_s_pi, __pyx_k_pi, sizeof(__pyx_k_pi), 0, 0, 1, 1},
  {&__pyx_n_s_piston_area, __pyx_k_piston_area, sizeof(__pyx_k_piston_area), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_prop, __pyx_k_prop, sizeof(__pyx_k_prop), 0, 0, 1, 1},
  {&__pyx_n_s_pulse, __pyx_k_pulse, sizeof(__pyx_k_pulse), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rod_length, __pyx_k_rod_length, sizeof(__pyx_k_rod_length), 0, 0, 1, 1},
  {&__pyx_n_s_rpms, __pyx_k_rpms, sizeof(__pyx_k_rpms), 0, 0, 1, 1},
  {&__pyx_n_s_scavenge, __pyx_k_scavenge, sizeof(__pyx_k_scavenge), 0, 0, 1, 1},
  {&__pyx_n_s_scavenge_type, __pyx_k_scavenge_type, sizeof(__pyx_k_scavenge_type), 0, 0, 1, 1},
  {&__pyx_n_s_sign, __pyx_k_sign, sizeof(__pyx_k_sign), 0, 0, 1, 1},
  {&__pyx_n_s_species_model, __pyx_k_species_model, sizeof(__pyx_k_species_model), 0, 0, 1, 1},
  {&__pyx_n_s_start_comb, __pyx_k_start_comb, sizeof(__pyx_k_start_comb), 0, 0, 1, 1},
  {&__pyx_n_s_state_ini, __pyx_k_state_ini, sizeof(__pyx_k_state_ini), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_tank_default, __pyx_k_tank_default, sizeof(__pyx_k_tank_default), 0, 0, 1, 1},
  {&__pyx_kp_s_tengo_scavenge, __pyx_k_tengo_scavenge, sizeof(__pyx_k_tengo_scavenge), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_testDefault, __pyx_k_testDefault, sizeof(__pyx_k_testDefault), 0, 0, 1, 1},
  {&__pyx_n_s_tf, __pyx_k_tf, sizeof(__pyx_k_tf), 0, 0, 1, 1},
  {&__pyx_n_s_theta_0, __pyx_k_theta_0, sizeof(__pyx_k_theta_0), 0, 0, 1, 1},
  {&__pyx_n_s_theta_id, __pyx_k_theta_id, sizeof(__pyx_k_theta_id), 0, 0, 1, 1},
  {&__pyx_n_s_theta_ig_0, __pyx_k_theta_ig_0, sizeof(__pyx_k_theta_ig_0), 0, 0, 1, 1},
  {&__pyx_n_s_theta_inj_ini, __pyx_k_theta_inj_ini, sizeof(__pyx_k_theta_inj_ini), 0, 0, 1, 1},
  {&__pyx_n_s_tleft, __pyx_k_tleft, sizeof(__pyx_k_tleft), 0, 0, 1, 1},
  {&__pyx_n_s_tright, __pyx_k_tright, sizeof(__pyx_k_tright), 0, 0, 1, 1},
  {&__pyx_n_s_tube, __pyx_k_tube, sizeof(__pyx_k_tube), 0, 0, 1, 1},
  {&__pyx_n_s_tube_default, __pyx_k_tube_default, sizeof(__pyx_k_tube_default), 0, 0, 1, 1},
  {&__pyx_n_s_twall, __pyx_k_twall, sizeof(__pyx_k_twall), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_type_dat, __pyx_k_type_dat, sizeof(__pyx_k_type_dat), 0, 0, 1, 1},
  {&__pyx_n_s_type_end, __pyx_k_type_end, sizeof(__pyx_k_type_end), 0, 0, 1, 1},
  {&__pyx_n_s_type_ig, __pyx_k_type_ig, sizeof(__pyx_k_type_ig), 0, 0, 1, 1},
  {&__pyx_n_s_use_global_gas_properties, __pyx_k_use_global_gas_properties, sizeof(__pyx_k_use_global_gas_properties), 0, 0, 1, 1},
  {&__pyx_n_s_validateInList, __pyx_k_validateInList, sizeof(__pyx_k_validateInList), 0, 0, 1, 1},
  {&__pyx_n_s_validatePositive, __pyx_k_validatePositive, sizeof(__pyx_k_validatePositive), 0, 0, 1, 1},
  {&__pyx_n_s_validateSize, __pyx_k_validateSize, sizeof(__pyx_k_validateSize), 0, 0, 1, 1},
  {&__pyx_n_s_validator, __pyx_k_validator, sizeof(__pyx_k_validator), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_valve_model, __pyx_k_valve_model, sizeof(__pyx_k_valve_model), 0, 0, 1, 1},
  {&__pyx_n_s_viscous_flow, __pyx_k_viscous_flow, sizeof(__pyx_k_viscous_flow), 0, 0, 1, 1},
  {&__pyx_n_s_xbdot_array, __pyx_k_xbdot_array, sizeof(__pyx_k_xbdot_array), 0, 0, 1, 1},
  {&__pyx_n_s_xnod, __pyx_k_xnod, sizeof(__pyx_k_xnod), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 163, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 228, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(6, 1, __pyx_L1_error);
  __pyx_float_0_ = PyFloat_FromDouble(0.); if (unlikely(!__pyx_float_0_)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_2_ = PyFloat_FromDouble(2.); if (unlikely(!__pyx_float_2_)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_2_0 = PyFloat_FromDouble(2.0); if (unlikely(!__pyx_float_2_0)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_8_0 = PyFloat_FromDouble(8.0); if (unlikely(!__pyx_float_8_0)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_1_36 = PyFloat_FromDouble(1.36); if (unlikely(!__pyx_float_1_36)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_1_64 = PyFloat_FromDouble(1.64); if (unlikely(!__pyx_float_1_64)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_16_0 = PyFloat_FromDouble(16.0); if (unlikely(!__pyx_float_16_0)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_18_0 = PyFloat_FromDouble(18.0); if (unlikely(!__pyx_float_18_0)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_2_25 = PyFloat_FromDouble(2.25); if (unlikely(!__pyx_float_2_25)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_6_02 = PyFloat_FromDouble(6.02); if (unlikely(!__pyx_float_6_02)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_0_001 = PyFloat_FromDouble(0.001); if (unlikely(!__pyx_float_0_001)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_1_008 = PyFloat_FromDouble(1.008); if (unlikely(!__pyx_float_1_008)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_12_01 = PyFloat_FromDouble(12.01); if (unlikely(!__pyx_float_12_01)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_14_01 = PyFloat_FromDouble(14.01); if (unlikely(!__pyx_float_14_01)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_286_9 = PyFloat_FromDouble(286.9); if (unlikely(!__pyx_float_286_9)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_114_23 = PyFloat_FromDouble(114.23); if (unlikely(!__pyx_float_114_23)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_44_3e6 = PyFloat_FromDouble(44.3e6); if (unlikely(!__pyx_float_44_3e6)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_3_14159 = PyFloat_FromDouble(3.14159); if (unlikely(!__pyx_float_3_14159)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_308000_0 = PyFloat_FromDouble(308000.0); if (unlikely(!__pyx_float_308000_0)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_1_0267eneg_08 = PyFloat_FromDouble(1.0267e-08); if (unlikely(!__pyx_float_1_0267eneg_08)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_9_1396eneg_02 = PyFloat_FromDouble(9.1396e-02); if (unlikely(!__pyx_float_9_1396eneg_02)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_neg_1_5575e_04 = PyFloat_FromDouble(-1.5575e+04); if (unlikely(!__pyx_float_neg_1_5575e_04)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_neg_2_7835eneg_01 = PyFloat_FromDouble(-2.7835e-01); if (unlikely(!__pyx_float_neg_2_7835eneg_01)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_float_neg_4_9209eneg_05 = PyFloat_FromDouble(-4.9209e-05); if (unlikely(!__pyx_float_neg_4_9209eneg_05)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(6, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initsimCythonCPP(void); /*proto*/
PyMODINIT_FUNC initsimCythonCPP(void)
#else
PyMODINIT_FUNC PyInit_simCythonCPP(void); /*proto*/
PyMODINIT_FUNC PyInit_simCythonCPP(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_simCythonCPP(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(6, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("simCythonCPP", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(6, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(6, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(6, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_simCythonCPP) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(6, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "simCythonCPP")) {
      if (unlikely(PyDict_SetItemString(modules, "simCythonCPP", __pyx_m) < 0)) __PYX_ERR(6, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_12simCythonCPP_Cylinder) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  __pyx_type_12simCythonCPP_Cylinder.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Cylinder", (PyObject *)&__pyx_type_12simCythonCPP_Cylinder) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  __pyx_ptype_12simCythonCPP_Cylinder = &__pyx_type_12simCythonCPP_Cylinder;
  if (PyType_Ready(&__pyx_type_12simCythonCPP_Junction) < 0) __PYX_ERR(2, 44, __pyx_L1_error)
  __pyx_type_12simCythonCPP_Junction.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Junction", (PyObject *)&__pyx_type_12simCythonCPP_Junction) < 0) __PYX_ERR(2, 44, __pyx_L1_error)
  __pyx_ptype_12simCythonCPP_Junction = &__pyx_type_12simCythonCPP_Junction;
  if (PyType_Ready(&__pyx_type_12simCythonCPP_Tube) < 0) __PYX_ERR(3, 54, __pyx_L1_error)
  __pyx_type_12simCythonCPP_Tube.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Tube", (PyObject *)&__pyx_type_12simCythonCPP_Tube) < 0) __PYX_ERR(3, 54, __pyx_L1_error)
  __pyx_ptype_12simCythonCPP_Tube = &__pyx_type_12simCythonCPP_Tube;
  if (PyType_Ready(&__pyx_type_12simCythonCPP_Tank) < 0) __PYX_ERR(4, 51, __pyx_L1_error)
  __pyx_type_12simCythonCPP_Tank.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Tank", (PyObject *)&__pyx_type_12simCythonCPP_Tank) < 0) __PYX_ERR(4, 51, __pyx_L1_error)
  __pyx_ptype_12simCythonCPP_Tank = &__pyx_type_12simCythonCPP_Tank;
  if (PyType_Ready(&__pyx_type_12simCythonCPP_Atmosphere) < 0) __PYX_ERR(5, 33, __pyx_L1_error)
  __pyx_type_12simCythonCPP_Atmosphere.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Atmosphere", (PyObject *)&__pyx_type_12simCythonCPP_Atmosphere) < 0) __PYX_ERR(5, 33, __pyx_L1_error)
  __pyx_ptype_12simCythonCPP_Atmosphere = &__pyx_type_12simCythonCPP_Atmosphere;
  if (PyType_Ready(&__pyx_type_12simCythonCPP_Simulator) < 0) __PYX_ERR(1, 128, __pyx_L1_error)
  __pyx_type_12simCythonCPP_Simulator.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Simulator", (PyObject *)&__pyx_type_12simCythonCPP_Simulator) < 0) __PYX_ERR(1, 128, __pyx_L1_error)
  __pyx_ptype_12simCythonCPP_Simulator = &__pyx_type_12simCythonCPP_Simulator;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  #endif

  /* "simCythonCPP.pyx":1
 * from numpy import *             # <<<<<<<<<<<<<<
 * 
 * include "Cylinder.pyx"
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__2);
  __Pyx_GIVEREF(__pyx_n_s__2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__2);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_import_star(__pyx_t_2) < 0) __PYX_ERR(6, 1, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Cylinder.pyx":1
 * from numpy import array, zeros, sign, arange, equal             # <<<<<<<<<<<<<<
 * from validator import *
 * from fuel_lib import *
 */
  __pyx_t_2 = PyList_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_array);
  __Pyx_GIVEREF(__pyx_n_s_array);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_array);
  __Pyx_INCREF(__pyx_n_s_zeros);
  __Pyx_GIVEREF(__pyx_n_s_zeros);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_zeros);
  __Pyx_INCREF(__pyx_n_s_sign);
  __Pyx_GIVEREF(__pyx_n_s_sign);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_sign);
  __Pyx_INCREF(__pyx_n_s_arange);
  __Pyx_GIVEREF(__pyx_n_s_arange);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_arange);
  __Pyx_INCREF(__pyx_n_s_equal);
  __Pyx_GIVEREF(__pyx_n_s_equal);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_equal);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_zeros, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_sign); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sign, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_arange); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arange, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_equal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_equal, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Cylinder.pyx":2
 * from numpy import array, zeros, sign, arange, equal
 * from validator import *             # <<<<<<<<<<<<<<
 * from fuel_lib import *
 * cdef extern from "cylinder.h":
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__2);
  __Pyx_GIVEREF(__pyx_n_s__2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__2);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_validator, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_import_star(__pyx_t_2) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Cylinder.pyx":3
 * from numpy import array, zeros, sign, arange, equal
 * from validator import *
 * from fuel_lib import *             # <<<<<<<<<<<<<<
 * cdef extern from "cylinder.h":
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__2);
  __Pyx_GIVEREF(__pyx_n_s__2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__2);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_fuel_lib, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_import_star(__pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Junction.pyx":1
 * from numpy import array, zeros, sign, arange, equal             # <<<<<<<<<<<<<<
 * cdef extern from "junction.h":
 * 
 */
  __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_array);
  __Pyx_GIVEREF(__pyx_n_s_array);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_array);
  __Pyx_INCREF(__pyx_n_s_zeros);
  __Pyx_GIVEREF(__pyx_n_s_zeros);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_zeros);
  __Pyx_INCREF(__pyx_n_s_sign);
  __Pyx_GIVEREF(__pyx_n_s_sign);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_sign);
  __Pyx_INCREF(__pyx_n_s_arange);
  __Pyx_GIVEREF(__pyx_n_s_arange);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_arange);
  __Pyx_INCREF(__pyx_n_s_equal);
  __Pyx_GIVEREF(__pyx_n_s_equal);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_equal);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array, __pyx_t_1) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_zeros, __pyx_t_1) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_sign); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sign, __pyx_t_1) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_arange); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arange, __pyx_t_1) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_equal); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_equal, __pyx_t_1) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Tube.pyx":1
 * from numpy import array, zeros, sign, arange, equal             # <<<<<<<<<<<<<<
 * from validator import *
 * cdef extern from "tube.h":
 */
  __pyx_t_2 = PyList_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_array);
  __Pyx_GIVEREF(__pyx_n_s_array);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_array);
  __Pyx_INCREF(__pyx_n_s_zeros);
  __Pyx_GIVEREF(__pyx_n_s_zeros);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_zeros);
  __Pyx_INCREF(__pyx_n_s_sign);
  __Pyx_GIVEREF(__pyx_n_s_sign);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_sign);
  __Pyx_INCREF(__pyx_n_s_arange);
  __Pyx_GIVEREF(__pyx_n_s_arange);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_arange);
  __Pyx_INCREF(__pyx_n_s_equal);
  __Pyx_GIVEREF(__pyx_n_s_equal);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_equal);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array, __pyx_t_2) < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_zeros, __pyx_t_2) < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_sign); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sign, __pyx_t_2) < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_arange); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arange, __pyx_t_2) < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_equal); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_equal, __pyx_t_2) < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Tube.pyx":2
 * from numpy import array, zeros, sign, arange, equal
 * from validator import *             # <<<<<<<<<<<<<<
 * cdef extern from "tube.h":
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__2);
  __Pyx_GIVEREF(__pyx_n_s__2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__2);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_validator, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_import_star(__pyx_t_2) < 0) __PYX_ERR(3, 2, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Tank.pyx":1
 * from numpy import array, zeros, sign, arange, equal             # <<<<<<<<<<<<<<
 * cdef extern from "tank.h":
 * 
 */
  __pyx_t_2 = PyList_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_array);
  __Pyx_GIVEREF(__pyx_n_s_array);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_array);
  __Pyx_INCREF(__pyx_n_s_zeros);
  __Pyx_GIVEREF(__pyx_n_s_zeros);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_zeros);
  __Pyx_INCREF(__pyx_n_s_sign);
  __Pyx_GIVEREF(__pyx_n_s_sign);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_sign);
  __Pyx_INCREF(__pyx_n_s_arange);
  __Pyx_GIVEREF(__pyx_n_s_arange);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_arange);
  __Pyx_INCREF(__pyx_n_s_equal);
  __Pyx_GIVEREF(__pyx_n_s_equal);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_equal);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array, __pyx_t_2) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_zeros, __pyx_t_2) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_sign); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sign, __pyx_t_2) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_arange); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arange, __pyx_t_2) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_equal); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_equal, __pyx_t_2) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Atmosphere.pyx":1
 * from numpy import array, zeros, sign, arange, equal             # <<<<<<<<<<<<<<
 * cdef extern from "atmosphere.h":
 * 
 */
  __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_array);
  __Pyx_GIVEREF(__pyx_n_s_array);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_array);
  __Pyx_INCREF(__pyx_n_s_zeros);
  __Pyx_GIVEREF(__pyx_n_s_zeros);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_zeros);
  __Pyx_INCREF(__pyx_n_s_sign);
  __Pyx_GIVEREF(__pyx_n_s_sign);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_sign);
  __Pyx_INCREF(__pyx_n_s_arange);
  __Pyx_GIVEREF(__pyx_n_s_arange);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_arange);
  __Pyx_INCREF(__pyx_n_s_equal);
  __Pyx_GIVEREF(__pyx_n_s_equal);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_equal);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_zeros, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_sign); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sign, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_arange); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arange, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_equal); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_equal, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Simulator.pyx":1
 * from numpy import array, asarray, zeros, sign, arange, equal             # <<<<<<<<<<<<<<
 * from myfunction import *
 * cdef extern from "simulator.h":
 */
  __pyx_t_2 = PyList_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_array);
  __Pyx_GIVEREF(__pyx_n_s_array);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_array);
  __Pyx_INCREF(__pyx_n_s_asarray);
  __Pyx_GIVEREF(__pyx_n_s_asarray);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_asarray);
  __Pyx_INCREF(__pyx_n_s_zeros);
  __Pyx_GIVEREF(__pyx_n_s_zeros);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_zeros);
  __Pyx_INCREF(__pyx_n_s_sign);
  __Pyx_GIVEREF(__pyx_n_s_sign);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_sign);
  __Pyx_INCREF(__pyx_n_s_arange);
  __Pyx_GIVEREF(__pyx_n_s_arange);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_arange);
  __Pyx_INCREF(__pyx_n_s_equal);
  __Pyx_GIVEREF(__pyx_n_s_equal);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_s_equal);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_asarray, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_zeros, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_sign); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sign, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_arange); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arange, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_equal); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_equal, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Simulator.pyx":2
 * from numpy import array, asarray, zeros, sign, arange, equal
 * from myfunction import *             # <<<<<<<<<<<<<<
 * cdef extern from "simulator.h":
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__2);
  __Pyx_GIVEREF(__pyx_n_s__2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__2);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_myfunction, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_import_star(__pyx_t_2) < 0) __PYX_ERR(1, 2, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "simCythonCPP.pyx":1
 * from numpy import *             # <<<<<<<<<<<<<<
 * 
 * include "Cylinder.pyx"
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init simCythonCPP", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init simCythonCPP");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* GetItemInt */
  static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyIntBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* RaiseTooManyValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
      static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
      static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* UnpackUnboundCMethod */
      static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(PyObject_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
      static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_keys */
      static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* BytesEquals */
      static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
      static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyObjectCallMethod1 */
      static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* append */
      static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* PyFloatBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, CYTHON_UNUSED int inplace) {
    const double b = floatval;
    double a, result;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
        }
    } else {
        return (inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2));
    }
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyFloatBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddObjC(PyObject *op1, PyObject *op2, double floatval, CYTHON_UNUSED int inplace) {
    const double b = floatval;
    double a, result;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
        }
    } else {
        return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
    }
        PyFPE_START_PROTECT("add", return NULL)
        result = a + b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyErrFetchRestore */
          #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
          #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* None */
            static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* RaiseDoubleKeywords */
            static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
            static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* Import */
            static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
            static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CodeObjectCache */
            static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
            #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
            #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* Print */
            #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
            static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* PrintOne */
            #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
            static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CStringEquals */
            static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    return *s1 == *s2;
}

/* CheckBinaryVersion */
            static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
            static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
